
STM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce70  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800d110  0800d110  0001d110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d54c  0800d54c  0001d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d554  0800d554  0001d554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d558  0800d558  0001d558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800d55c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  0800d73c  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  0800d79c  00020240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  240002a0  0800d7fc  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ac8  0800d7fc  00020ac8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dff4  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc7  00000000  00000000  0003e2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  00041290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00042528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003906c  00000000  00000000  000436a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d38  00000000  00000000  0007c714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001656de  00000000  00000000  0009544c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fab2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005eb4  00000000  00000000  001fab7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a0 	.word	0x240002a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d0f8 	.word	0x0800d0f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002a4 	.word	0x240002a4
 80002dc:	0800d0f8 	.word	0x0800d0f8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <HAL_SPI_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    HAL_SPI_Receive_DMA(&hspi1, pData, BUFFER_SIZE);
 800069c:	2219      	movs	r2, #25
 800069e:	4908      	ldr	r1, [pc, #32]	; (80006c0 <HAL_SPI_RxCpltCallback+0x2c>)
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <HAL_SPI_RxCpltCallback+0x30>)
 80006a2:	f007 f9d3 	bl	8007a4c <HAL_SPI_Receive_DMA>
    HAL_UART_Transmit_IT(&huart3, pData, BUFFER_SIZE);
 80006a6:	2219      	movs	r2, #25
 80006a8:	4905      	ldr	r1, [pc, #20]	; (80006c0 <HAL_SPI_RxCpltCallback+0x2c>)
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <HAL_SPI_RxCpltCallback+0x34>)
 80006ac:	f008 f940 	bl	8008930 <HAL_UART_Transmit_IT>
    worked = 1;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_SPI_RxCpltCallback+0x38>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	24000a8c 	.word	0x24000a8c
 80006c4:	240003a4 	.word	0x240003a4
 80006c8:	240004a4 	.word	0x240004a4
 80006cc:	24000aa5 	.word	0x24000aa5

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f000 ff92 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f848 	bl	800076c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006dc:	f000 f8c6 	bl	800086c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e0:	f000 fa22 	bl	8000b28 <MX_GPIO_Init>
  MX_ETH_Init();
 80006e4:	f000 f8de 	bl	80008a4 <MX_ETH_Init>
  MX_DMA_Init();
 80006e8:	f000 f9fe 	bl	8000ae8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006ec:	f000 f9ca 	bl	8000a84 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80006f0:	f000 f924 	bl	800093c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006f4:	f000 f97a 	bl	80009ec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA(&hspi1, pData, BUFFER_SIZE);
 80006f8:	2219      	movs	r2, #25
 80006fa:	4913      	ldr	r1, [pc, #76]	; (8000748 <main+0x78>)
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <main+0x7c>)
 80006fe:	f007 f9a5 	bl	8007a4c <HAL_SPI_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(MSG, "Encoder Counter = %d\n\r", enc_ctr);
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <main+0x80>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	4912      	ldr	r1, [pc, #72]	; (8000754 <main+0x84>)
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <main+0x88>)
 800070c:	f00a fafa 	bl	800ad04 <siprintf>
	  HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), BUFFER_SIZE);
 8000710:	2319      	movs	r3, #25
 8000712:	2223      	movs	r2, #35	; 0x23
 8000714:	4910      	ldr	r1, [pc, #64]	; (8000758 <main+0x88>)
 8000716:	4811      	ldr	r0, [pc, #68]	; (800075c <main+0x8c>)
 8000718:	f008 f873 	bl	8008802 <HAL_UART_Transmit>
	  HAL_Delay(500);
 800071c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000720:	f000 fffe 	bl	8001720 <HAL_Delay>
	  if(worked){
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <main+0x90>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d0ea      	beq.n	8000702 <main+0x32>
//		  sprintf(WOR, "Worked at %f\n\r", HAL_GetTick()/1000.0);
		  sprintf(WOR, "Worked");
 800072c:	490d      	ldr	r1, [pc, #52]	; (8000764 <main+0x94>)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <main+0x98>)
 8000730:	f00a fae8 	bl	800ad04 <siprintf>
		  HAL_UART_Transmit(&huart3, WOR, sizeof(WOR), BUFFER_SIZE);
 8000734:	2319      	movs	r3, #25
 8000736:	2223      	movs	r2, #35	; 0x23
 8000738:	490b      	ldr	r1, [pc, #44]	; (8000768 <main+0x98>)
 800073a:	4808      	ldr	r0, [pc, #32]	; (800075c <main+0x8c>)
 800073c:	f008 f861 	bl	8008802 <HAL_UART_Transmit>
		  worked = 0;
 8000740:	4b07      	ldr	r3, [pc, #28]	; (8000760 <main+0x90>)
 8000742:	2200      	movs	r2, #0
 8000744:	701a      	strb	r2, [r3, #0]
	  sprintf(MSG, "Encoder Counter = %d\n\r", enc_ctr);
 8000746:	e7dc      	b.n	8000702 <main+0x32>
 8000748:	24000a8c 	.word	0x24000a8c
 800074c:	240003a4 	.word	0x240003a4
 8000750:	24000a40 	.word	0x24000a40
 8000754:	0800d110 	.word	0x0800d110
 8000758:	24000a44 	.word	0x24000a44
 800075c:	240004a4 	.word	0x240004a4
 8000760:	24000aa5 	.word	0x24000aa5
 8000764:	0800d128 	.word	0x0800d128
 8000768:	24000a68 	.word	0x24000a68

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	; 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	224c      	movs	r2, #76	; 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f009 fe76 	bl	800a46c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f009 fe70 	bl	800a46c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f004 fceb 	bl	8005168 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <SystemClock_Config+0xf8>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	4a32      	ldr	r2, [pc, #200]	; (8000864 <SystemClock_Config+0xf8>)
 800079c:	f023 0301 	bic.w	r3, r3, #1
 80007a0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <SystemClock_Config+0xf8>)
 80007a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b2e      	ldr	r3, [pc, #184]	; (8000868 <SystemClock_Config+0xfc>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b4:	4a2c      	ldr	r2, [pc, #176]	; (8000868 <SystemClock_Config+0xfc>)
 80007b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <SystemClock_Config+0xfc>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c8:	bf00      	nop
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <SystemClock_Config+0xfc>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007d6:	d1f8      	bne.n	80007ca <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007d8:	2303      	movs	r3, #3
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007dc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ea:	2302      	movs	r3, #2
 80007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ee:	2302      	movs	r3, #2
 80007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007f6:	2318      	movs	r3, #24
 80007f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fe:	2304      	movs	r3, #4
 8000800:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000806:	230c      	movs	r3, #12
 8000808:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800080a:	2300      	movs	r3, #0
 800080c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000816:	4618      	mov	r0, r3
 8000818:	f004 fcf0 	bl	80051fc <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000822:	f000 fa73 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	233f      	movs	r3, #63	; 0x3f
 8000828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082a:	2303      	movs	r3, #3
 800082c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800083a:	2340      	movs	r3, #64	; 0x40
 800083c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2101      	movs	r1, #1
 800084a:	4618      	mov	r0, r3
 800084c:	f005 f904 	bl	8005a58 <HAL_RCC_ClockConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000856:	f000 fa59 	bl	8000d0c <Error_Handler>
  }
}
 800085a:	bf00      	nop
 800085c:	3770      	adds	r7, #112	; 0x70
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58000400 	.word	0x58000400
 8000868:	58024800 	.word	0x58024800

0800086c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b0b0      	sub	sp, #192	; 0xc0
 8000870:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	22bc      	movs	r2, #188	; 0xbc
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fdf7 	bl	800a46c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800087e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000882:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	4618      	mov	r0, r3
 800088c:	f005 fc70 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8000896:	f000 fa39 	bl	8000d0c <Error_Handler>
  }
}
 800089a:	bf00      	nop
 800089c:	37c0      	adds	r7, #192	; 0xc0
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ETH_Init+0x80>)
 80008aa:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <MX_ETH_Init+0x84>)
 80008ac:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	; (800092c <MX_ETH_Init+0x88>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	; (800092c <MX_ETH_Init+0x88>)
 80008b6:	2280      	movs	r2, #128	; 0x80
 80008b8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_ETH_Init+0x88>)
 80008bc:	22e1      	movs	r2, #225	; 0xe1
 80008be:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_ETH_Init+0x88>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_ETH_Init+0x88>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_ETH_Init+0x88>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_ETH_Init+0x80>)
 80008d4:	4a15      	ldr	r2, [pc, #84]	; (800092c <MX_ETH_Init+0x88>)
 80008d6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <MX_ETH_Init+0x80>)
 80008da:	2201      	movs	r2, #1
 80008dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_ETH_Init+0x80>)
 80008e0:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_ETH_Init+0x8c>)
 80008e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_ETH_Init+0x80>)
 80008e6:	4a13      	ldr	r2, [pc, #76]	; (8000934 <MX_ETH_Init+0x90>)
 80008e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_ETH_Init+0x80>)
 80008ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008f2:	480c      	ldr	r0, [pc, #48]	; (8000924 <MX_ETH_Init+0x80>)
 80008f4:	f003 fb92 	bl	800401c <HAL_ETH_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008fe:	f000 fa05 	bl	8000d0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000902:	2238      	movs	r2, #56	; 0x38
 8000904:	2100      	movs	r1, #0
 8000906:	480c      	ldr	r0, [pc, #48]	; (8000938 <MX_ETH_Init+0x94>)
 8000908:	f009 fdb0 	bl	800a46c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <MX_ETH_Init+0x94>)
 800090e:	2221      	movs	r2, #33	; 0x21
 8000910:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_ETH_Init+0x94>)
 8000914:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000918:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <MX_ETH_Init+0x94>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	240002f4 	.word	0x240002f4
 8000928:	40028000 	.word	0x40028000
 800092c:	24000aa8 	.word	0x24000aa8
 8000930:	24000240 	.word	0x24000240
 8000934:	240001e0 	.word	0x240001e0
 8000938:	240002bc 	.word	0x240002bc

0800093c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000942:	4a29      	ldr	r2, [pc, #164]	; (80009e8 <MX_SPI1_Init+0xac>)
 8000944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000948:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800094c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000950:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000954:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000956:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000958:	220f      	movs	r2, #15
 800095a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <MX_SPI1_Init+0xa8>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_SPI1_Init+0xa8>)
 800096a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800096e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000970:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000976:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_SPI1_Init+0xa8>)
 800097a:	2200      	movs	r2, #0
 800097c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000980:	2200      	movs	r2, #0
 8000982:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000986:	2200      	movs	r2, #0
 8000988:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_SPI1_Init+0xa8>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_SPI1_Init+0xa8>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <MX_SPI1_Init+0xa8>)
 800099a:	2200      	movs	r2, #0
 800099c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800099e:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009a4:	4b0f      	ldr	r3, [pc, #60]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009b0:	4b0c      	ldr	r3, [pc, #48]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009bc:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009c2:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009ce:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_SPI1_Init+0xa8>)
 80009d0:	f006 ff36 	bl	8007840 <HAL_SPI_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80009da:	f000 f997 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	240003a4 	.word	0x240003a4
 80009e8:	40013000 	.word	0x40013000

080009ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009f0:	4b22      	ldr	r3, [pc, #136]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f2:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <MX_USART3_UART_Init+0x94>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009f6:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b1d      	ldr	r3, [pc, #116]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a34:	4811      	ldr	r0, [pc, #68]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a36:	f007 fe94 	bl	8008762 <HAL_UART_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f964 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a44:	2100      	movs	r1, #0
 8000a46:	480d      	ldr	r0, [pc, #52]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a48:	f009 f912 	bl	8009c70 <HAL_UARTEx_SetTxFifoThreshold>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a52:	f000 f95b 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a5a:	f009 f947 	bl	8009cec <HAL_UARTEx_SetRxFifoThreshold>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a64:	f000 f952 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	; (8000a7c <MX_USART3_UART_Init+0x90>)
 8000a6a:	f009 f8c8 	bl	8009bfe <HAL_UARTEx_DisableFifoMode>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a74:	f000 f94a 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	240004a4 	.word	0x240004a4
 8000a80:	40004800 	.word	0x40004800

08000a84 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a90:	2209      	movs	r2, #9
 8000a92:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a96:	2202      	movs	r2, #2
 8000a98:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000acc:	f004 fa04 	bl	8004ed8 <HAL_PCD_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ad6:	f000 f919 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	24000534 	.word	0x24000534
 8000ae4:	40080000 	.word	0x40080000

08000ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_DMA_Init+0x3c>)
 8000af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af4:	4a0b      	ldr	r2, [pc, #44]	; (8000b24 <MX_DMA_Init+0x3c>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_DMA_Init+0x3c>)
 8000b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2100      	movs	r1, #0
 8000b10:	200b      	movs	r0, #11
 8000b12:	f000 ff24 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b16:	200b      	movs	r0, #11
 8000b18:	f000 ff3b 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8000b1c:	bf00      	nop
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	58024400 	.word	0x58024400

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08c      	sub	sp, #48	; 0x30
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	4b6d      	ldr	r3, [pc, #436]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b44:	4a6b      	ldr	r2, [pc, #428]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b46:	f043 0304 	orr.w	r3, r3, #4
 8000b4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b4e:	4b69      	ldr	r3, [pc, #420]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5c:	4b65      	ldr	r3, [pc, #404]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b62:	4a64      	ldr	r2, [pc, #400]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b6c:	4b61      	ldr	r3, [pc, #388]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b5e      	ldr	r3, [pc, #376]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	4a5c      	ldr	r2, [pc, #368]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8a:	4b5a      	ldr	r3, [pc, #360]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	4b56      	ldr	r3, [pc, #344]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000ba0:	f043 0302 	orr.w	r3, r3, #2
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba8:	4b52      	ldr	r3, [pc, #328]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bb6:	4b4f      	ldr	r3, [pc, #316]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc6:	4b4b      	ldr	r3, [pc, #300]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	4b47      	ldr	r3, [pc, #284]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	4a46      	ldr	r2, [pc, #280]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be4:	4b43      	ldr	r3, [pc, #268]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf2:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf8:	4a3e      	ldr	r2, [pc, #248]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c02:	4b3c      	ldr	r3, [pc, #240]	; (8000cf4 <MX_GPIO_Init+0x1cc>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c16:	4838      	ldr	r0, [pc, #224]	; (8000cf8 <MX_GPIO_Init+0x1d0>)
 8000c18:	f004 f920 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	4836      	ldr	r0, [pc, #216]	; (8000cfc <MX_GPIO_Init+0x1d4>)
 8000c24:	f004 f91a 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2102      	movs	r1, #2
 8000c2c:	4834      	ldr	r0, [pc, #208]	; (8000d00 <MX_GPIO_Init+0x1d8>)
 8000c2e:	f004 f915 	bl	8004e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	482f      	ldr	r0, [pc, #188]	; (8000d04 <MX_GPIO_Init+0x1dc>)
 8000c48:	f003 ff58 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c4c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4824      	ldr	r0, [pc, #144]	; (8000cf8 <MX_GPIO_Init+0x1d0>)
 8000c66:	f003 ff49 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pins : ChB_Pin ChA_Pin */
  GPIO_InitStruct.Pin = ChB_Pin|ChA_Pin;
 8000c6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c70:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	481f      	ldr	r0, [pc, #124]	; (8000d00 <MX_GPIO_Init+0x1d8>)
 8000c82:	f003 ff3b 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4817      	ldr	r0, [pc, #92]	; (8000cfc <MX_GPIO_Init+0x1d4>)
 8000ca0:	f003 ff2c 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000ca4:	2380      	movs	r3, #128	; 0x80
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 031c 	add.w	r3, r7, #28
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_GPIO_Init+0x1e0>)
 8000cba:	f003 ff1f 	bl	8004afc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 031c 	add.w	r3, r7, #28
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <MX_GPIO_Init+0x1d8>)
 8000cd6:	f003 ff11 	bl	8004afc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2100      	movs	r1, #0
 8000cde:	2028      	movs	r0, #40	; 0x28
 8000ce0:	f000 fe3d 	bl	800195e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce4:	2028      	movs	r0, #40	; 0x28
 8000ce6:	f000 fe54 	bl	8001992 <HAL_NVIC_EnableIRQ>

}
 8000cea:	bf00      	nop
 8000cec:	3730      	adds	r7, #48	; 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	58024400 	.word	0x58024400
 8000cf8:	58020400 	.word	0x58020400
 8000cfc:	58020c00 	.word	0x58020c00
 8000d00:	58021000 	.word	0x58021000
 8000d04:	58020800 	.word	0x58020800
 8000d08:	58021800 	.word	0x58021800

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_MspInit+0x54>)
 8000d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <HAL_MspInit+0x54>)
 8000d26:	f043 0302 	orr.w	r3, r3, #2
 8000d2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <HAL_MspInit+0x54>)
 8000d30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000d3c:	2004      	movs	r0, #4
 8000d3e:	f000 fe03 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2005      	movs	r0, #5
 8000d48:	f000 fe09 	bl	800195e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	f000 fe20 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2005      	movs	r0, #5
 8000d58:	f000 fe01 	bl	800195e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d5c:	2005      	movs	r0, #5
 8000d5e:	f000 fe18 	bl	8001992 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	58024400 	.word	0x58024400

08000d70 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	; 0x38
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <HAL_ETH_MspInit+0x194>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f040 80b3 	bne.w	8000efa <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d94:	4b5c      	ldr	r3, [pc, #368]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000d96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9a:	4a5b      	ldr	r2, [pc, #364]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000d9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dae:	623b      	str	r3, [r7, #32]
 8000db0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000db2:	4b55      	ldr	r3, [pc, #340]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000db8:	4a53      	ldr	r2, [pc, #332]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000dba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dc2:	4b51      	ldr	r3, [pc, #324]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd0:	4b4d      	ldr	r3, [pc, #308]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dd6:	4a4c      	ldr	r2, [pc, #304]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de0:	4b49      	ldr	r3, [pc, #292]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000de2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a44      	ldr	r2, [pc, #272]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b42      	ldr	r3, [pc, #264]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b3e      	ldr	r3, [pc, #248]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a3d      	ldr	r2, [pc, #244]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
 8000e28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a35      	ldr	r2, [pc, #212]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <HAL_ETH_MspInit+0x198>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e66:	2332      	movs	r3, #50	; 0x32
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e76:	230b      	movs	r3, #11
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4822      	ldr	r0, [pc, #136]	; (8000f0c <HAL_ETH_MspInit+0x19c>)
 8000e82:	f003 fe3b 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e86:	2386      	movs	r3, #134	; 0x86
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e96:	230b      	movs	r3, #11
 8000e98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	481b      	ldr	r0, [pc, #108]	; (8000f10 <HAL_ETH_MspInit+0x1a0>)
 8000ea2:	f003 fe2b 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb8:	230b      	movs	r3, #11
 8000eba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <HAL_ETH_MspInit+0x1a4>)
 8000ec4:	f003 fe1a 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ec8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <HAL_ETH_MspInit+0x1a8>)
 8000ee6:	f003 fe09 	bl	8004afc <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	203d      	movs	r0, #61	; 0x3d
 8000ef0:	f000 fd35 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000ef4:	203d      	movs	r0, #61	; 0x3d
 8000ef6:	f000 fd4c 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3738      	adds	r7, #56	; 0x38
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40028000 	.word	0x40028000
 8000f08:	58024400 	.word	0x58024400
 8000f0c:	58020800 	.word	0x58020800
 8000f10:	58020000 	.word	0x58020000
 8000f14:	58020400 	.word	0x58020400
 8000f18:	58021800 	.word	0x58021800

08000f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b0b8      	sub	sp, #224	; 0xe0
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]
 8000f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	22bc      	movs	r2, #188	; 0xbc
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f009 fa95 	bl	800a46c <memset>
  if(hspi->Instance==SPI1)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a46      	ldr	r2, [pc, #280]	; (8001060 <HAL_SPI_MspInit+0x144>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	f040 8084 	bne.w	8001056 <HAL_SPI_MspInit+0x13a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f52:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000f54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f58:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f5a:	f107 0310 	add.w	r3, r7, #16
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f005 f906 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 8000f6a:	f7ff fecf 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	; (8001064 <HAL_SPI_MspInit+0x148>)
 8000f70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f74:	4a3b      	ldr	r2, [pc, #236]	; (8001064 <HAL_SPI_MspInit+0x148>)
 8000f76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f7e:	4b39      	ldr	r3, [pc, #228]	; (8001064 <HAL_SPI_MspInit+0x148>)
 8000f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b35      	ldr	r3, [pc, #212]	; (8001064 <HAL_SPI_MspInit+0x148>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a34      	ldr	r2, [pc, #208]	; (8001064 <HAL_SPI_MspInit+0x148>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b31      	ldr	r3, [pc, #196]	; (8001064 <HAL_SPI_MspInit+0x148>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000faa:	2360      	movs	r3, #96	; 0x60
 8000fac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fc2:	2305      	movs	r3, #5
 8000fc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4826      	ldr	r0, [pc, #152]	; (8001068 <HAL_SPI_MspInit+0x14c>)
 8000fd0:	f003 fd94 	bl	8004afc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000fd4:	4b25      	ldr	r3, [pc, #148]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000fd6:	4a26      	ldr	r2, [pc, #152]	; (8001070 <HAL_SPI_MspInit+0x154>)
 8000fd8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000fda:	4b24      	ldr	r3, [pc, #144]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000fdc:	2225      	movs	r2, #37	; 0x25
 8000fde:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe0:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe6:	4b21      	ldr	r3, [pc, #132]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fec:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff2:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000ff6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ffa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_SPI_MspInit+0x150>)
 8000ffe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001002:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_SPI_MspInit+0x150>)
 8001006:	2200      	movs	r2, #0
 8001008:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_SPI_MspInit+0x150>)
 800100c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001010:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <HAL_SPI_MspInit+0x150>)
 8001014:	2204      	movs	r2, #4
 8001016:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <HAL_SPI_MspInit+0x150>)
 800101a:	2203      	movs	r2, #3
 800101c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_SPI_MspInit+0x150>)
 8001020:	2200      	movs	r2, #0
 8001022:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_SPI_MspInit+0x150>)
 8001026:	2200      	movs	r2, #0
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <HAL_SPI_MspInit+0x150>)
 800102c:	f000 fccc 	bl	80019c8 <HAL_DMA_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8001036:	f7ff fe69 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_SPI_MspInit+0x150>)
 800103e:	67da      	str	r2, [r3, #124]	; 0x7c
 8001040:	4a0a      	ldr	r2, [pc, #40]	; (800106c <HAL_SPI_MspInit+0x150>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2100      	movs	r1, #0
 800104a:	2023      	movs	r0, #35	; 0x23
 800104c:	f000 fc87 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001050:	2023      	movs	r0, #35	; 0x23
 8001052:	f000 fc9e 	bl	8001992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	37e0      	adds	r7, #224	; 0xe0
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40013000 	.word	0x40013000
 8001064:	58024400 	.word	0x58024400
 8001068:	58020000 	.word	0x58020000
 800106c:	2400042c 	.word	0x2400042c
 8001070:	40020010 	.word	0x40020010

08001074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b0b8      	sub	sp, #224	; 0xe0
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	22bc      	movs	r2, #188	; 0xbc
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f009 f9e9 	bl	800a46c <memset>
  if(huart->Instance==USART3)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <HAL_UART_MspInit+0xc0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d142      	bne.n	800112a <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010a4:	2302      	movs	r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4618      	mov	r0, r3
 80010b4:	f005 f85c 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010be:	f7ff fe25 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	4a14      	ldr	r2, [pc, #80]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010e8:	f043 0308 	orr.w	r3, r3, #8
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0xc4>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	f003 0308 	and.w	r3, r3, #8
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001102:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800111e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001122:	4619      	mov	r1, r3
 8001124:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_UART_MspInit+0xc8>)
 8001126:	f003 fce9 	bl	8004afc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	37e0      	adds	r7, #224	; 0xe0
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40004800 	.word	0x40004800
 8001138:	58024400 	.word	0x58024400
 800113c:	58020c00 	.word	0x58020c00

08001140 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b0b8      	sub	sp, #224	; 0xe0
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	22bc      	movs	r2, #188	; 0xbc
 800115e:	2100      	movs	r1, #0
 8001160:	4618      	mov	r0, r3
 8001162:	f009 f983 	bl	800a46c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a2f      	ldr	r2, [pc, #188]	; (8001228 <HAL_PCD_MspInit+0xe8>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d156      	bne.n	800121e <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001170:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001174:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001176:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800117a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800117e:	f107 0310 	add.w	r3, r7, #16
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fff4 	bl	8006170 <HAL_RCCEx_PeriphCLKConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 800118e:	f7ff fdbd 	bl	8000d0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001192:	f004 f823 	bl	80051dc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b25      	ldr	r3, [pc, #148]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119c:	4a23      	ldr	r2, [pc, #140]	; (800122c <HAL_PCD_MspInit+0xec>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_PCD_MspInit+0xec>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011b4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011ce:	230a      	movs	r3, #10
 80011d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011d8:	4619      	mov	r1, r3
 80011da:	4815      	ldr	r0, [pc, #84]	; (8001230 <HAL_PCD_MspInit+0xf0>)
 80011dc:	f003 fc8e 	bl	8004afc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011f8:	4619      	mov	r1, r3
 80011fa:	480d      	ldr	r0, [pc, #52]	; (8001230 <HAL_PCD_MspInit+0xf0>)
 80011fc:	f003 fc7e 	bl	8004afc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001206:	4a09      	ldr	r2, [pc, #36]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001208:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800120c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_PCD_MspInit+0xec>)
 8001212:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001216:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800121e:	bf00      	nop
 8001220:	37e0      	adds	r7, #224	; 0xe0
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40080000 	.word	0x40080000
 800122c:	58024400 	.word	0x58024400
 8001230:	58020000 	.word	0x58020000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 fa2e 	bl	80016e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}

08001288 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA1_Stream0_IRQHandler+0x10>)
 800129e:	f001 fb9f 	bl	80029e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2400042c 	.word	0x2400042c

080012ac <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <SPI1_IRQHandler+0x10>)
 80012b2:	f006 fefd 	bl	80080b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	240003a4 	.word	0x240003a4

080012c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ChA_Pin)){
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d004      	beq.n	80012de <EXTI15_10_IRQHandler+0x1e>
		enc_ctr += 1;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <EXTI15_10_IRQHandler+0x34>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <EXTI15_10_IRQHandler+0x34>)
 80012dc:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ChB_Pin);
 80012de:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012e2:	f003 fdd4 	bl	8004e8e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ChA_Pin);
 80012e6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012ea:	f003 fdd0 	bl	8004e8e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24000a40 	.word	0x24000a40

080012f8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <ETH_IRQHandler+0x10>)
 80012fe:	f002 ff73 	bl	80041e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	240002f4 	.word	0x240002f4

0800130c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
	return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <_kill>:

int _kill(int pid, int sig)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001326:	f009 f877 	bl	800a418 <__errno>
 800132a:	4603      	mov	r3, r0
 800132c:	2216      	movs	r2, #22
 800132e:	601a      	str	r2, [r3, #0]
	return -1;
 8001330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <_exit>:

void _exit (int status)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001344:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ffe7 	bl	800131c <_kill>
	while (1) {}		/* Make sure we hang here */
 800134e:	e7fe      	b.n	800134e <_exit+0x12>

08001350 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	e00a      	b.n	8001378 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001362:	f3af 8000 	nop.w
 8001366:	4601      	mov	r1, r0
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	60ba      	str	r2, [r7, #8]
 800136e:	b2ca      	uxtb	r2, r1
 8001370:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	3301      	adds	r3, #1
 8001376:	617b      	str	r3, [r7, #20]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbf0      	blt.n	8001362 <_read+0x12>
	}

return len;
 8001380:	687b      	ldr	r3, [r7, #4]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	60f8      	str	r0, [r7, #12]
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	e009      	b.n	80013b0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1c5a      	adds	r2, r3, #1
 80013a0:	60ba      	str	r2, [r7, #8]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	dbf1      	blt.n	800139c <_write+0x12>
	}
	return len;
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <_close>:

int _close(int file)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
	return -1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ea:	605a      	str	r2, [r3, #4]
	return 0;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_isatty>:

int _isatty(int file)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	return 1;
 8001402:	2301      	movs	r3, #1
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
	return 0;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <_sbrk+0x5c>)
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <_sbrk+0x60>)
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d102      	bne.n	800144e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <_sbrk+0x64>)
 800144a:	4a12      	ldr	r2, [pc, #72]	; (8001494 <_sbrk+0x68>)
 800144c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <_sbrk+0x64>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4413      	add	r3, r2
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	429a      	cmp	r2, r3
 800145a:	d207      	bcs.n	800146c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800145c:	f008 ffdc 	bl	800a418 <__errno>
 8001460:	4603      	mov	r3, r0
 8001462:	220c      	movs	r2, #12
 8001464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146a:	e009      	b.n	8001480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001472:	4b07      	ldr	r3, [pc, #28]	; (8001490 <_sbrk+0x64>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4413      	add	r3, r2
 800147a:	4a05      	ldr	r2, [pc, #20]	; (8001490 <_sbrk+0x64>)
 800147c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800147e:	68fb      	ldr	r3, [r7, #12]
}
 8001480:	4618      	mov	r0, r3
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	24080000 	.word	0x24080000
 800148c:	00000400 	.word	0x00000400
 8001490:	24000ab0 	.word	0x24000ab0
 8001494:	24000ac8 	.word	0x24000ac8

08001498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <SystemInit+0xe4>)
 800149e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014a2:	4a36      	ldr	r2, [pc, #216]	; (800157c <SystemInit+0xe4>)
 80014a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <SystemInit+0xe8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	2b06      	cmp	r3, #6
 80014b6:	d807      	bhi.n	80014c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <SystemInit+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f023 030f 	bic.w	r3, r3, #15
 80014c0:	4a2f      	ldr	r2, [pc, #188]	; (8001580 <SystemInit+0xe8>)
 80014c2:	f043 0307 	orr.w	r3, r3, #7
 80014c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80014c8:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <SystemInit+0xec>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <SystemInit+0xec>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <SystemInit+0xec>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80014da:	4b2a      	ldr	r3, [pc, #168]	; (8001584 <SystemInit+0xec>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4929      	ldr	r1, [pc, #164]	; (8001584 <SystemInit+0xec>)
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <SystemInit+0xf0>)
 80014e2:	4013      	ands	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e6:	4b26      	ldr	r3, [pc, #152]	; (8001580 <SystemInit+0xe8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0308 	and.w	r3, r3, #8
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f2:	4b23      	ldr	r3, [pc, #140]	; (8001580 <SystemInit+0xe8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 030f 	bic.w	r3, r3, #15
 80014fa:	4a21      	ldr	r2, [pc, #132]	; (8001580 <SystemInit+0xe8>)
 80014fc:	f043 0307 	orr.w	r3, r3, #7
 8001500:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <SystemInit+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <SystemInit+0xec>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <SystemInit+0xec>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001514:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <SystemInit+0xec>)
 8001516:	4a1d      	ldr	r2, [pc, #116]	; (800158c <SystemInit+0xf4>)
 8001518:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <SystemInit+0xec>)
 800151c:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <SystemInit+0xf8>)
 800151e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001520:	4b18      	ldr	r3, [pc, #96]	; (8001584 <SystemInit+0xec>)
 8001522:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <SystemInit+0xfc>)
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <SystemInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <SystemInit+0xec>)
 800152e:	4a19      	ldr	r2, [pc, #100]	; (8001594 <SystemInit+0xfc>)
 8001530:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001532:	4b14      	ldr	r3, [pc, #80]	; (8001584 <SystemInit+0xec>)
 8001534:	2200      	movs	r2, #0
 8001536:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <SystemInit+0xec>)
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <SystemInit+0xfc>)
 800153c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <SystemInit+0xec>)
 8001540:	2200      	movs	r2, #0
 8001542:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <SystemInit+0xec>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <SystemInit+0xec>)
 800154a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <SystemInit+0xec>)
 8001552:	2200      	movs	r2, #0
 8001554:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <SystemInit+0x100>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <SystemInit+0x104>)
 800155c:	4013      	ands	r3, r2
 800155e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001562:	d202      	bcs.n	800156a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <SystemInit+0x108>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <SystemInit+0x10c>)
 800156c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001570:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00
 8001580:	52002000 	.word	0x52002000
 8001584:	58024400 	.word	0x58024400
 8001588:	eaf6ed7f 	.word	0xeaf6ed7f
 800158c:	02020200 	.word	0x02020200
 8001590:	01ff0000 	.word	0x01ff0000
 8001594:	01010280 	.word	0x01010280
 8001598:	5c001000 	.word	0x5c001000
 800159c:	ffff0000 	.word	0xffff0000
 80015a0:	51008108 	.word	0x51008108
 80015a4:	52004000 	.word	0x52004000

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ac:	f7ff ff74 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015b2:	490d      	ldr	r1, [pc, #52]	; (80015e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b4:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b8:	e002      	b.n	80015c0 <LoopCopyDataInit>

080015ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015be:	3304      	adds	r3, #4

080015c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c4:	d3f9      	bcc.n	80015ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c6:	4a0a      	ldr	r2, [pc, #40]	; (80015f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c8:	4c0a      	ldr	r4, [pc, #40]	; (80015f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015cc:	e001      	b.n	80015d2 <LoopFillZerobss>

080015ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d0:	3204      	adds	r2, #4

080015d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d4:	d3fb      	bcc.n	80015ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015d6:	f008 ff25 	bl	800a424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff f879 	bl	80006d0 <main>
  bx  lr
 80015de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015e8:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80015ec:	0800d55c 	.word	0x0800d55c
  ldr r2, =_sbss
 80015f0:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 80015f4:	24000ac8 	.word	0x24000ac8

080015f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC3_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001602:	2003      	movs	r0, #3
 8001604:	f000 f9a0 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001608:	f004 fbdc 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 800160c:	4602      	mov	r2, r0
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_Init+0x68>)
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	f003 030f 	and.w	r3, r3, #15
 8001618:	4913      	ldr	r1, [pc, #76]	; (8001668 <HAL_Init+0x6c>)
 800161a:	5ccb      	ldrb	r3, [r1, r3]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	fa22 f303 	lsr.w	r3, r2, r3
 8001624:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_Init+0x68>)
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a0e      	ldr	r2, [pc, #56]	; (8001668 <HAL_Init+0x6c>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	f003 031f 	and.w	r3, r3, #31
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	fa22 f303 	lsr.w	r3, r2, r3
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <HAL_Init+0x70>)
 800163e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001640:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <HAL_Init+0x74>)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001646:	2000      	movs	r0, #0
 8001648:	f000 f814 	bl	8001674 <HAL_InitTick>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e002      	b.n	800165c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001656:	f7ff fb5f 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	58024400 	.word	0x58024400
 8001668:	0800d130 	.word	0x0800d130
 800166c:	24000004 	.word	0x24000004
 8001670:	24000000 	.word	0x24000000

08001674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_InitTick+0x60>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e021      	b.n	80016cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_InitTick+0x64>)
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_InitTick+0x60>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4619      	mov	r1, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001696:	fbb3 f3f1 	udiv	r3, r3, r1
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 f985 	bl	80019ae <HAL_SYSTICK_Config>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00e      	b.n	80016cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b0f      	cmp	r3, #15
 80016b2:	d80a      	bhi.n	80016ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b4:	2200      	movs	r2, #0
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016bc:	f000 f94f 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c0:	4a06      	ldr	r2, [pc, #24]	; (80016dc <HAL_InitTick+0x68>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e000      	b.n	80016cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2400000c 	.word	0x2400000c
 80016d8:	24000000 	.word	0x24000000
 80016dc:	24000008 	.word	0x24000008

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	; (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2400000c 	.word	0x2400000c
 8001704:	24000ab4 	.word	0x24000ab4

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	24000ab4 	.word	0x24000ab4

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	2400000c 	.word	0x2400000c

08001768 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800176c:	4b03      	ldr	r3, [pc, #12]	; (800177c <HAL_GetREVID+0x14>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	0c1b      	lsrs	r3, r3, #16
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	5c001000 	.word	0x5c001000

08001780 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	58000400 	.word	0x58000400

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	05fa0000 	.word	0x05fa0000

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	; (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	; (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	; 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	; 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	; (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff40 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff33 	bl	800180c <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa4 	bl	8001904 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fe9a 	bl	8001708 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e316      	b.n	800200e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a66      	ldr	r2, [pc, #408]	; (8001b80 <HAL_DMA_Init+0x1b8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d04a      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_DMA_Init+0x1bc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d045      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_DMA_Init+0x1c0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d040      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a62      	ldr	r2, [pc, #392]	; (8001b8c <HAL_DMA_Init+0x1c4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d03b      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a60      	ldr	r2, [pc, #384]	; (8001b90 <HAL_DMA_Init+0x1c8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d036      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5f      	ldr	r2, [pc, #380]	; (8001b94 <HAL_DMA_Init+0x1cc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d031      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a5d      	ldr	r2, [pc, #372]	; (8001b98 <HAL_DMA_Init+0x1d0>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02c      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a5c      	ldr	r2, [pc, #368]	; (8001b9c <HAL_DMA_Init+0x1d4>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d027      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a5a      	ldr	r2, [pc, #360]	; (8001ba0 <HAL_DMA_Init+0x1d8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d022      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a59      	ldr	r2, [pc, #356]	; (8001ba4 <HAL_DMA_Init+0x1dc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d01d      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a57      	ldr	r2, [pc, #348]	; (8001ba8 <HAL_DMA_Init+0x1e0>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d018      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a56      	ldr	r2, [pc, #344]	; (8001bac <HAL_DMA_Init+0x1e4>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d013      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a54      	ldr	r2, [pc, #336]	; (8001bb0 <HAL_DMA_Init+0x1e8>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00e      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a53      	ldr	r2, [pc, #332]	; (8001bb4 <HAL_DMA_Init+0x1ec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d009      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a51      	ldr	r2, [pc, #324]	; (8001bb8 <HAL_DMA_Init+0x1f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d004      	beq.n	8001a80 <HAL_DMA_Init+0xb8>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_DMA_Init+0x1f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_DMA_Init+0xbc>
 8001a80:	2301      	movs	r3, #1
 8001a82:	e000      	b.n	8001a86 <HAL_DMA_Init+0xbe>
 8001a84:	2300      	movs	r3, #0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 813b 	beq.w	8001d02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a37      	ldr	r2, [pc, #220]	; (8001b80 <HAL_DMA_Init+0x1b8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d04a      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <HAL_DMA_Init+0x1bc>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d045      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a34      	ldr	r2, [pc, #208]	; (8001b88 <HAL_DMA_Init+0x1c0>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d040      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a33      	ldr	r2, [pc, #204]	; (8001b8c <HAL_DMA_Init+0x1c4>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d03b      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a31      	ldr	r2, [pc, #196]	; (8001b90 <HAL_DMA_Init+0x1c8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d036      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <HAL_DMA_Init+0x1cc>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d031      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a2e      	ldr	r2, [pc, #184]	; (8001b98 <HAL_DMA_Init+0x1d0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02c      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2d      	ldr	r2, [pc, #180]	; (8001b9c <HAL_DMA_Init+0x1d4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d027      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a2b      	ldr	r2, [pc, #172]	; (8001ba0 <HAL_DMA_Init+0x1d8>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d022      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a2a      	ldr	r2, [pc, #168]	; (8001ba4 <HAL_DMA_Init+0x1dc>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d01d      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <HAL_DMA_Init+0x1e0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d018      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a27      	ldr	r2, [pc, #156]	; (8001bac <HAL_DMA_Init+0x1e4>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d013      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_DMA_Init+0x1e8>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00e      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a24      	ldr	r2, [pc, #144]	; (8001bb4 <HAL_DMA_Init+0x1ec>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d009      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a22      	ldr	r2, [pc, #136]	; (8001bb8 <HAL_DMA_Init+0x1f0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_DMA_Init+0x174>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a21      	ldr	r2, [pc, #132]	; (8001bbc <HAL_DMA_Init+0x1f4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d108      	bne.n	8001b4e <HAL_DMA_Init+0x186>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0201 	bic.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e007      	b.n	8001b5e <HAL_DMA_Init+0x196>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0201 	bic.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001b5e:	e02f      	b.n	8001bc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b60:	f7ff fdd2 	bl	8001708 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b05      	cmp	r3, #5
 8001b6c:	d928      	bls.n	8001bc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2220      	movs	r2, #32
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2203      	movs	r2, #3
 8001b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e246      	b.n	800200e <HAL_DMA_Init+0x646>
 8001b80:	40020010 	.word	0x40020010
 8001b84:	40020028 	.word	0x40020028
 8001b88:	40020040 	.word	0x40020040
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	40020070 	.word	0x40020070
 8001b94:	40020088 	.word	0x40020088
 8001b98:	400200a0 	.word	0x400200a0
 8001b9c:	400200b8 	.word	0x400200b8
 8001ba0:	40020410 	.word	0x40020410
 8001ba4:	40020428 	.word	0x40020428
 8001ba8:	40020440 	.word	0x40020440
 8001bac:	40020458 	.word	0x40020458
 8001bb0:	40020470 	.word	0x40020470
 8001bb4:	40020488 	.word	0x40020488
 8001bb8:	400204a0 	.word	0x400204a0
 8001bbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1c8      	bne.n	8001b60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	4b83      	ldr	r3, [pc, #524]	; (8001de8 <HAL_DMA_Init+0x420>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001be6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001c24:	4b71      	ldr	r3, [pc, #452]	; (8001dec <HAL_DMA_Init+0x424>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b71      	ldr	r3, [pc, #452]	; (8001df0 <HAL_DMA_Init+0x428>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c30:	d328      	bcc.n	8001c84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b28      	cmp	r3, #40	; 0x28
 8001c38:	d903      	bls.n	8001c42 <HAL_DMA_Init+0x27a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c40:	d917      	bls.n	8001c72 <HAL_DMA_Init+0x2aa>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b3e      	cmp	r3, #62	; 0x3e
 8001c48:	d903      	bls.n	8001c52 <HAL_DMA_Init+0x28a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b42      	cmp	r3, #66	; 0x42
 8001c50:	d90f      	bls.n	8001c72 <HAL_DMA_Init+0x2aa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b46      	cmp	r3, #70	; 0x46
 8001c58:	d903      	bls.n	8001c62 <HAL_DMA_Init+0x29a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b48      	cmp	r3, #72	; 0x48
 8001c60:	d907      	bls.n	8001c72 <HAL_DMA_Init+0x2aa>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b4e      	cmp	r3, #78	; 0x4e
 8001c68:	d905      	bls.n	8001c76 <HAL_DMA_Init+0x2ae>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b52      	cmp	r3, #82	; 0x52
 8001c70:	d801      	bhi.n	8001c76 <HAL_DMA_Init+0x2ae>
 8001c72:	2301      	movs	r3, #1
 8001c74:	e000      	b.n	8001c78 <HAL_DMA_Init+0x2b0>
 8001c76:	2300      	movs	r3, #0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f023 0307 	bic.w	r3, r3, #7
 8001c9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d117      	bne.n	8001cde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f002 f821 	bl	8003d08 <DMA_CheckFifoParam>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2240      	movs	r2, #64	; 0x40
 8001cd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e197      	b.n	800200e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f001 ff5c 	bl	8003ba4 <DMA_CalcBaseAndBitshift>
 8001cec:	4603      	mov	r3, r0
 8001cee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	223f      	movs	r2, #63	; 0x3f
 8001cfa:	409a      	lsls	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	e0cd      	b.n	8001e9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a3b      	ldr	r2, [pc, #236]	; (8001df4 <HAL_DMA_Init+0x42c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d022      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a39      	ldr	r2, [pc, #228]	; (8001df8 <HAL_DMA_Init+0x430>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01d      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a38      	ldr	r2, [pc, #224]	; (8001dfc <HAL_DMA_Init+0x434>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d018      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <HAL_DMA_Init+0x438>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <HAL_DMA_Init+0x43c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d00e      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a33      	ldr	r2, [pc, #204]	; (8001e08 <HAL_DMA_Init+0x440>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d009      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a32      	ldr	r2, [pc, #200]	; (8001e0c <HAL_DMA_Init+0x444>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d004      	beq.n	8001d52 <HAL_DMA_Init+0x38a>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <HAL_DMA_Init+0x448>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_DMA_Init+0x38e>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_DMA_Init+0x390>
 8001d56:	2300      	movs	r3, #0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8097 	beq.w	8001e8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_DMA_Init+0x42c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d021      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a22      	ldr	r2, [pc, #136]	; (8001df8 <HAL_DMA_Init+0x430>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01c      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a21      	ldr	r2, [pc, #132]	; (8001dfc <HAL_DMA_Init+0x434>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d017      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_DMA_Init+0x438>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d012      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_DMA_Init+0x43c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d00d      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <HAL_DMA_Init+0x440>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d008      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_DMA_Init+0x444>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d003      	beq.n	8001dac <HAL_DMA_Init+0x3e4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a19      	ldr	r2, [pc, #100]	; (8001e10 <HAL_DMA_Init+0x448>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2202      	movs	r2, #2
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_DMA_Init+0x44c>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b40      	cmp	r3, #64	; 0x40
 8001dd4:	d020      	beq.n	8001e18 <HAL_DMA_Init+0x450>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b80      	cmp	r3, #128	; 0x80
 8001ddc:	d102      	bne.n	8001de4 <HAL_DMA_Init+0x41c>
 8001dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001de2:	e01a      	b.n	8001e1a <HAL_DMA_Init+0x452>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e018      	b.n	8001e1a <HAL_DMA_Init+0x452>
 8001de8:	fe10803f 	.word	0xfe10803f
 8001dec:	5c001000 	.word	0x5c001000
 8001df0:	ffff0000 	.word	0xffff0000
 8001df4:	58025408 	.word	0x58025408
 8001df8:	5802541c 	.word	0x5802541c
 8001dfc:	58025430 	.word	0x58025430
 8001e00:	58025444 	.word	0x58025444
 8001e04:	58025458 	.word	0x58025458
 8001e08:	5802546c 	.word	0x5802546c
 8001e0c:	58025480 	.word	0x58025480
 8001e10:	58025494 	.word	0x58025494
 8001e14:	fffe000f 	.word	0xfffe000f
 8001e18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68d2      	ldr	r2, [r2, #12]
 8001e1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001e38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001e40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001e48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b6e      	ldr	r3, [pc, #440]	; (8002018 <HAL_DMA_Init+0x650>)
 8001e60:	4413      	add	r3, r2
 8001e62:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_DMA_Init+0x654>)
 8001e64:	fba2 2303 	umull	r2, r3, r2, r3
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	009a      	lsls	r2, r3, #2
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f001 fe97 	bl	8003ba4 <DMA_CalcBaseAndBitshift>
 8001e76:	4603      	mov	r3, r0
 8001e78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	2201      	movs	r2, #1
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	e008      	b.n	8001e9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2240      	movs	r2, #64	; 0x40
 8001e90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2203      	movs	r2, #3
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e0b7      	b.n	800200e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a5f      	ldr	r2, [pc, #380]	; (8002020 <HAL_DMA_Init+0x658>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d072      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a5d      	ldr	r2, [pc, #372]	; (8002024 <HAL_DMA_Init+0x65c>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d06d      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a5c      	ldr	r2, [pc, #368]	; (8002028 <HAL_DMA_Init+0x660>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d068      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5a      	ldr	r2, [pc, #360]	; (800202c <HAL_DMA_Init+0x664>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d063      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a59      	ldr	r2, [pc, #356]	; (8002030 <HAL_DMA_Init+0x668>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d05e      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a57      	ldr	r2, [pc, #348]	; (8002034 <HAL_DMA_Init+0x66c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d059      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a56      	ldr	r2, [pc, #344]	; (8002038 <HAL_DMA_Init+0x670>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d054      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a54      	ldr	r2, [pc, #336]	; (800203c <HAL_DMA_Init+0x674>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d04f      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a53      	ldr	r2, [pc, #332]	; (8002040 <HAL_DMA_Init+0x678>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d04a      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a51      	ldr	r2, [pc, #324]	; (8002044 <HAL_DMA_Init+0x67c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d045      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a50      	ldr	r2, [pc, #320]	; (8002048 <HAL_DMA_Init+0x680>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d040      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a4e      	ldr	r2, [pc, #312]	; (800204c <HAL_DMA_Init+0x684>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d03b      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a4d      	ldr	r2, [pc, #308]	; (8002050 <HAL_DMA_Init+0x688>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d036      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_DMA_Init+0x68c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d031      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_DMA_Init+0x690>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d02c      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a48      	ldr	r2, [pc, #288]	; (800205c <HAL_DMA_Init+0x694>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d027      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a47      	ldr	r2, [pc, #284]	; (8002060 <HAL_DMA_Init+0x698>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d022      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_DMA_Init+0x69c>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d01d      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <HAL_DMA_Init+0x6a0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d018      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a42      	ldr	r2, [pc, #264]	; (800206c <HAL_DMA_Init+0x6a4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d013      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a41      	ldr	r2, [pc, #260]	; (8002070 <HAL_DMA_Init+0x6a8>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d00e      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_DMA_Init+0x6ac>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d009      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3e      	ldr	r2, [pc, #248]	; (8002078 <HAL_DMA_Init+0x6b0>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d004      	beq.n	8001f8e <HAL_DMA_Init+0x5c6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a3c      	ldr	r2, [pc, #240]	; (800207c <HAL_DMA_Init+0x6b4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_DMA_Init+0x5ca>
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_DMA_Init+0x5cc>
 8001f92:	2300      	movs	r3, #0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d032      	beq.n	8001ffe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f001 ff31 	bl	8003e00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b80      	cmp	r3, #128	; 0x80
 8001fa4:	d102      	bne.n	8001fac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001fc0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d010      	beq.n	8001fec <HAL_DMA_Init+0x624>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d80c      	bhi.n	8001fec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f001 ffae 	bl	8003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	e008      	b.n	8001ffe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	a7fdabf8 	.word	0xa7fdabf8
 800201c:	cccccccd 	.word	0xcccccccd
 8002020:	40020010 	.word	0x40020010
 8002024:	40020028 	.word	0x40020028
 8002028:	40020040 	.word	0x40020040
 800202c:	40020058 	.word	0x40020058
 8002030:	40020070 	.word	0x40020070
 8002034:	40020088 	.word	0x40020088
 8002038:	400200a0 	.word	0x400200a0
 800203c:	400200b8 	.word	0x400200b8
 8002040:	40020410 	.word	0x40020410
 8002044:	40020428 	.word	0x40020428
 8002048:	40020440 	.word	0x40020440
 800204c:	40020458 	.word	0x40020458
 8002050:	40020470 	.word	0x40020470
 8002054:	40020488 	.word	0x40020488
 8002058:	400204a0 	.word	0x400204a0
 800205c:	400204b8 	.word	0x400204b8
 8002060:	58025408 	.word	0x58025408
 8002064:	5802541c 	.word	0x5802541c
 8002068:	58025430 	.word	0x58025430
 800206c:	58025444 	.word	0x58025444
 8002070:	58025458 	.word	0x58025458
 8002074:	5802546c 	.word	0x5802546c
 8002078:	58025480 	.word	0x58025480
 800207c:	58025494 	.word	0x58025494

08002080 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
 800208c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e226      	b.n	80024ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_DMA_Start_IT+0x2a>
 80020a6:	2302      	movs	r3, #2
 80020a8:	e21f      	b.n	80024ea <HAL_DMA_Start_IT+0x46a>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	f040 820a 	bne.w	80024d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2202      	movs	r2, #2
 80020c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a68      	ldr	r2, [pc, #416]	; (8002274 <HAL_DMA_Start_IT+0x1f4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d04a      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a66      	ldr	r2, [pc, #408]	; (8002278 <HAL_DMA_Start_IT+0x1f8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d045      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_DMA_Start_IT+0x1fc>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d040      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a63      	ldr	r2, [pc, #396]	; (8002280 <HAL_DMA_Start_IT+0x200>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d03b      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a62      	ldr	r2, [pc, #392]	; (8002284 <HAL_DMA_Start_IT+0x204>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d036      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a60      	ldr	r2, [pc, #384]	; (8002288 <HAL_DMA_Start_IT+0x208>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d031      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_DMA_Start_IT+0x20c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d02c      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5d      	ldr	r2, [pc, #372]	; (8002290 <HAL_DMA_Start_IT+0x210>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d027      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_DMA_Start_IT+0x214>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a5a      	ldr	r2, [pc, #360]	; (8002298 <HAL_DMA_Start_IT+0x218>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01d      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a59      	ldr	r2, [pc, #356]	; (800229c <HAL_DMA_Start_IT+0x21c>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d018      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_DMA_Start_IT+0x220>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d013      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_DMA_Start_IT+0x224>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00e      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a54      	ldr	r2, [pc, #336]	; (80022a8 <HAL_DMA_Start_IT+0x228>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d009      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a53      	ldr	r2, [pc, #332]	; (80022ac <HAL_DMA_Start_IT+0x22c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d004      	beq.n	800216e <HAL_DMA_Start_IT+0xee>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_DMA_Start_IT+0x230>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d108      	bne.n	8002180 <HAL_DMA_Start_IT+0x100>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e007      	b.n	8002190 <HAL_DMA_Start_IT+0x110>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0201 	bic.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f001 fb58 	bl	800384c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a34      	ldr	r2, [pc, #208]	; (8002274 <HAL_DMA_Start_IT+0x1f4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d04a      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <HAL_DMA_Start_IT+0x1f8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d045      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a31      	ldr	r2, [pc, #196]	; (800227c <HAL_DMA_Start_IT+0x1fc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d040      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a30      	ldr	r2, [pc, #192]	; (8002280 <HAL_DMA_Start_IT+0x200>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d03b      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2e      	ldr	r2, [pc, #184]	; (8002284 <HAL_DMA_Start_IT+0x204>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d036      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_DMA_Start_IT+0x208>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d031      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2b      	ldr	r2, [pc, #172]	; (800228c <HAL_DMA_Start_IT+0x20c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d02c      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <HAL_DMA_Start_IT+0x210>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d027      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a28      	ldr	r2, [pc, #160]	; (8002294 <HAL_DMA_Start_IT+0x214>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d022      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a27      	ldr	r2, [pc, #156]	; (8002298 <HAL_DMA_Start_IT+0x218>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d01d      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a25      	ldr	r2, [pc, #148]	; (800229c <HAL_DMA_Start_IT+0x21c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d018      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <HAL_DMA_Start_IT+0x220>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d013      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_DMA_Start_IT+0x224>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00e      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a21      	ldr	r2, [pc, #132]	; (80022a8 <HAL_DMA_Start_IT+0x228>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d009      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <HAL_DMA_Start_IT+0x22c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_DMA_Start_IT+0x1bc>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1e      	ldr	r2, [pc, #120]	; (80022b0 <HAL_DMA_Start_IT+0x230>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_DMA_Start_IT+0x1c0>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_DMA_Start_IT+0x1c2>
 8002240:	2300      	movs	r3, #0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d036      	beq.n	80022b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 021e 	bic.w	r2, r3, #30
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0216 	orr.w	r2, r2, #22
 8002258:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03e      	beq.n	80022e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f042 0208 	orr.w	r2, r2, #8
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	e035      	b.n	80022e0 <HAL_DMA_Start_IT+0x260>
 8002274:	40020010 	.word	0x40020010
 8002278:	40020028 	.word	0x40020028
 800227c:	40020040 	.word	0x40020040
 8002280:	40020058 	.word	0x40020058
 8002284:	40020070 	.word	0x40020070
 8002288:	40020088 	.word	0x40020088
 800228c:	400200a0 	.word	0x400200a0
 8002290:	400200b8 	.word	0x400200b8
 8002294:	40020410 	.word	0x40020410
 8002298:	40020428 	.word	0x40020428
 800229c:	40020440 	.word	0x40020440
 80022a0:	40020458 	.word	0x40020458
 80022a4:	40020470 	.word	0x40020470
 80022a8:	40020488 	.word	0x40020488
 80022ac:	400204a0 	.word	0x400204a0
 80022b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 020e 	bic.w	r2, r3, #14
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f042 020a 	orr.w	r2, r2, #10
 80022c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0204 	orr.w	r2, r2, #4
 80022de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a83      	ldr	r2, [pc, #524]	; (80024f4 <HAL_DMA_Start_IT+0x474>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d072      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a82      	ldr	r2, [pc, #520]	; (80024f8 <HAL_DMA_Start_IT+0x478>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d06d      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a80      	ldr	r2, [pc, #512]	; (80024fc <HAL_DMA_Start_IT+0x47c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d068      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7f      	ldr	r2, [pc, #508]	; (8002500 <HAL_DMA_Start_IT+0x480>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d063      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a7d      	ldr	r2, [pc, #500]	; (8002504 <HAL_DMA_Start_IT+0x484>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d05e      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7c      	ldr	r2, [pc, #496]	; (8002508 <HAL_DMA_Start_IT+0x488>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d059      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7a      	ldr	r2, [pc, #488]	; (800250c <HAL_DMA_Start_IT+0x48c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d054      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a79      	ldr	r2, [pc, #484]	; (8002510 <HAL_DMA_Start_IT+0x490>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d04f      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_DMA_Start_IT+0x494>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d04a      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a76      	ldr	r2, [pc, #472]	; (8002518 <HAL_DMA_Start_IT+0x498>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d045      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a74      	ldr	r2, [pc, #464]	; (800251c <HAL_DMA_Start_IT+0x49c>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d040      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a73      	ldr	r2, [pc, #460]	; (8002520 <HAL_DMA_Start_IT+0x4a0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d03b      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a71      	ldr	r2, [pc, #452]	; (8002524 <HAL_DMA_Start_IT+0x4a4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d036      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a70      	ldr	r2, [pc, #448]	; (8002528 <HAL_DMA_Start_IT+0x4a8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d031      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_DMA_Start_IT+0x4ac>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d02c      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6d      	ldr	r2, [pc, #436]	; (8002530 <HAL_DMA_Start_IT+0x4b0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d027      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6b      	ldr	r2, [pc, #428]	; (8002534 <HAL_DMA_Start_IT+0x4b4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d022      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6a      	ldr	r2, [pc, #424]	; (8002538 <HAL_DMA_Start_IT+0x4b8>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d01d      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a68      	ldr	r2, [pc, #416]	; (800253c <HAL_DMA_Start_IT+0x4bc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d018      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a67      	ldr	r2, [pc, #412]	; (8002540 <HAL_DMA_Start_IT+0x4c0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d013      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a65      	ldr	r2, [pc, #404]	; (8002544 <HAL_DMA_Start_IT+0x4c4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00e      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a64      	ldr	r2, [pc, #400]	; (8002548 <HAL_DMA_Start_IT+0x4c8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d009      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a62      	ldr	r2, [pc, #392]	; (800254c <HAL_DMA_Start_IT+0x4cc>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d004      	beq.n	80023d0 <HAL_DMA_Start_IT+0x350>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a61      	ldr	r2, [pc, #388]	; (8002550 <HAL_DMA_Start_IT+0x4d0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_DMA_Start_IT+0x354>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_DMA_Start_IT+0x356>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01a      	beq.n	8002410 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d007      	beq.n	8002410 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800240a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a37      	ldr	r2, [pc, #220]	; (80024f4 <HAL_DMA_Start_IT+0x474>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d04a      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a36      	ldr	r2, [pc, #216]	; (80024f8 <HAL_DMA_Start_IT+0x478>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d045      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a34      	ldr	r2, [pc, #208]	; (80024fc <HAL_DMA_Start_IT+0x47c>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d040      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a33      	ldr	r2, [pc, #204]	; (8002500 <HAL_DMA_Start_IT+0x480>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d03b      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a31      	ldr	r2, [pc, #196]	; (8002504 <HAL_DMA_Start_IT+0x484>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d036      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a30      	ldr	r2, [pc, #192]	; (8002508 <HAL_DMA_Start_IT+0x488>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d031      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a2e      	ldr	r2, [pc, #184]	; (800250c <HAL_DMA_Start_IT+0x48c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d02c      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a2d      	ldr	r2, [pc, #180]	; (8002510 <HAL_DMA_Start_IT+0x490>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d027      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a2b      	ldr	r2, [pc, #172]	; (8002514 <HAL_DMA_Start_IT+0x494>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d022      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a2a      	ldr	r2, [pc, #168]	; (8002518 <HAL_DMA_Start_IT+0x498>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d01d      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a28      	ldr	r2, [pc, #160]	; (800251c <HAL_DMA_Start_IT+0x49c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d018      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a27      	ldr	r2, [pc, #156]	; (8002520 <HAL_DMA_Start_IT+0x4a0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a25      	ldr	r2, [pc, #148]	; (8002524 <HAL_DMA_Start_IT+0x4a4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00e      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_DMA_Start_IT+0x4a8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a22      	ldr	r2, [pc, #136]	; (800252c <HAL_DMA_Start_IT+0x4ac>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d004      	beq.n	80024b0 <HAL_DMA_Start_IT+0x430>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <HAL_DMA_Start_IT+0x4b0>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d108      	bne.n	80024c2 <HAL_DMA_Start_IT+0x442>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e012      	b.n	80024e8 <HAL_DMA_Start_IT+0x468>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f042 0201 	orr.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e009      	b.n	80024e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40020010 	.word	0x40020010
 80024f8:	40020028 	.word	0x40020028
 80024fc:	40020040 	.word	0x40020040
 8002500:	40020058 	.word	0x40020058
 8002504:	40020070 	.word	0x40020070
 8002508:	40020088 	.word	0x40020088
 800250c:	400200a0 	.word	0x400200a0
 8002510:	400200b8 	.word	0x400200b8
 8002514:	40020410 	.word	0x40020410
 8002518:	40020428 	.word	0x40020428
 800251c:	40020440 	.word	0x40020440
 8002520:	40020458 	.word	0x40020458
 8002524:	40020470 	.word	0x40020470
 8002528:	40020488 	.word	0x40020488
 800252c:	400204a0 	.word	0x400204a0
 8002530:	400204b8 	.word	0x400204b8
 8002534:	58025408 	.word	0x58025408
 8002538:	5802541c 	.word	0x5802541c
 800253c:	58025430 	.word	0x58025430
 8002540:	58025444 	.word	0x58025444
 8002544:	58025458 	.word	0x58025458
 8002548:	5802546c 	.word	0x5802546c
 800254c:	58025480 	.word	0x58025480
 8002550:	58025494 	.word	0x58025494

08002554 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e237      	b.n	80029d6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d004      	beq.n	800257c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2280      	movs	r2, #128	; 0x80
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e22c      	b.n	80029d6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5c      	ldr	r2, [pc, #368]	; (80026f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d04a      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a5b      	ldr	r2, [pc, #364]	; (80026f8 <HAL_DMA_Abort_IT+0x1a4>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d045      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a59      	ldr	r2, [pc, #356]	; (80026fc <HAL_DMA_Abort_IT+0x1a8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d040      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_DMA_Abort_IT+0x1ac>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d03b      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a56      	ldr	r2, [pc, #344]	; (8002704 <HAL_DMA_Abort_IT+0x1b0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d036      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a55      	ldr	r2, [pc, #340]	; (8002708 <HAL_DMA_Abort_IT+0x1b4>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d031      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a53      	ldr	r2, [pc, #332]	; (800270c <HAL_DMA_Abort_IT+0x1b8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d02c      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_DMA_Abort_IT+0x1bc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d027      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a50      	ldr	r2, [pc, #320]	; (8002714 <HAL_DMA_Abort_IT+0x1c0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d022      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a4f      	ldr	r2, [pc, #316]	; (8002718 <HAL_DMA_Abort_IT+0x1c4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d01d      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_DMA_Abort_IT+0x1c8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d018      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a4c      	ldr	r2, [pc, #304]	; (8002720 <HAL_DMA_Abort_IT+0x1cc>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d013      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a4a      	ldr	r2, [pc, #296]	; (8002724 <HAL_DMA_Abort_IT+0x1d0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00e      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a49      	ldr	r2, [pc, #292]	; (8002728 <HAL_DMA_Abort_IT+0x1d4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d009      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a47      	ldr	r2, [pc, #284]	; (800272c <HAL_DMA_Abort_IT+0x1d8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_DMA_Abort_IT+0xc8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_DMA_Abort_IT+0x1dc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d101      	bne.n	8002620 <HAL_DMA_Abort_IT+0xcc>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_DMA_Abort_IT+0xce>
 8002620:	2300      	movs	r3, #0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8086 	beq.w	8002734 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2204      	movs	r2, #4
 800262c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2f      	ldr	r2, [pc, #188]	; (80026f4 <HAL_DMA_Abort_IT+0x1a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d04a      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2e      	ldr	r2, [pc, #184]	; (80026f8 <HAL_DMA_Abort_IT+0x1a4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d045      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a2c      	ldr	r2, [pc, #176]	; (80026fc <HAL_DMA_Abort_IT+0x1a8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d040      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2b      	ldr	r2, [pc, #172]	; (8002700 <HAL_DMA_Abort_IT+0x1ac>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d03b      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a29      	ldr	r2, [pc, #164]	; (8002704 <HAL_DMA_Abort_IT+0x1b0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d036      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a28      	ldr	r2, [pc, #160]	; (8002708 <HAL_DMA_Abort_IT+0x1b4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d031      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a26      	ldr	r2, [pc, #152]	; (800270c <HAL_DMA_Abort_IT+0x1b8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02c      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_DMA_Abort_IT+0x1bc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d027      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a23      	ldr	r2, [pc, #140]	; (8002714 <HAL_DMA_Abort_IT+0x1c0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d022      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_DMA_Abort_IT+0x1c4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d01d      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <HAL_DMA_Abort_IT+0x1c8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d018      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a1f      	ldr	r2, [pc, #124]	; (8002720 <HAL_DMA_Abort_IT+0x1cc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d013      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <HAL_DMA_Abort_IT+0x1d0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00e      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <HAL_DMA_Abort_IT+0x1d4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d009      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1a      	ldr	r2, [pc, #104]	; (800272c <HAL_DMA_Abort_IT+0x1d8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x17c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a19      	ldr	r2, [pc, #100]	; (8002730 <HAL_DMA_Abort_IT+0x1dc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d108      	bne.n	80026e2 <HAL_DMA_Abort_IT+0x18e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	e178      	b.n	80029d4 <HAL_DMA_Abort_IT+0x480>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0201 	bic.w	r2, r2, #1
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	e16f      	b.n	80029d4 <HAL_DMA_Abort_IT+0x480>
 80026f4:	40020010 	.word	0x40020010
 80026f8:	40020028 	.word	0x40020028
 80026fc:	40020040 	.word	0x40020040
 8002700:	40020058 	.word	0x40020058
 8002704:	40020070 	.word	0x40020070
 8002708:	40020088 	.word	0x40020088
 800270c:	400200a0 	.word	0x400200a0
 8002710:	400200b8 	.word	0x400200b8
 8002714:	40020410 	.word	0x40020410
 8002718:	40020428 	.word	0x40020428
 800271c:	40020440 	.word	0x40020440
 8002720:	40020458 	.word	0x40020458
 8002724:	40020470 	.word	0x40020470
 8002728:	40020488 	.word	0x40020488
 800272c:	400204a0 	.word	0x400204a0
 8002730:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 020e 	bic.w	r2, r2, #14
 8002742:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a6c      	ldr	r2, [pc, #432]	; (80028fc <HAL_DMA_Abort_IT+0x3a8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d04a      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <HAL_DMA_Abort_IT+0x3ac>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d045      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a69      	ldr	r2, [pc, #420]	; (8002904 <HAL_DMA_Abort_IT+0x3b0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d040      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a68      	ldr	r2, [pc, #416]	; (8002908 <HAL_DMA_Abort_IT+0x3b4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d03b      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a66      	ldr	r2, [pc, #408]	; (800290c <HAL_DMA_Abort_IT+0x3b8>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d036      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a65      	ldr	r2, [pc, #404]	; (8002910 <HAL_DMA_Abort_IT+0x3bc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d031      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a63      	ldr	r2, [pc, #396]	; (8002914 <HAL_DMA_Abort_IT+0x3c0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02c      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a62      	ldr	r2, [pc, #392]	; (8002918 <HAL_DMA_Abort_IT+0x3c4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d027      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a60      	ldr	r2, [pc, #384]	; (800291c <HAL_DMA_Abort_IT+0x3c8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d022      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a5f      	ldr	r2, [pc, #380]	; (8002920 <HAL_DMA_Abort_IT+0x3cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d01d      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_DMA_Abort_IT+0x3d0>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d018      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a5c      	ldr	r2, [pc, #368]	; (8002928 <HAL_DMA_Abort_IT+0x3d4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a5a      	ldr	r2, [pc, #360]	; (800292c <HAL_DMA_Abort_IT+0x3d8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00e      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a59      	ldr	r2, [pc, #356]	; (8002930 <HAL_DMA_Abort_IT+0x3dc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d009      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a57      	ldr	r2, [pc, #348]	; (8002934 <HAL_DMA_Abort_IT+0x3e0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d004      	beq.n	80027e4 <HAL_DMA_Abort_IT+0x290>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a56      	ldr	r2, [pc, #344]	; (8002938 <HAL_DMA_Abort_IT+0x3e4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d108      	bne.n	80027f6 <HAL_DMA_Abort_IT+0x2a2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	e007      	b.n	8002806 <HAL_DMA_Abort_IT+0x2b2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a3c      	ldr	r2, [pc, #240]	; (80028fc <HAL_DMA_Abort_IT+0x3a8>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d072      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_DMA_Abort_IT+0x3ac>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d06d      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a39      	ldr	r2, [pc, #228]	; (8002904 <HAL_DMA_Abort_IT+0x3b0>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d068      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a37      	ldr	r2, [pc, #220]	; (8002908 <HAL_DMA_Abort_IT+0x3b4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d063      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a36      	ldr	r2, [pc, #216]	; (800290c <HAL_DMA_Abort_IT+0x3b8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d05e      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_DMA_Abort_IT+0x3bc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d059      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a33      	ldr	r2, [pc, #204]	; (8002914 <HAL_DMA_Abort_IT+0x3c0>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d054      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a31      	ldr	r2, [pc, #196]	; (8002918 <HAL_DMA_Abort_IT+0x3c4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d04f      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a30      	ldr	r2, [pc, #192]	; (800291c <HAL_DMA_Abort_IT+0x3c8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d04a      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a2e      	ldr	r2, [pc, #184]	; (8002920 <HAL_DMA_Abort_IT+0x3cc>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d045      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_DMA_Abort_IT+0x3d0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d040      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a2b      	ldr	r2, [pc, #172]	; (8002928 <HAL_DMA_Abort_IT+0x3d4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d03b      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a2a      	ldr	r2, [pc, #168]	; (800292c <HAL_DMA_Abort_IT+0x3d8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d036      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a28      	ldr	r2, [pc, #160]	; (8002930 <HAL_DMA_Abort_IT+0x3dc>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d031      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_DMA_Abort_IT+0x3e0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d02c      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a25      	ldr	r2, [pc, #148]	; (8002938 <HAL_DMA_Abort_IT+0x3e4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d027      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_DMA_Abort_IT+0x3e8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d022      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a22      	ldr	r2, [pc, #136]	; (8002940 <HAL_DMA_Abort_IT+0x3ec>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d01d      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_DMA_Abort_IT+0x3f0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d018      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <HAL_DMA_Abort_IT+0x3f4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d013      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a1e      	ldr	r2, [pc, #120]	; (800294c <HAL_DMA_Abort_IT+0x3f8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00e      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_DMA_Abort_IT+0x3fc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d009      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_DMA_Abort_IT+0x400>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d004      	beq.n	80028f6 <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	; (8002958 <HAL_DMA_Abort_IT+0x404>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d132      	bne.n	800295c <HAL_DMA_Abort_IT+0x408>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e031      	b.n	800295e <HAL_DMA_Abort_IT+0x40a>
 80028fa:	bf00      	nop
 80028fc:	40020010 	.word	0x40020010
 8002900:	40020028 	.word	0x40020028
 8002904:	40020040 	.word	0x40020040
 8002908:	40020058 	.word	0x40020058
 800290c:	40020070 	.word	0x40020070
 8002910:	40020088 	.word	0x40020088
 8002914:	400200a0 	.word	0x400200a0
 8002918:	400200b8 	.word	0x400200b8
 800291c:	40020410 	.word	0x40020410
 8002920:	40020428 	.word	0x40020428
 8002924:	40020440 	.word	0x40020440
 8002928:	40020458 	.word	0x40020458
 800292c:	40020470 	.word	0x40020470
 8002930:	40020488 	.word	0x40020488
 8002934:	400204a0 	.word	0x400204a0
 8002938:	400204b8 	.word	0x400204b8
 800293c:	58025408 	.word	0x58025408
 8002940:	5802541c 	.word	0x5802541c
 8002944:	58025430 	.word	0x58025430
 8002948:	58025444 	.word	0x58025444
 800294c:	58025458 	.word	0x58025458
 8002950:	5802546c 	.word	0x5802546c
 8002954:	58025480 	.word	0x58025480
 8002958:	58025494 	.word	0x58025494
 800295c:	2300      	movs	r3, #0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d028      	beq.n	80029b4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800296c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002970:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2201      	movs	r2, #1
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002990:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop

080029e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	; 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029ec:	4b67      	ldr	r3, [pc, #412]	; (8002b8c <HAL_DMA_IRQHandler+0x1ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_DMA_IRQHandler+0x1b0>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a9b      	lsrs	r3, r3, #10
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a04:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_DMA_IRQHandler+0x1b4>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d04a      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_DMA_IRQHandler+0x1b8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d045      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a5c      	ldr	r2, [pc, #368]	; (8002b9c <HAL_DMA_IRQHandler+0x1bc>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d040      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a5a      	ldr	r2, [pc, #360]	; (8002ba0 <HAL_DMA_IRQHandler+0x1c0>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d03b      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <HAL_DMA_IRQHandler+0x1c4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d036      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <HAL_DMA_IRQHandler+0x1c8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d031      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_DMA_IRQHandler+0x1cc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d02c      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a54      	ldr	r2, [pc, #336]	; (8002bb0 <HAL_DMA_IRQHandler+0x1d0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d027      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a53      	ldr	r2, [pc, #332]	; (8002bb4 <HAL_DMA_IRQHandler+0x1d4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d022      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a51      	ldr	r2, [pc, #324]	; (8002bb8 <HAL_DMA_IRQHandler+0x1d8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d01d      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <HAL_DMA_IRQHandler+0x1dc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d018      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a4e      	ldr	r2, [pc, #312]	; (8002bc0 <HAL_DMA_IRQHandler+0x1e0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4d      	ldr	r2, [pc, #308]	; (8002bc4 <HAL_DMA_IRQHandler+0x1e4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d00e      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_DMA_IRQHandler+0x1e8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d009      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_DMA_IRQHandler+0x1ec>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_DMA_IRQHandler+0xd2>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_DMA_IRQHandler+0xd6>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <HAL_DMA_IRQHandler+0xd8>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 842b 	beq.w	8003314 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f000 80a2 	beq.w	8002c18 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2e      	ldr	r2, [pc, #184]	; (8002b94 <HAL_DMA_IRQHandler+0x1b4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d04a      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <HAL_DMA_IRQHandler+0x1b8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d045      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2b      	ldr	r2, [pc, #172]	; (8002b9c <HAL_DMA_IRQHandler+0x1bc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d040      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a2a      	ldr	r2, [pc, #168]	; (8002ba0 <HAL_DMA_IRQHandler+0x1c0>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d03b      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a28      	ldr	r2, [pc, #160]	; (8002ba4 <HAL_DMA_IRQHandler+0x1c4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d036      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <HAL_DMA_IRQHandler+0x1c8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d031      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a25      	ldr	r2, [pc, #148]	; (8002bac <HAL_DMA_IRQHandler+0x1cc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d02c      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a24      	ldr	r2, [pc, #144]	; (8002bb0 <HAL_DMA_IRQHandler+0x1d0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d027      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <HAL_DMA_IRQHandler+0x1d4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d022      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a21      	ldr	r2, [pc, #132]	; (8002bb8 <HAL_DMA_IRQHandler+0x1d8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d01d      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a1f      	ldr	r2, [pc, #124]	; (8002bbc <HAL_DMA_IRQHandler+0x1dc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d018      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_DMA_IRQHandler+0x1e0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <HAL_DMA_IRQHandler+0x1e4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00e      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_DMA_IRQHandler+0x1e8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_DMA_IRQHandler+0x1ec>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x194>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_DMA_IRQHandler+0x1f0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d12f      	bne.n	8002bd4 <HAL_DMA_IRQHandler+0x1f4>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	bf14      	ite	ne
 8002b82:	2301      	movne	r3, #1
 8002b84:	2300      	moveq	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	e02e      	b.n	8002be8 <HAL_DMA_IRQHandler+0x208>
 8002b8a:	bf00      	nop
 8002b8c:	24000000 	.word	0x24000000
 8002b90:	1b4e81b5 	.word	0x1b4e81b5
 8002b94:	40020010 	.word	0x40020010
 8002b98:	40020028 	.word	0x40020028
 8002b9c:	40020040 	.word	0x40020040
 8002ba0:	40020058 	.word	0x40020058
 8002ba4:	40020070 	.word	0x40020070
 8002ba8:	40020088 	.word	0x40020088
 8002bac:	400200a0 	.word	0x400200a0
 8002bb0:	400200b8 	.word	0x400200b8
 8002bb4:	40020410 	.word	0x40020410
 8002bb8:	40020428 	.word	0x40020428
 8002bbc:	40020440 	.word	0x40020440
 8002bc0:	40020458 	.word	0x40020458
 8002bc4:	40020470 	.word	0x40020470
 8002bc8:	40020488 	.word	0x40020488
 8002bcc:	400204a0 	.word	0x400204a0
 8002bd0:	400204b8 	.word	0x400204b8
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d015      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0204 	bic.w	r2, r2, #4
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2208      	movs	r2, #8
 8002c06:	409a      	lsls	r2, r3
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06e      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a69      	ldr	r2, [pc, #420]	; (8002dd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04a      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a67      	ldr	r2, [pc, #412]	; (8002ddc <HAL_DMA_IRQHandler+0x3fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d045      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a66      	ldr	r2, [pc, #408]	; (8002de0 <HAL_DMA_IRQHandler+0x400>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d040      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a64      	ldr	r2, [pc, #400]	; (8002de4 <HAL_DMA_IRQHandler+0x404>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d03b      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a63      	ldr	r2, [pc, #396]	; (8002de8 <HAL_DMA_IRQHandler+0x408>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a61      	ldr	r2, [pc, #388]	; (8002dec <HAL_DMA_IRQHandler+0x40c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a60      	ldr	r2, [pc, #384]	; (8002df0 <HAL_DMA_IRQHandler+0x410>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02c      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a5e      	ldr	r2, [pc, #376]	; (8002df4 <HAL_DMA_IRQHandler+0x414>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a5d      	ldr	r2, [pc, #372]	; (8002df8 <HAL_DMA_IRQHandler+0x418>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5b      	ldr	r2, [pc, #364]	; (8002dfc <HAL_DMA_IRQHandler+0x41c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a5a      	ldr	r2, [pc, #360]	; (8002e00 <HAL_DMA_IRQHandler+0x420>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_DMA_IRQHandler+0x424>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a57      	ldr	r2, [pc, #348]	; (8002e08 <HAL_DMA_IRQHandler+0x428>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a55      	ldr	r2, [pc, #340]	; (8002e0c <HAL_DMA_IRQHandler+0x42c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a54      	ldr	r2, [pc, #336]	; (8002e10 <HAL_DMA_IRQHandler+0x430>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_IRQHandler+0x2ee>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a52      	ldr	r2, [pc, #328]	; (8002e14 <HAL_DMA_IRQHandler+0x434>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d10a      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x304>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e003      	b.n	8002cec <HAL_DMA_IRQHandler+0x30c>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00d      	beq.n	8002d0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	f043 0202 	orr.w	r2, r3, #2
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	2204      	movs	r2, #4
 8002d16:	409a      	lsls	r2, r3
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 808f 	beq.w	8002e40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <HAL_DMA_IRQHandler+0x3f8>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d04a      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2a      	ldr	r2, [pc, #168]	; (8002ddc <HAL_DMA_IRQHandler+0x3fc>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d045      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a29      	ldr	r2, [pc, #164]	; (8002de0 <HAL_DMA_IRQHandler+0x400>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d040      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <HAL_DMA_IRQHandler+0x404>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d03b      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a26      	ldr	r2, [pc, #152]	; (8002de8 <HAL_DMA_IRQHandler+0x408>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d036      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <HAL_DMA_IRQHandler+0x40c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d031      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_DMA_IRQHandler+0x410>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d02c      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_DMA_IRQHandler+0x414>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d027      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_DMA_IRQHandler+0x418>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_DMA_IRQHandler+0x41c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d01d      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_DMA_IRQHandler+0x420>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d018      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_DMA_IRQHandler+0x424>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_DMA_IRQHandler+0x428>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00e      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_DMA_IRQHandler+0x42c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d009      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a17      	ldr	r2, [pc, #92]	; (8002e10 <HAL_DMA_IRQHandler+0x430>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x3e2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <HAL_DMA_IRQHandler+0x434>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d12a      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x438>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf14      	ite	ne
 8002dd0:	2301      	movne	r3, #1
 8002dd2:	2300      	moveq	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e023      	b.n	8002e20 <HAL_DMA_IRQHandler+0x440>
 8002dd8:	40020010 	.word	0x40020010
 8002ddc:	40020028 	.word	0x40020028
 8002de0:	40020040 	.word	0x40020040
 8002de4:	40020058 	.word	0x40020058
 8002de8:	40020070 	.word	0x40020070
 8002dec:	40020088 	.word	0x40020088
 8002df0:	400200a0 	.word	0x400200a0
 8002df4:	400200b8 	.word	0x400200b8
 8002df8:	40020410 	.word	0x40020410
 8002dfc:	40020428 	.word	0x40020428
 8002e00:	40020440 	.word	0x40020440
 8002e04:	40020458 	.word	0x40020458
 8002e08:	40020470 	.word	0x40020470
 8002e0c:	40020488 	.word	0x40020488
 8002e10:	400204a0 	.word	0x400204a0
 8002e14:	400204b8 	.word	0x400204b8
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00d      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	409a      	lsls	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	2210      	movs	r2, #16
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 80a6 	beq.w	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a85      	ldr	r2, [pc, #532]	; (8003070 <HAL_DMA_IRQHandler+0x690>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d04a      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a83      	ldr	r2, [pc, #524]	; (8003074 <HAL_DMA_IRQHandler+0x694>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d045      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a82      	ldr	r2, [pc, #520]	; (8003078 <HAL_DMA_IRQHandler+0x698>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d040      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a80      	ldr	r2, [pc, #512]	; (800307c <HAL_DMA_IRQHandler+0x69c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d03b      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7f      	ldr	r2, [pc, #508]	; (8003080 <HAL_DMA_IRQHandler+0x6a0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d036      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a7d      	ldr	r2, [pc, #500]	; (8003084 <HAL_DMA_IRQHandler+0x6a4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d031      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a7c      	ldr	r2, [pc, #496]	; (8003088 <HAL_DMA_IRQHandler+0x6a8>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d02c      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a7a      	ldr	r2, [pc, #488]	; (800308c <HAL_DMA_IRQHandler+0x6ac>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a79      	ldr	r2, [pc, #484]	; (8003090 <HAL_DMA_IRQHandler+0x6b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a77      	ldr	r2, [pc, #476]	; (8003094 <HAL_DMA_IRQHandler+0x6b4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a76      	ldr	r2, [pc, #472]	; (8003098 <HAL_DMA_IRQHandler+0x6b8>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a74      	ldr	r2, [pc, #464]	; (800309c <HAL_DMA_IRQHandler+0x6bc>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <HAL_DMA_IRQHandler+0x6c0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a71      	ldr	r2, [pc, #452]	; (80030a4 <HAL_DMA_IRQHandler+0x6c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a70      	ldr	r2, [pc, #448]	; (80030a8 <HAL_DMA_IRQHandler+0x6c8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x516>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a6e      	ldr	r2, [pc, #440]	; (80030ac <HAL_DMA_IRQHandler+0x6cc>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10a      	bne.n	8002f0c <HAL_DMA_IRQHandler+0x52c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	bf14      	ite	ne
 8002f04:	2301      	movne	r3, #1
 8002f06:	2300      	moveq	r3, #0
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e009      	b.n	8002f20 <HAL_DMA_IRQHandler+0x540>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03e      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	f003 031f 	and.w	r3, r3, #31
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d108      	bne.n	8002f62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d024      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e01f      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01b      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
 8002f72:	e016      	b.n	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d107      	bne.n	8002f92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0208 	bic.w	r2, r2, #8
 8002f90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	2220      	movs	r2, #32
 8002fac:	409a      	lsls	r2, r3
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8110 	beq.w	80031d8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <HAL_DMA_IRQHandler+0x690>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <HAL_DMA_IRQHandler+0x694>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a29      	ldr	r2, [pc, #164]	; (8003078 <HAL_DMA_IRQHandler+0x698>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a28      	ldr	r2, [pc, #160]	; (800307c <HAL_DMA_IRQHandler+0x69c>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_DMA_IRQHandler+0x6a0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a25      	ldr	r2, [pc, #148]	; (8003084 <HAL_DMA_IRQHandler+0x6a4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a23      	ldr	r2, [pc, #140]	; (8003088 <HAL_DMA_IRQHandler+0x6a8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a22      	ldr	r2, [pc, #136]	; (800308c <HAL_DMA_IRQHandler+0x6ac>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a20      	ldr	r2, [pc, #128]	; (8003090 <HAL_DMA_IRQHandler+0x6b0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <HAL_DMA_IRQHandler+0x6b4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <HAL_DMA_IRQHandler+0x6b8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <HAL_DMA_IRQHandler+0x6bc>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1a      	ldr	r2, [pc, #104]	; (80030a0 <HAL_DMA_IRQHandler+0x6c0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a19      	ldr	r2, [pc, #100]	; (80030a4 <HAL_DMA_IRQHandler+0x6c4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a17      	ldr	r2, [pc, #92]	; (80030a8 <HAL_DMA_IRQHandler+0x6c8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_IRQHandler+0x678>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a16      	ldr	r2, [pc, #88]	; (80030ac <HAL_DMA_IRQHandler+0x6cc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d12b      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x6d0>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	bf14      	ite	ne
 8003066:	2301      	movne	r3, #1
 8003068:	2300      	moveq	r3, #0
 800306a:	b2db      	uxtb	r3, r3
 800306c:	e02a      	b.n	80030c4 <HAL_DMA_IRQHandler+0x6e4>
 800306e:	bf00      	nop
 8003070:	40020010 	.word	0x40020010
 8003074:	40020028 	.word	0x40020028
 8003078:	40020040 	.word	0x40020040
 800307c:	40020058 	.word	0x40020058
 8003080:	40020070 	.word	0x40020070
 8003084:	40020088 	.word	0x40020088
 8003088:	400200a0 	.word	0x400200a0
 800308c:	400200b8 	.word	0x400200b8
 8003090:	40020410 	.word	0x40020410
 8003094:	40020428 	.word	0x40020428
 8003098:	40020440 	.word	0x40020440
 800309c:	40020458 	.word	0x40020458
 80030a0:	40020470 	.word	0x40020470
 80030a4:	40020488 	.word	0x40020488
 80030a8:	400204a0 	.word	0x400204a0
 80030ac:	400204b8 	.word	0x400204b8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf14      	ite	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	2300      	moveq	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8087 	beq.w	80031d8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	2220      	movs	r2, #32
 80030d4:	409a      	lsls	r2, r3
 80030d6:	6a3b      	ldr	r3, [r7, #32]
 80030d8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b04      	cmp	r3, #4
 80030e4:	d139      	bne.n	800315a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0216 	bic.w	r2, r2, #22
 80030f4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695a      	ldr	r2, [r3, #20]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003104:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d103      	bne.n	8003116 <HAL_DMA_IRQHandler+0x736>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0208 	bic.w	r2, r2, #8
 8003124:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312a:	f003 031f 	and.w	r3, r3, #31
 800312e:	223f      	movs	r2, #63	; 0x3f
 8003130:	409a      	lsls	r2, r3
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 834a 	beq.w	80037e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
          }
          return;
 8003158:	e344      	b.n	80037e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d018      	beq.n	800319a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d108      	bne.n	8003188 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02c      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	4798      	blx	r3
 8003186:	e027      	b.n	80031d8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d023      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
 8003198:	e01e      	b.n	80031d8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10f      	bne.n	80031c8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0210 	bic.w	r2, r2, #16
 80031b6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8306 	beq.w	80037ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8088 	beq.w	8003300 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2204      	movs	r2, #4
 80031f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a7a      	ldr	r2, [pc, #488]	; (80033e8 <HAL_DMA_IRQHandler+0xa08>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d04a      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a79      	ldr	r2, [pc, #484]	; (80033ec <HAL_DMA_IRQHandler+0xa0c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d045      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a77      	ldr	r2, [pc, #476]	; (80033f0 <HAL_DMA_IRQHandler+0xa10>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d040      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a76      	ldr	r2, [pc, #472]	; (80033f4 <HAL_DMA_IRQHandler+0xa14>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d03b      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a74      	ldr	r2, [pc, #464]	; (80033f8 <HAL_DMA_IRQHandler+0xa18>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d036      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a73      	ldr	r2, [pc, #460]	; (80033fc <HAL_DMA_IRQHandler+0xa1c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d031      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a71      	ldr	r2, [pc, #452]	; (8003400 <HAL_DMA_IRQHandler+0xa20>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02c      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a70      	ldr	r2, [pc, #448]	; (8003404 <HAL_DMA_IRQHandler+0xa24>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d027      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6e      	ldr	r2, [pc, #440]	; (8003408 <HAL_DMA_IRQHandler+0xa28>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d022      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6d      	ldr	r2, [pc, #436]	; (800340c <HAL_DMA_IRQHandler+0xa2c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d01d      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a6b      	ldr	r2, [pc, #428]	; (8003410 <HAL_DMA_IRQHandler+0xa30>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d018      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a6a      	ldr	r2, [pc, #424]	; (8003414 <HAL_DMA_IRQHandler+0xa34>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d013      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a68      	ldr	r2, [pc, #416]	; (8003418 <HAL_DMA_IRQHandler+0xa38>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d00e      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a67      	ldr	r2, [pc, #412]	; (800341c <HAL_DMA_IRQHandler+0xa3c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d009      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a65      	ldr	r2, [pc, #404]	; (8003420 <HAL_DMA_IRQHandler+0xa40>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d004      	beq.n	8003298 <HAL_DMA_IRQHandler+0x8b8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a64      	ldr	r2, [pc, #400]	; (8003424 <HAL_DMA_IRQHandler+0xa44>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d108      	bne.n	80032aa <HAL_DMA_IRQHandler+0x8ca>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0201 	bic.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	e007      	b.n	80032ba <HAL_DMA_IRQHandler+0x8da>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0201 	bic.w	r2, r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	3301      	adds	r3, #1
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d307      	bcc.n	80032d6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f2      	bne.n	80032ba <HAL_DMA_IRQHandler+0x8da>
 80032d4:	e000      	b.n	80032d8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80032d6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032ee:	e003      	b.n	80032f8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8272 	beq.w	80037ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
 8003312:	e26c      	b.n	80037ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a43      	ldr	r2, [pc, #268]	; (8003428 <HAL_DMA_IRQHandler+0xa48>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d022      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a42      	ldr	r2, [pc, #264]	; (800342c <HAL_DMA_IRQHandler+0xa4c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d01d      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a40      	ldr	r2, [pc, #256]	; (8003430 <HAL_DMA_IRQHandler+0xa50>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d018      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a3f      	ldr	r2, [pc, #252]	; (8003434 <HAL_DMA_IRQHandler+0xa54>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d013      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a3d      	ldr	r2, [pc, #244]	; (8003438 <HAL_DMA_IRQHandler+0xa58>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00e      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a3c      	ldr	r2, [pc, #240]	; (800343c <HAL_DMA_IRQHandler+0xa5c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d009      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3a      	ldr	r2, [pc, #232]	; (8003440 <HAL_DMA_IRQHandler+0xa60>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d004      	beq.n	8003364 <HAL_DMA_IRQHandler+0x984>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a39      	ldr	r2, [pc, #228]	; (8003444 <HAL_DMA_IRQHandler+0xa64>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d101      	bne.n	8003368 <HAL_DMA_IRQHandler+0x988>
 8003364:	2301      	movs	r3, #1
 8003366:	e000      	b.n	800336a <HAL_DMA_IRQHandler+0x98a>
 8003368:	2300      	movs	r3, #0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 823f 	beq.w	80037ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	2204      	movs	r2, #4
 8003382:	409a      	lsls	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	4013      	ands	r3, r2
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80cd 	beq.w	8003528 <HAL_DMA_IRQHandler+0xb48>
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80c7 	beq.w	8003528 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2204      	movs	r2, #4
 80033a4:	409a      	lsls	r2, r3
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d049      	beq.n	8003448 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 8210 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033d0:	e20a      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8206 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033e4:	e200      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe08>
 80033e6:	bf00      	nop
 80033e8:	40020010 	.word	0x40020010
 80033ec:	40020028 	.word	0x40020028
 80033f0:	40020040 	.word	0x40020040
 80033f4:	40020058 	.word	0x40020058
 80033f8:	40020070 	.word	0x40020070
 80033fc:	40020088 	.word	0x40020088
 8003400:	400200a0 	.word	0x400200a0
 8003404:	400200b8 	.word	0x400200b8
 8003408:	40020410 	.word	0x40020410
 800340c:	40020428 	.word	0x40020428
 8003410:	40020440 	.word	0x40020440
 8003414:	40020458 	.word	0x40020458
 8003418:	40020470 	.word	0x40020470
 800341c:	40020488 	.word	0x40020488
 8003420:	400204a0 	.word	0x400204a0
 8003424:	400204b8 	.word	0x400204b8
 8003428:	58025408 	.word	0x58025408
 800342c:	5802541c 	.word	0x5802541c
 8003430:	58025430 	.word	0x58025430
 8003434:	58025444 	.word	0x58025444
 8003438:	58025458 	.word	0x58025458
 800343c:	5802546c 	.word	0x5802546c
 8003440:	58025480 	.word	0x58025480
 8003444:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d160      	bne.n	8003514 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a7f      	ldr	r2, [pc, #508]	; (8003654 <HAL_DMA_IRQHandler+0xc74>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d04a      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a7d      	ldr	r2, [pc, #500]	; (8003658 <HAL_DMA_IRQHandler+0xc78>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d045      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a7c      	ldr	r2, [pc, #496]	; (800365c <HAL_DMA_IRQHandler+0xc7c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d040      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a7a      	ldr	r2, [pc, #488]	; (8003660 <HAL_DMA_IRQHandler+0xc80>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d03b      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a79      	ldr	r2, [pc, #484]	; (8003664 <HAL_DMA_IRQHandler+0xc84>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d036      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a77      	ldr	r2, [pc, #476]	; (8003668 <HAL_DMA_IRQHandler+0xc88>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d031      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a76      	ldr	r2, [pc, #472]	; (800366c <HAL_DMA_IRQHandler+0xc8c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d02c      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a74      	ldr	r2, [pc, #464]	; (8003670 <HAL_DMA_IRQHandler+0xc90>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d027      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a73      	ldr	r2, [pc, #460]	; (8003674 <HAL_DMA_IRQHandler+0xc94>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a71      	ldr	r2, [pc, #452]	; (8003678 <HAL_DMA_IRQHandler+0xc98>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01d      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a70      	ldr	r2, [pc, #448]	; (800367c <HAL_DMA_IRQHandler+0xc9c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a6e      	ldr	r2, [pc, #440]	; (8003680 <HAL_DMA_IRQHandler+0xca0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6d      	ldr	r2, [pc, #436]	; (8003684 <HAL_DMA_IRQHandler+0xca4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a6b      	ldr	r2, [pc, #428]	; (8003688 <HAL_DMA_IRQHandler+0xca8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a6a      	ldr	r2, [pc, #424]	; (800368c <HAL_DMA_IRQHandler+0xcac>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xb12>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a68      	ldr	r2, [pc, #416]	; (8003690 <HAL_DMA_IRQHandler+0xcb0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <HAL_DMA_IRQHandler+0xb24>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0208 	bic.w	r2, r2, #8
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e007      	b.n	8003514 <HAL_DMA_IRQHandler+0xb34>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0204 	bic.w	r2, r2, #4
 8003512:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8165 	beq.w	80037e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003526:	e15f      	b.n	80037e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	f003 031f 	and.w	r3, r3, #31
 8003530:	2202      	movs	r2, #2
 8003532:	409a      	lsls	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4013      	ands	r3, r2
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80c5 	beq.w	80036c8 <HAL_DMA_IRQHandler+0xce8>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 80bf 	beq.w	80036c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	f003 031f 	and.w	r3, r3, #31
 8003552:	2202      	movs	r2, #2
 8003554:	409a      	lsls	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d018      	beq.n	8003596 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 813a 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003580:	e134      	b.n	80037ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 8130 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003594:	e12a      	b.n	80037ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	f040 8089 	bne.w	80036b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a2b      	ldr	r2, [pc, #172]	; (8003654 <HAL_DMA_IRQHandler+0xc74>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d04a      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <HAL_DMA_IRQHandler+0xc78>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d045      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a28      	ldr	r2, [pc, #160]	; (800365c <HAL_DMA_IRQHandler+0xc7c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d040      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a26      	ldr	r2, [pc, #152]	; (8003660 <HAL_DMA_IRQHandler+0xc80>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d03b      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a25      	ldr	r2, [pc, #148]	; (8003664 <HAL_DMA_IRQHandler+0xc84>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d036      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a23      	ldr	r2, [pc, #140]	; (8003668 <HAL_DMA_IRQHandler+0xc88>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d031      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a22      	ldr	r2, [pc, #136]	; (800366c <HAL_DMA_IRQHandler+0xc8c>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d02c      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a20      	ldr	r2, [pc, #128]	; (8003670 <HAL_DMA_IRQHandler+0xc90>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d027      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1f      	ldr	r2, [pc, #124]	; (8003674 <HAL_DMA_IRQHandler+0xc94>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d022      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_DMA_IRQHandler+0xc98>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d01d      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <HAL_DMA_IRQHandler+0xc9c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d018      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_DMA_IRQHandler+0xca0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a19      	ldr	r2, [pc, #100]	; (8003684 <HAL_DMA_IRQHandler+0xca4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00e      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_DMA_IRQHandler+0xca8>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d009      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_DMA_IRQHandler+0xcac>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_DMA_IRQHandler+0xc62>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <HAL_DMA_IRQHandler+0xcb0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d128      	bne.n	8003694 <HAL_DMA_IRQHandler+0xcb4>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0214 	bic.w	r2, r2, #20
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	e027      	b.n	80036a4 <HAL_DMA_IRQHandler+0xcc4>
 8003654:	40020010 	.word	0x40020010
 8003658:	40020028 	.word	0x40020028
 800365c:	40020040 	.word	0x40020040
 8003660:	40020058 	.word	0x40020058
 8003664:	40020070 	.word	0x40020070
 8003668:	40020088 	.word	0x40020088
 800366c:	400200a0 	.word	0x400200a0
 8003670:	400200b8 	.word	0x400200b8
 8003674:	40020410 	.word	0x40020410
 8003678:	40020428 	.word	0x40020428
 800367c:	40020440 	.word	0x40020440
 8003680:	40020458 	.word	0x40020458
 8003684:	40020470 	.word	0x40020470
 8003688:	40020488 	.word	0x40020488
 800368c:	400204a0 	.word	0x400204a0
 8003690:	400204b8 	.word	0x400204b8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 020a 	bic.w	r2, r2, #10
 80036a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8097 	beq.w	80037ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c6:	e091      	b.n	80037ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036cc:	f003 031f 	and.w	r3, r3, #31
 80036d0:	2208      	movs	r2, #8
 80036d2:	409a      	lsls	r2, r3
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8088 	beq.w	80037ee <HAL_DMA_IRQHandler+0xe0e>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f003 0308 	and.w	r3, r3, #8
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8082 	beq.w	80037ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a41      	ldr	r2, [pc, #260]	; (80037f4 <HAL_DMA_IRQHandler+0xe14>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d04a      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a3f      	ldr	r2, [pc, #252]	; (80037f8 <HAL_DMA_IRQHandler+0xe18>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d045      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a3e      	ldr	r2, [pc, #248]	; (80037fc <HAL_DMA_IRQHandler+0xe1c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d040      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a3c      	ldr	r2, [pc, #240]	; (8003800 <HAL_DMA_IRQHandler+0xe20>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d03b      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_DMA_IRQHandler+0xe24>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d036      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a39      	ldr	r2, [pc, #228]	; (8003808 <HAL_DMA_IRQHandler+0xe28>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d031      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a38      	ldr	r2, [pc, #224]	; (800380c <HAL_DMA_IRQHandler+0xe2c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d02c      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a36      	ldr	r2, [pc, #216]	; (8003810 <HAL_DMA_IRQHandler+0xe30>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d027      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a35      	ldr	r2, [pc, #212]	; (8003814 <HAL_DMA_IRQHandler+0xe34>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a33      	ldr	r2, [pc, #204]	; (8003818 <HAL_DMA_IRQHandler+0xe38>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d01d      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a32      	ldr	r2, [pc, #200]	; (800381c <HAL_DMA_IRQHandler+0xe3c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d018      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a30      	ldr	r2, [pc, #192]	; (8003820 <HAL_DMA_IRQHandler+0xe40>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d013      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <HAL_DMA_IRQHandler+0xe44>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d00e      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <HAL_DMA_IRQHandler+0xe48>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d009      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2c      	ldr	r2, [pc, #176]	; (800382c <HAL_DMA_IRQHandler+0xe4c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d004      	beq.n	800378a <HAL_DMA_IRQHandler+0xdaa>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_DMA_IRQHandler+0xe50>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d108      	bne.n	800379c <HAL_DMA_IRQHandler+0xdbc>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 021c 	bic.w	r2, r2, #28
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e007      	b.n	80037ac <HAL_DMA_IRQHandler+0xdcc>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 020e 	bic.w	r2, r2, #14
 80037aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	f003 031f 	and.w	r3, r3, #31
 80037b4:	2201      	movs	r2, #1
 80037b6:	409a      	lsls	r2, r3
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	4798      	blx	r3
 80037e2:	e004      	b.n	80037ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037e4:	bf00      	nop
 80037e6:	e002      	b.n	80037ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037e8:	bf00      	nop
 80037ea:	e000      	b.n	80037ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037ee:	3728      	adds	r7, #40	; 0x28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	40020058 	.word	0x40020058
 8003804:	40020070 	.word	0x40020070
 8003808:	40020088 	.word	0x40020088
 800380c:	400200a0 	.word	0x400200a0
 8003810:	400200b8 	.word	0x400200b8
 8003814:	40020410 	.word	0x40020410
 8003818:	40020428 	.word	0x40020428
 800381c:	40020440 	.word	0x40020440
 8003820:	40020458 	.word	0x40020458
 8003824:	40020470 	.word	0x40020470
 8003828:	40020488 	.word	0x40020488
 800382c:	400204a0 	.word	0x400204a0
 8003830:	400204b8 	.word	0x400204b8

08003834 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003840:	4618      	mov	r0, r3
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003864:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a7f      	ldr	r2, [pc, #508]	; (8003a68 <DMA_SetConfig+0x21c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d072      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a7d      	ldr	r2, [pc, #500]	; (8003a6c <DMA_SetConfig+0x220>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d06d      	beq.n	8003956 <DMA_SetConfig+0x10a>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7c      	ldr	r2, [pc, #496]	; (8003a70 <DMA_SetConfig+0x224>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d068      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7a      	ldr	r2, [pc, #488]	; (8003a74 <DMA_SetConfig+0x228>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d063      	beq.n	8003956 <DMA_SetConfig+0x10a>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a79      	ldr	r2, [pc, #484]	; (8003a78 <DMA_SetConfig+0x22c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d05e      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a77      	ldr	r2, [pc, #476]	; (8003a7c <DMA_SetConfig+0x230>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d059      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a76      	ldr	r2, [pc, #472]	; (8003a80 <DMA_SetConfig+0x234>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d054      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a74      	ldr	r2, [pc, #464]	; (8003a84 <DMA_SetConfig+0x238>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d04f      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a73      	ldr	r2, [pc, #460]	; (8003a88 <DMA_SetConfig+0x23c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d04a      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a71      	ldr	r2, [pc, #452]	; (8003a8c <DMA_SetConfig+0x240>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d045      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a70      	ldr	r2, [pc, #448]	; (8003a90 <DMA_SetConfig+0x244>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d040      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a6e      	ldr	r2, [pc, #440]	; (8003a94 <DMA_SetConfig+0x248>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d03b      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a6d      	ldr	r2, [pc, #436]	; (8003a98 <DMA_SetConfig+0x24c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d036      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6b      	ldr	r2, [pc, #428]	; (8003a9c <DMA_SetConfig+0x250>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d031      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6a      	ldr	r2, [pc, #424]	; (8003aa0 <DMA_SetConfig+0x254>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d02c      	beq.n	8003956 <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a68      	ldr	r2, [pc, #416]	; (8003aa4 <DMA_SetConfig+0x258>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d027      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a67      	ldr	r2, [pc, #412]	; (8003aa8 <DMA_SetConfig+0x25c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a65      	ldr	r2, [pc, #404]	; (8003aac <DMA_SetConfig+0x260>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d01d      	beq.n	8003956 <DMA_SetConfig+0x10a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a64      	ldr	r2, [pc, #400]	; (8003ab0 <DMA_SetConfig+0x264>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d018      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a62      	ldr	r2, [pc, #392]	; (8003ab4 <DMA_SetConfig+0x268>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <DMA_SetConfig+0x10a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a61      	ldr	r2, [pc, #388]	; (8003ab8 <DMA_SetConfig+0x26c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d00e      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5f      	ldr	r2, [pc, #380]	; (8003abc <DMA_SetConfig+0x270>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d009      	beq.n	8003956 <DMA_SetConfig+0x10a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a5e      	ldr	r2, [pc, #376]	; (8003ac0 <DMA_SetConfig+0x274>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d004      	beq.n	8003956 <DMA_SetConfig+0x10a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a5c      	ldr	r2, [pc, #368]	; (8003ac4 <DMA_SetConfig+0x278>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <DMA_SetConfig+0x10e>
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <DMA_SetConfig+0x110>
 800395a:	2300      	movs	r3, #0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00d      	beq.n	800397c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003968:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800397a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a39      	ldr	r2, [pc, #228]	; (8003a68 <DMA_SetConfig+0x21c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d04a      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a38      	ldr	r2, [pc, #224]	; (8003a6c <DMA_SetConfig+0x220>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d045      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a36      	ldr	r2, [pc, #216]	; (8003a70 <DMA_SetConfig+0x224>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d040      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a35      	ldr	r2, [pc, #212]	; (8003a74 <DMA_SetConfig+0x228>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d03b      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <DMA_SetConfig+0x22c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d036      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a32      	ldr	r2, [pc, #200]	; (8003a7c <DMA_SetConfig+0x230>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d031      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <DMA_SetConfig+0x234>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d02c      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <DMA_SetConfig+0x238>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d027      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2d      	ldr	r2, [pc, #180]	; (8003a88 <DMA_SetConfig+0x23c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <DMA_SetConfig+0x240>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <DMA_SetConfig+0x244>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <DMA_SetConfig+0x248>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a27      	ldr	r2, [pc, #156]	; (8003a98 <DMA_SetConfig+0x24c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a26      	ldr	r2, [pc, #152]	; (8003a9c <DMA_SetConfig+0x250>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a24      	ldr	r2, [pc, #144]	; (8003aa0 <DMA_SetConfig+0x254>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <DMA_SetConfig+0x1d0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <DMA_SetConfig+0x258>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <DMA_SetConfig+0x1d4>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <DMA_SetConfig+0x1d6>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d059      	beq.n	8003ada <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	223f      	movs	r2, #63	; 0x3f
 8003a30:	409a      	lsls	r2, r3
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	683a      	ldr	r2, [r7, #0]
 8003a4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d138      	bne.n	8003ac8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003a66:	e086      	b.n	8003b76 <DMA_SetConfig+0x32a>
 8003a68:	40020010 	.word	0x40020010
 8003a6c:	40020028 	.word	0x40020028
 8003a70:	40020040 	.word	0x40020040
 8003a74:	40020058 	.word	0x40020058
 8003a78:	40020070 	.word	0x40020070
 8003a7c:	40020088 	.word	0x40020088
 8003a80:	400200a0 	.word	0x400200a0
 8003a84:	400200b8 	.word	0x400200b8
 8003a88:	40020410 	.word	0x40020410
 8003a8c:	40020428 	.word	0x40020428
 8003a90:	40020440 	.word	0x40020440
 8003a94:	40020458 	.word	0x40020458
 8003a98:	40020470 	.word	0x40020470
 8003a9c:	40020488 	.word	0x40020488
 8003aa0:	400204a0 	.word	0x400204a0
 8003aa4:	400204b8 	.word	0x400204b8
 8003aa8:	58025408 	.word	0x58025408
 8003aac:	5802541c 	.word	0x5802541c
 8003ab0:	58025430 	.word	0x58025430
 8003ab4:	58025444 	.word	0x58025444
 8003ab8:	58025458 	.word	0x58025458
 8003abc:	5802546c 	.word	0x5802546c
 8003ac0:	58025480 	.word	0x58025480
 8003ac4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	60da      	str	r2, [r3, #12]
}
 8003ad8:	e04d      	b.n	8003b76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <DMA_SetConfig+0x338>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d022      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a27      	ldr	r2, [pc, #156]	; (8003b88 <DMA_SetConfig+0x33c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01d      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <DMA_SetConfig+0x340>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d018      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <DMA_SetConfig+0x344>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <DMA_SetConfig+0x348>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <DMA_SetConfig+0x34c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <DMA_SetConfig+0x350>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <DMA_SetConfig+0x2de>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <DMA_SetConfig+0x354>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d101      	bne.n	8003b2e <DMA_SetConfig+0x2e2>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <DMA_SetConfig+0x2e4>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d108      	bne.n	8003b66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68ba      	ldr	r2, [r7, #8]
 8003b62:	60da      	str	r2, [r3, #12]
}
 8003b64:	e007      	b.n	8003b76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	60da      	str	r2, [r3, #12]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	58025408 	.word	0x58025408
 8003b88:	5802541c 	.word	0x5802541c
 8003b8c:	58025430 	.word	0x58025430
 8003b90:	58025444 	.word	0x58025444
 8003b94:	58025458 	.word	0x58025458
 8003b98:	5802546c 	.word	0x5802546c
 8003b9c:	58025480 	.word	0x58025480
 8003ba0:	58025494 	.word	0x58025494

08003ba4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a42      	ldr	r2, [pc, #264]	; (8003cbc <DMA_CalcBaseAndBitshift+0x118>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d04a      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a41      	ldr	r2, [pc, #260]	; (8003cc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d045      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a3f      	ldr	r2, [pc, #252]	; (8003cc4 <DMA_CalcBaseAndBitshift+0x120>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d040      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a3e      	ldr	r2, [pc, #248]	; (8003cc8 <DMA_CalcBaseAndBitshift+0x124>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d03b      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a3c      	ldr	r2, [pc, #240]	; (8003ccc <DMA_CalcBaseAndBitshift+0x128>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d036      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a3b      	ldr	r2, [pc, #236]	; (8003cd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d031      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a39      	ldr	r2, [pc, #228]	; (8003cd4 <DMA_CalcBaseAndBitshift+0x130>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d02c      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a38      	ldr	r2, [pc, #224]	; (8003cd8 <DMA_CalcBaseAndBitshift+0x134>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d027      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a36      	ldr	r2, [pc, #216]	; (8003cdc <DMA_CalcBaseAndBitshift+0x138>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d022      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a35      	ldr	r2, [pc, #212]	; (8003ce0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d01d      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a33      	ldr	r2, [pc, #204]	; (8003ce4 <DMA_CalcBaseAndBitshift+0x140>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a32      	ldr	r2, [pc, #200]	; (8003ce8 <DMA_CalcBaseAndBitshift+0x144>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a30      	ldr	r2, [pc, #192]	; (8003cec <DMA_CalcBaseAndBitshift+0x148>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2f      	ldr	r2, [pc, #188]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2d      	ldr	r2, [pc, #180]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x150>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <DMA_CalcBaseAndBitshift+0xa8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x154>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d101      	bne.n	8003c50 <DMA_CalcBaseAndBitshift+0xac>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <DMA_CalcBaseAndBitshift+0xae>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d024      	beq.n	8003ca0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	3b10      	subs	r3, #16
 8003c5e:	4a27      	ldr	r2, [pc, #156]	; (8003cfc <DMA_CalcBaseAndBitshift+0x158>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	4a24      	ldr	r2, [pc, #144]	; (8003d00 <DMA_CalcBaseAndBitshift+0x15c>)
 8003c70:	5cd3      	ldrb	r3, [r2, r3]
 8003c72:	461a      	mov	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d908      	bls.n	8003c90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	4b1f      	ldr	r3, [pc, #124]	; (8003d04 <DMA_CalcBaseAndBitshift+0x160>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	1d1a      	adds	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8e:	e00d      	b.n	8003cac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <DMA_CalcBaseAndBitshift+0x160>)
 8003c98:	4013      	ands	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9e:	e005      	b.n	8003cac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40020010 	.word	0x40020010
 8003cc0:	40020028 	.word	0x40020028
 8003cc4:	40020040 	.word	0x40020040
 8003cc8:	40020058 	.word	0x40020058
 8003ccc:	40020070 	.word	0x40020070
 8003cd0:	40020088 	.word	0x40020088
 8003cd4:	400200a0 	.word	0x400200a0
 8003cd8:	400200b8 	.word	0x400200b8
 8003cdc:	40020410 	.word	0x40020410
 8003ce0:	40020428 	.word	0x40020428
 8003ce4:	40020440 	.word	0x40020440
 8003ce8:	40020458 	.word	0x40020458
 8003cec:	40020470 	.word	0x40020470
 8003cf0:	40020488 	.word	0x40020488
 8003cf4:	400204a0 	.word	0x400204a0
 8003cf8:	400204b8 	.word	0x400204b8
 8003cfc:	aaaaaaab 	.word	0xaaaaaaab
 8003d00:	0800d140 	.word	0x0800d140
 8003d04:	fffffc00 	.word	0xfffffc00

08003d08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d120      	bne.n	8003d5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d858      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xce>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <DMA_CheckFifoParam+0x24>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d4f 	.word	0x08003d4f
 8003d34:	08003d3d 	.word	0x08003d3d
 8003d38:	08003dd7 	.word	0x08003dd7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d048      	beq.n	8003dda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d4c:	e045      	b.n	8003dda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d56:	d142      	bne.n	8003dde <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d5c:	e03f      	b.n	8003dde <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	d123      	bne.n	8003db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d838      	bhi.n	8003de2 <DMA_CheckFifoParam+0xda>
 8003d70:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <DMA_CheckFifoParam+0x70>)
 8003d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d76:	bf00      	nop
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d8f 	.word	0x08003d8f
 8003d80:	08003d89 	.word	0x08003d89
 8003d84:	08003da1 	.word	0x08003da1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
        break;
 8003d8c:	e030      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d025      	beq.n	8003de6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003d9e:	e022      	b.n	8003de6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da8:	d11f      	bne.n	8003dea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dae:	e01c      	b.n	8003dea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d902      	bls.n	8003dbe <DMA_CheckFifoParam+0xb6>
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d003      	beq.n	8003dc4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003dbc:	e018      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
        break;
 8003dc2:	e015      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
    break;
 8003dd4:	e00b      	b.n	8003dee <DMA_CheckFifoParam+0xe6>
        break;
 8003dd6:	bf00      	nop
 8003dd8:	e00a      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dda:	bf00      	nop
 8003ddc:	e008      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dde:	bf00      	nop
 8003de0:	e006      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        break;
 8003de2:	bf00      	nop
 8003de4:	e004      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
        break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
    break;
 8003dee:	bf00      	nop
    }
  }

  return status;
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a38      	ldr	r2, [pc, #224]	; (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d022      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a36      	ldr	r2, [pc, #216]	; (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d01d      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a35      	ldr	r2, [pc, #212]	; (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d018      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a33      	ldr	r2, [pc, #204]	; (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d013      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a32      	ldr	r2, [pc, #200]	; (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00e      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d009      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2f      	ldr	r2, [pc, #188]	; (8003f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d004      	beq.n	8003e5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a2d      	ldr	r2, [pc, #180]	; (8003f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d101      	bne.n	8003e62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003e62:	2300      	movs	r3, #0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d01a      	beq.n	8003e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	3b08      	subs	r3, #8
 8003e70:	4a28      	ldr	r2, [pc, #160]	; (8003f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a24      	ldr	r2, [pc, #144]	; (8003f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003e8c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 031f 	and.w	r3, r3, #31
 8003e94:	2201      	movs	r2, #1
 8003e96:	409a      	lsls	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003e9c:	e024      	b.n	8003ee8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	3b10      	subs	r3, #16
 8003ea6:	4a1e      	ldr	r2, [pc, #120]	; (8003f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	; (8003f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d806      	bhi.n	8003ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	4a1b      	ldr	r2, [pc, #108]	; (8003f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d902      	bls.n	8003ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4b18      	ldr	r3, [pc, #96]	; (8003f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003eca:	4413      	add	r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	461a      	mov	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ed8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 031f 	and.w	r3, r3, #31
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	409a      	lsls	r2, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	58025408 	.word	0x58025408
 8003ef8:	5802541c 	.word	0x5802541c
 8003efc:	58025430 	.word	0x58025430
 8003f00:	58025444 	.word	0x58025444
 8003f04:	58025458 	.word	0x58025458
 8003f08:	5802546c 	.word	0x5802546c
 8003f0c:	58025480 	.word	0x58025480
 8003f10:	58025494 	.word	0x58025494
 8003f14:	cccccccd 	.word	0xcccccccd
 8003f18:	16009600 	.word	0x16009600
 8003f1c:	58025880 	.word	0x58025880
 8003f20:	aaaaaaab 	.word	0xaaaaaaab
 8003f24:	400204b8 	.word	0x400204b8
 8003f28:	4002040f 	.word	0x4002040f
 8003f2c:	10008200 	.word	0x10008200
 8003f30:	40020880 	.word	0x40020880

08003f34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d04a      	beq.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d847      	bhi.n	8003fe0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d022      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d01d      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a22      	ldr	r2, [pc, #136]	; (8003ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d018      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a21      	ldr	r2, [pc, #132]	; (8003ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d013      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	; (8003ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d00e      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d009      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d004      	beq.n	8003fa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1b      	ldr	r2, [pc, #108]	; (8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d101      	bne.n	8003fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e000      	b.n	8003fa6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4b17      	ldr	r3, [pc, #92]	; (800400c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a15      	ldr	r2, [pc, #84]	; (8004010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8003fbe:	e009      	b.n	8003fd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4b14      	ldr	r3, [pc, #80]	; (8004014 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a11      	ldr	r2, [pc, #68]	; (8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003fd2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	2201      	movs	r2, #1
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	58025408 	.word	0x58025408
 8003ff0:	5802541c 	.word	0x5802541c
 8003ff4:	58025430 	.word	0x58025430
 8003ff8:	58025444 	.word	0x58025444
 8003ffc:	58025458 	.word	0x58025458
 8004000:	5802546c 	.word	0x5802546c
 8004004:	58025480 	.word	0x58025480
 8004008:	58025494 	.word	0x58025494
 800400c:	1600963f 	.word	0x1600963f
 8004010:	58025940 	.word	0x58025940
 8004014:	1000823f 	.word	0x1000823f
 8004018:	40020940 	.word	0x40020940

0800401c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e0cf      	b.n	80041ce <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2223      	movs	r2, #35	; 0x23
 800403c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fc fe95 	bl	8000d70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004046:	4b64      	ldr	r3, [pc, #400]	; (80041d8 <HAL_ETH_Init+0x1bc>)
 8004048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800404c:	4a62      	ldr	r2, [pc, #392]	; (80041d8 <HAL_ETH_Init+0x1bc>)
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004056:	4b60      	ldr	r3, [pc, #384]	; (80041d8 <HAL_ETH_Init+0x1bc>)
 8004058:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7a1b      	ldrb	r3, [r3, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800406c:	2000      	movs	r0, #0
 800406e:	f7fd fb87 	bl	8001780 <HAL_SYSCFG_ETHInterfaceSelect>
 8004072:	e003      	b.n	800407c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004074:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004078:	f7fd fb82 	bl	8001780 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800407c:	4b57      	ldr	r3, [pc, #348]	; (80041dc <HAL_ETH_Init+0x1c0>)
 800407e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6812      	ldr	r2, [r2, #0]
 800408e:	f043 0301 	orr.w	r3, r3, #1
 8004092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004098:	f7fd fb36 	bl	8001708 <HAL_GetTick>
 800409c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800409e:	e011      	b.n	80040c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80040a0:	f7fd fb32 	bl	8001708 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040ae:	d909      	bls.n	80040c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2204      	movs	r2, #4
 80040b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	22e0      	movs	r2, #224	; 0xe0
 80040bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e084      	b.n	80041ce <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1e4      	bne.n	80040a0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f9d2 	bl	8004480 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80040dc:	f001 ffec 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 80040e0:	4603      	mov	r3, r0
 80040e2:	4a3f      	ldr	r2, [pc, #252]	; (80041e0 <HAL_ETH_Init+0x1c4>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	0c9a      	lsrs	r2, r3, #18
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3a01      	subs	r2, #1
 80040f0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fbbd 	bl	8004874 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004102:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004106:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004112:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004116:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	695b      	ldr	r3, [r3, #20]
 800411e:	f003 0303 	and.w	r3, r3, #3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d009      	beq.n	800413a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	22e0      	movs	r2, #224	; 0xe0
 8004132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e049      	b.n	80041ce <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004142:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004146:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <HAL_ETH_Init+0x1c8>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6952      	ldr	r2, [r2, #20]
 800414e:	0051      	lsls	r1, r2, #1
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6812      	ldr	r2, [r2, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800415a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fc25 	bl	80049ae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fc6b 	bl	8004a40 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	3305      	adds	r3, #5
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	021a      	lsls	r2, r3, #8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	4619      	mov	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	3303      	adds	r3, #3
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	061a      	lsls	r2, r3, #24
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	3302      	adds	r3, #2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	041b      	lsls	r3, r3, #16
 800419c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	3301      	adds	r3, #1
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80041b6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80041b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2210      	movs	r2, #16
 80041c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	58024400 	.word	0x58024400
 80041dc:	58000400 	.word	0x58000400
 80041e0:	431bde83 	.word	0x431bde83
 80041e4:	ffff8001 	.word	0xffff8001

080041e8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80041fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004200:	2b40      	cmp	r3, #64	; 0x40
 8004202:	d115      	bne.n	8004230 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	d10b      	bne.n	8004230 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004220:	461a      	mov	r2, r3
 8004222:	f248 0340 	movw	r3, #32832	; 0x8040
 8004226:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f8f6 	bl	800441c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004238:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d115      	bne.n	8004270 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10b      	bne.n	8004270 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004260:	461a      	mov	r2, r3
 8004262:	f248 0301 	movw	r3, #32769	; 0x8001
 8004266:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f8cc 	bl	8004408 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800427c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d153      	bne.n	800432e <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8004292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004296:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800429a:	d148      	bne.n	800432e <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f043 0208 	orr.w	r2, r3, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80042b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c0:	d11e      	bne.n	8004300 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ca:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 80042ce:	f241 1302 	movw	r3, #4354	; 0x1102
 80042d2:	4013      	ands	r3, r2
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80042ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042f2:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	22e0      	movs	r2, #224	; 0xe0
 80042fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80042fe:	e013      	b.n	8004328 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800430c:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431e:	461a      	mov	r2, r3
 8004320:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 8004324:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f881 	bl	8004430 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004336:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8004348:	2b00      	cmp	r3, #0
 800434a:	d019      	beq.n	8004380 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f043 0210 	orr.w	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	22e0      	movs	r2, #224	; 0xe0
 800436e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f85c 	bl	8004430 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	2b10      	cmp	r3, #16
 800438e:	d10f      	bne.n	80043b0 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004398:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 f84e 	bl	8004444 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043b8:	f003 0320 	and.w	r3, r3, #32
 80043bc:	2b20      	cmp	r3, #32
 80043be:	d10f      	bne.n	80043e0 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f840 	bl	8004458 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80043e0:	4b08      	ldr	r3, [pc, #32]	; (8004404 <HAL_ETH_IRQHandler+0x21c>)
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d006      	beq.n	80043fa <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_ETH_IRQHandler+0x21c>)
 80043ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f839 	bl	800446c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	58000080 	.word	0x58000080

08004408 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004490:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004498:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800449a:	f001 fe0d 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 800449e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a1e      	ldr	r2, [pc, #120]	; (800451c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d908      	bls.n	80044ba <HAL_ETH_SetMDIOClockRange+0x3a>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a1d      	ldr	r2, [pc, #116]	; (8004520 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d804      	bhi.n	80044ba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b6:	60fb      	str	r3, [r7, #12]
 80044b8:	e027      	b.n	800450a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4a18      	ldr	r2, [pc, #96]	; (8004520 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d908      	bls.n	80044d4 <HAL_ETH_SetMDIOClockRange+0x54>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4a17      	ldr	r2, [pc, #92]	; (8004524 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d204      	bcs.n	80044d4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e01a      	b.n	800450a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d303      	bcc.n	80044e4 <HAL_ETH_SetMDIOClockRange+0x64>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d911      	bls.n	8004508 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4a10      	ldr	r2, [pc, #64]	; (8004528 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d908      	bls.n	80044fe <HAL_ETH_SetMDIOClockRange+0x7e>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	4a0f      	ldr	r2, [pc, #60]	; (800452c <HAL_ETH_SetMDIOClockRange+0xac>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d804      	bhi.n	80044fe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	e005      	b.n	800450a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e000      	b.n	800450a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004508:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	01312cff 	.word	0x01312cff
 8004520:	02160ebf 	.word	0x02160ebf
 8004524:	03938700 	.word	0x03938700
 8004528:	05f5e0ff 	.word	0x05f5e0ff
 800452c:	08f0d17f 	.word	0x08f0d17f

08004530 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	791b      	ldrb	r3, [r3, #4]
 8004548:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800454a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	7b1b      	ldrb	r3, [r3, #12]
 8004550:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004552:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	7b5b      	ldrb	r3, [r3, #13]
 8004558:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800455a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	7b9b      	ldrb	r3, [r3, #14]
 8004560:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004562:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	7bdb      	ldrb	r3, [r3, #15]
 8004568:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800456a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	7c12      	ldrb	r2, [r2, #16]
 8004570:	2a00      	cmp	r2, #0
 8004572:	d102      	bne.n	800457a <ETH_SetMACConfig+0x4a>
 8004574:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004578:	e000      	b.n	800457c <ETH_SetMACConfig+0x4c>
 800457a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800457c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	7c52      	ldrb	r2, [r2, #17]
 8004582:	2a00      	cmp	r2, #0
 8004584:	d102      	bne.n	800458c <ETH_SetMACConfig+0x5c>
 8004586:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800458a:	e000      	b.n	800458e <ETH_SetMACConfig+0x5e>
 800458c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800458e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	7c9b      	ldrb	r3, [r3, #18]
 8004594:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004596:	431a      	orrs	r2, r3
               macconf->Speed |
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800459c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80045a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	7f1b      	ldrb	r3, [r3, #28]
 80045a8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80045aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	7f5b      	ldrb	r3, [r3, #29]
 80045b0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80045b2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	7f92      	ldrb	r2, [r2, #30]
 80045b8:	2a00      	cmp	r2, #0
 80045ba:	d102      	bne.n	80045c2 <ETH_SetMACConfig+0x92>
 80045bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80045c0:	e000      	b.n	80045c4 <ETH_SetMACConfig+0x94>
 80045c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80045c4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	7fdb      	ldrb	r3, [r3, #31]
 80045ca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80045cc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80045d4:	2a00      	cmp	r2, #0
 80045d6:	d102      	bne.n	80045de <ETH_SetMACConfig+0xae>
 80045d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045dc:	e000      	b.n	80045e0 <ETH_SetMACConfig+0xb0>
 80045de:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80045e0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80045e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80045f0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	4b56      	ldr	r3, [pc, #344]	; (800475c <ETH_SetMACConfig+0x22c>)
 8004602:	4013      	ands	r3, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	68f9      	ldr	r1, [r7, #12]
 800460a:	430b      	orrs	r3, r1
 800460c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004612:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800461a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800461c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004624:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004626:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800462e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004630:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004638:	2a00      	cmp	r2, #0
 800463a:	d102      	bne.n	8004642 <ETH_SetMACConfig+0x112>
 800463c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004640:	e000      	b.n	8004644 <ETH_SetMACConfig+0x114>
 8004642:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004644:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <ETH_SetMACConfig+0x230>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	68f9      	ldr	r1, [r7, #12]
 800465e:	430b      	orrs	r3, r1
 8004660:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004668:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	4b3a      	ldr	r3, [pc, #232]	; (8004764 <ETH_SetMACConfig+0x234>)
 800467a:	4013      	ands	r3, r2
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	68f9      	ldr	r1, [r7, #12]
 8004682:	430b      	orrs	r3, r1
 8004684:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800468c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004692:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800469a:	2a00      	cmp	r2, #0
 800469c:	d101      	bne.n	80046a2 <ETH_SetMACConfig+0x172>
 800469e:	2280      	movs	r2, #128	; 0x80
 80046a0:	e000      	b.n	80046a4 <ETH_SetMACConfig+0x174>
 80046a2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80046a4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046aa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046b6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80046ba:	4013      	ands	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6812      	ldr	r2, [r2, #0]
 80046c0:	68f9      	ldr	r1, [r7, #12]
 80046c2:	430b      	orrs	r3, r1
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80046cc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80046d4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e2:	f023 0103 	bic.w	r1, r3, #3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80046fa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004716:	2a00      	cmp	r2, #0
 8004718:	d101      	bne.n	800471e <ETH_SetMACConfig+0x1ee>
 800471a:	2240      	movs	r2, #64	; 0x40
 800471c:	e000      	b.n	8004720 <ETH_SetMACConfig+0x1f0>
 800471e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004720:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004728:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800472a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004732:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004734:	4313      	orrs	r3, r2
 8004736:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004740:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	430a      	orrs	r2, r1
 800474c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	00048083 	.word	0x00048083
 8004760:	c0f88000 	.word	0xc0f88000
 8004764:	fffffef0 	.word	0xfffffef0

08004768 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b38      	ldr	r3, [pc, #224]	; (8004860 <ETH_SetDMAConfig+0xf8>)
 800477e:	4013      	ands	r3, r2
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	6811      	ldr	r1, [r2, #0]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	430b      	orrs	r3, r1
 800478a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800478e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	791b      	ldrb	r3, [r3, #4]
 8004794:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800479a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	7b1b      	ldrb	r3, [r3, #12]
 80047a0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	4b2c      	ldr	r3, [pc, #176]	; (8004864 <ETH_SetDMAConfig+0xfc>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	68f9      	ldr	r1, [r7, #12]
 80047ba:	430b      	orrs	r3, r1
 80047bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	7b5b      	ldrb	r3, [r3, #13]
 80047c6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80047dc:	4b22      	ldr	r3, [pc, #136]	; (8004868 <ETH_SetDMAConfig+0x100>)
 80047de:	4013      	ands	r3, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	68f9      	ldr	r1, [r7, #12]
 80047e6:	430b      	orrs	r3, r1
 80047e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047ec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	7d1b      	ldrb	r3, [r3, #20]
 80047f8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80047fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	7f5b      	ldrb	r3, [r3, #29]
 8004800:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004812:	4b16      	ldr	r3, [pc, #88]	; (800486c <ETH_SetDMAConfig+0x104>)
 8004814:	4013      	ands	r3, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	68f9      	ldr	r1, [r7, #12]
 800481c:	430b      	orrs	r3, r1
 800481e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004822:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	7f1b      	ldrb	r3, [r3, #28]
 800482a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004830:	4313      	orrs	r3, r2
 8004832:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <ETH_SetDMAConfig+0x108>)
 8004842:	4013      	ands	r3, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6812      	ldr	r2, [r2, #0]
 8004848:	68f9      	ldr	r1, [r7, #12]
 800484a:	430b      	orrs	r3, r1
 800484c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004850:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr
 8004860:	ffff87fd 	.word	0xffff87fd
 8004864:	ffff2ffe 	.word	0xffff2ffe
 8004868:	fffec000 	.word	0xfffec000
 800486c:	ffc0efef 	.word	0xffc0efef
 8004870:	7fc0ffff 	.word	0x7fc0ffff

08004874 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b0a4      	sub	sp, #144	; 0x90
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800487c:	2301      	movs	r3, #1
 800487e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004882:	2300      	movs	r3, #0
 8004884:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004886:	2300      	movs	r3, #0
 8004888:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800488c:	2300      	movs	r3, #0
 800488e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800489e:	2301      	movs	r3, #1
 80048a0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80048aa:	2301      	movs	r3, #1
 80048ac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80048b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80048b6:	2300      	movs	r3, #0
 80048b8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80048bc:	2300      	movs	r3, #0
 80048be:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80048cc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80048d0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80048d8:	2300      	movs	r3, #0
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80048ee:	2300      	movs	r3, #0
 80048f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80048f6:	2300      	movs	r3, #0
 80048f8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004900:	2300      	movs	r3, #0
 8004902:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800490c:	2320      	movs	r3, #32
 800490e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004912:	2301      	movs	r3, #1
 8004914:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004918:	2300      	movs	r3, #0
 800491a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800491e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004922:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004924:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800492a:	2300      	movs	r3, #0
 800492c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004930:	2302      	movs	r3, #2
 8004932:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004942:	2300      	movs	r3, #0
 8004944:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004948:	2301      	movs	r3, #1
 800494a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800494e:	2300      	movs	r3, #0
 8004950:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004952:	2301      	movs	r3, #1
 8004954:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fde6 	bl	8004530 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004964:	2301      	movs	r3, #1
 8004966:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004968:	2301      	movs	r3, #1
 800496a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800496c:	2300      	movs	r3, #0
 800496e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004976:	2300      	movs	r3, #0
 8004978:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800497a:	2300      	movs	r3, #0
 800497c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800497e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004982:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004984:	2300      	movs	r3, #0
 8004986:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004988:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800498c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800498e:	2300      	movs	r3, #0
 8004990:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004994:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004998:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fee1 	bl	8004768 <ETH_SetDMAConfig>
}
 80049a6:	bf00      	nop
 80049a8:	3790      	adds	r7, #144	; 0x90
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]
 80049ba:	e01d      	b.n	80049f8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68d9      	ldr	r1, [r3, #12]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4613      	mov	r3, r2
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	4413      	add	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	440b      	add	r3, r1
 80049cc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2200      	movs	r2, #0
 80049de:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80049e6:	68b9      	ldr	r1, [r7, #8]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	3206      	adds	r2, #6
 80049ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3301      	adds	r3, #1
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d9de      	bls.n	80049bc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	2303      	movs	r3, #3
 8004a10:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a20:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a30:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	e023      	b.n	8004a96 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4613      	mov	r3, r2
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	3212      	adds	r2, #18
 8004a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d9d8      	bls.n	8004a4e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691a      	ldr	r2, [r3, #16]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b089      	sub	sp, #36	; 0x24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004b0a:	4b89      	ldr	r3, [pc, #548]	; (8004d30 <HAL_GPIO_Init+0x234>)
 8004b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004b0e:	e194      	b.n	8004e3a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	2101      	movs	r1, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa01 f303 	lsl.w	r3, r1, r3
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 8186 	beq.w	8004e34 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d005      	beq.n	8004b40 <HAL_GPIO_Init+0x44>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d130      	bne.n	8004ba2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b76:	2201      	movs	r2, #1
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7e:	43db      	mvns	r3, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4013      	ands	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	f003 0201 	and.w	r2, r3, #1
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d017      	beq.n	8004bde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	2203      	movs	r2, #3
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d123      	bne.n	8004c32 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	08da      	lsrs	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3208      	adds	r2, #8
 8004bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	220f      	movs	r2, #15
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0307 	and.w	r3, r3, #7
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	08da      	lsrs	r2, r3, #3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3208      	adds	r2, #8
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43db      	mvns	r3, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4013      	ands	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f003 0203 	and.w	r2, r3, #3
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 80e0 	beq.w	8004e34 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c74:	4b2f      	ldr	r3, [pc, #188]	; (8004d34 <HAL_GPIO_Init+0x238>)
 8004c76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c7a:	4a2e      	ldr	r2, [pc, #184]	; (8004d34 <HAL_GPIO_Init+0x238>)
 8004c7c:	f043 0302 	orr.w	r3, r3, #2
 8004c80:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c84:	4b2b      	ldr	r3, [pc, #172]	; (8004d34 <HAL_GPIO_Init+0x238>)
 8004c86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c92:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <HAL_GPIO_Init+0x23c>)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	3302      	adds	r3, #2
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	220f      	movs	r2, #15
 8004caa:	fa02 f303 	lsl.w	r3, r2, r3
 8004cae:	43db      	mvns	r3, r3
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <HAL_GPIO_Init+0x240>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d052      	beq.n	8004d64 <HAL_GPIO_Init+0x268>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <HAL_GPIO_Init+0x244>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d031      	beq.n	8004d2a <HAL_GPIO_Init+0x22e>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <HAL_GPIO_Init+0x248>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02b      	beq.n	8004d26 <HAL_GPIO_Init+0x22a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a1d      	ldr	r2, [pc, #116]	; (8004d48 <HAL_GPIO_Init+0x24c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d025      	beq.n	8004d22 <HAL_GPIO_Init+0x226>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a1c      	ldr	r2, [pc, #112]	; (8004d4c <HAL_GPIO_Init+0x250>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d01f      	beq.n	8004d1e <HAL_GPIO_Init+0x222>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a1b      	ldr	r2, [pc, #108]	; (8004d50 <HAL_GPIO_Init+0x254>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d019      	beq.n	8004d1a <HAL_GPIO_Init+0x21e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <HAL_GPIO_Init+0x258>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d013      	beq.n	8004d16 <HAL_GPIO_Init+0x21a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <HAL_GPIO_Init+0x25c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d00d      	beq.n	8004d12 <HAL_GPIO_Init+0x216>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a18      	ldr	r2, [pc, #96]	; (8004d5c <HAL_GPIO_Init+0x260>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d007      	beq.n	8004d0e <HAL_GPIO_Init+0x212>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <HAL_GPIO_Init+0x264>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d101      	bne.n	8004d0a <HAL_GPIO_Init+0x20e>
 8004d06:	2309      	movs	r3, #9
 8004d08:	e02d      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d0a:	230a      	movs	r3, #10
 8004d0c:	e02b      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	e029      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d12:	2307      	movs	r3, #7
 8004d14:	e027      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d16:	2306      	movs	r3, #6
 8004d18:	e025      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d1a:	2305      	movs	r3, #5
 8004d1c:	e023      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d1e:	2304      	movs	r3, #4
 8004d20:	e021      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d22:	2303      	movs	r3, #3
 8004d24:	e01f      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e01d      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e01b      	b.n	8004d66 <HAL_GPIO_Init+0x26a>
 8004d2e:	bf00      	nop
 8004d30:	58000080 	.word	0x58000080
 8004d34:	58024400 	.word	0x58024400
 8004d38:	58000400 	.word	0x58000400
 8004d3c:	58020000 	.word	0x58020000
 8004d40:	58020400 	.word	0x58020400
 8004d44:	58020800 	.word	0x58020800
 8004d48:	58020c00 	.word	0x58020c00
 8004d4c:	58021000 	.word	0x58021000
 8004d50:	58021400 	.word	0x58021400
 8004d54:	58021800 	.word	0x58021800
 8004d58:	58021c00 	.word	0x58021c00
 8004d5c:	58022000 	.word	0x58022000
 8004d60:	58022400 	.word	0x58022400
 8004d64:	2300      	movs	r3, #0
 8004d66:	69fa      	ldr	r2, [r7, #28]
 8004d68:	f002 0203 	and.w	r2, r2, #3
 8004d6c:	0092      	lsls	r2, r2, #2
 8004d6e:	4093      	lsls	r3, r2
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d76:	4938      	ldr	r1, [pc, #224]	; (8004e58 <HAL_GPIO_Init+0x35c>)
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dae:	69bb      	ldr	r3, [r7, #24]
 8004db0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004db2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004dd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	43db      	mvns	r3, r3
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	4013      	ands	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	43db      	mvns	r3, r3
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	4013      	ands	r3, r2
 8004e18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f ae63 	bne.w	8004b10 <HAL_GPIO_Init+0x14>
  }
}
 8004e4a:	bf00      	nop
 8004e4c:	bf00      	nop
 8004e4e:	3724      	adds	r7, #36	; 0x24
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	58000400 	.word	0x58000400

08004e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	807b      	strh	r3, [r7, #2]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e6c:	787b      	ldrb	r3, [r7, #1]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e72:	887a      	ldrh	r2, [r7, #2]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e78:	e003      	b.n	8004e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	041a      	lsls	r2, r3, #16
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	619a      	str	r2, [r3, #24]
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	4603      	mov	r3, r0
 8004e96:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ea0:	88fb      	ldrh	r3, [r7, #6]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f804 	bl	8004ec2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	4603      	mov	r3, r0
 8004eca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eda:	b08f      	sub	sp, #60	; 0x3c
 8004edc:	af0a      	add	r7, sp, #40	; 0x28
 8004ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e116      	b.n	8005118 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d106      	bne.n	8004f0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f7fc f91b 	bl	8001140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2203      	movs	r2, #3
 8004f0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f004 ffd9 	bl	8009ee0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	687e      	ldr	r6, [r7, #4]
 8004f36:	466d      	mov	r5, sp
 8004f38:	f106 0410 	add.w	r4, r6, #16
 8004f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f4c:	1d33      	adds	r3, r6, #4
 8004f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f50:	6838      	ldr	r0, [r7, #0]
 8004f52:	f004 ff57 	bl	8009e04 <USB_CoreInit>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e0d7      	b.n	8005118 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f004 ffc7 	bl	8009f02 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e04a      	b.n	8005010 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004f7a:	7bfa      	ldrb	r2, [r7, #15]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	333d      	adds	r3, #61	; 0x3d
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004f8e:	7bfa      	ldrb	r2, [r7, #15]
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	4613      	mov	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	440b      	add	r3, r1
 8004f9c:	333c      	adds	r3, #60	; 0x3c
 8004f9e:	7bfa      	ldrb	r2, [r7, #15]
 8004fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004fa2:	7bfa      	ldrb	r2, [r7, #15]
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	b298      	uxth	r0, r3
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	3344      	adds	r3, #68	; 0x44
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004fba:	7bfa      	ldrb	r2, [r7, #15]
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	3340      	adds	r3, #64	; 0x40
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004fce:	7bfa      	ldrb	r2, [r7, #15]
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	440b      	add	r3, r1
 8004fdc:	3348      	adds	r3, #72	; 0x48
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004fe2:	7bfa      	ldrb	r2, [r7, #15]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	334c      	adds	r3, #76	; 0x4c
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ff6:	7bfa      	ldrb	r2, [r7, #15]
 8004ff8:	6879      	ldr	r1, [r7, #4]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4413      	add	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	440b      	add	r3, r1
 8005004:	3354      	adds	r3, #84	; 0x54
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	3301      	adds	r3, #1
 800500e:	73fb      	strb	r3, [r7, #15]
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	429a      	cmp	r2, r3
 8005018:	d3af      	bcc.n	8004f7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
 800501e:	e044      	b.n	80050aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005020:	7bfa      	ldrb	r2, [r7, #15]
 8005022:	6879      	ldr	r1, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005036:	7bfa      	ldrb	r2, [r7, #15]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	440b      	add	r3, r1
 8005044:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005048:	7bfa      	ldrb	r2, [r7, #15]
 800504a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800504c:	7bfa      	ldrb	r2, [r7, #15]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005062:	7bfa      	ldrb	r2, [r7, #15]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005078:	7bfa      	ldrb	r2, [r7, #15]
 800507a:	6879      	ldr	r1, [r7, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	6879      	ldr	r1, [r7, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
 80050a6:	3301      	adds	r3, #1
 80050a8:	73fb      	strb	r3, [r7, #15]
 80050aa:	7bfa      	ldrb	r2, [r7, #15]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d3b5      	bcc.n	8005020 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	603b      	str	r3, [r7, #0]
 80050ba:	687e      	ldr	r6, [r7, #4]
 80050bc:	466d      	mov	r5, sp
 80050be:	f106 0410 	add.w	r4, r6, #16
 80050c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80050d2:	1d33      	adds	r3, r6, #4
 80050d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050d6:	6838      	ldr	r0, [r7, #0]
 80050d8:	f004 ff60 	bl	8009f9c <USB_DevInit>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d005      	beq.n	80050ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e014      	b.n	8005118 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b01      	cmp	r3, #1
 8005104:	d102      	bne.n	800510c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f80a 	bl	8005120 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f005 f91e 	bl	800a352 <USB_DevDisconnect>

  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800514e:	4b05      	ldr	r3, [pc, #20]	; (8005164 <HAL_PCDEx_ActivateLPM+0x44>)
 8005150:	4313      	orrs	r3, r2
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	10000003 	.word	0x10000003

08005168 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005170:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_PWREx_ConfigSupply+0x70>)
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b04      	cmp	r3, #4
 800517a:	d00a      	beq.n	8005192 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800517c:	4b16      	ldr	r3, [pc, #88]	; (80051d8 <HAL_PWREx_ConfigSupply+0x70>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0307 	and.w	r3, r3, #7
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d001      	beq.n	800518e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e01f      	b.n	80051ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800518e:	2300      	movs	r3, #0
 8005190:	e01d      	b.n	80051ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005192:	4b11      	ldr	r3, [pc, #68]	; (80051d8 <HAL_PWREx_ConfigSupply+0x70>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f023 0207 	bic.w	r2, r3, #7
 800519a:	490f      	ldr	r1, [pc, #60]	; (80051d8 <HAL_PWREx_ConfigSupply+0x70>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80051a2:	f7fc fab1 	bl	8001708 <HAL_GetTick>
 80051a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051a8:	e009      	b.n	80051be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80051aa:	f7fc faad 	bl	8001708 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051b8:	d901      	bls.n	80051be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e007      	b.n	80051ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <HAL_PWREx_ConfigSupply+0x70>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ca:	d1ee      	bne.n	80051aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	58024800 	.word	0x58024800

080051dc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a04      	ldr	r2, [pc, #16]	; (80051f8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80051e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ea:	60d3      	str	r3, [r2, #12]
}
 80051ec:	bf00      	nop
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	58024800 	.word	0x58024800

080051fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b08c      	sub	sp, #48	; 0x30
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d102      	bne.n	8005210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	f000 bc1d 	b.w	8005a4a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8087 	beq.w	800532c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521e:	4b99      	ldr	r3, [pc, #612]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005228:	4b96      	ldr	r3, [pc, #600]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800522e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005230:	2b10      	cmp	r3, #16
 8005232:	d007      	beq.n	8005244 <HAL_RCC_OscConfig+0x48>
 8005234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005236:	2b18      	cmp	r3, #24
 8005238:	d110      	bne.n	800525c <HAL_RCC_OscConfig+0x60>
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d10b      	bne.n	800525c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	4b8f      	ldr	r3, [pc, #572]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d06c      	beq.n	800532a <HAL_RCC_OscConfig+0x12e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d168      	bne.n	800532a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e3f6      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d106      	bne.n	8005274 <HAL_RCC_OscConfig+0x78>
 8005266:	4b87      	ldr	r3, [pc, #540]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a86      	ldr	r2, [pc, #536]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800526c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e02e      	b.n	80052d2 <HAL_RCC_OscConfig+0xd6>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10c      	bne.n	8005296 <HAL_RCC_OscConfig+0x9a>
 800527c:	4b81      	ldr	r3, [pc, #516]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a80      	ldr	r2, [pc, #512]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	4b7e      	ldr	r3, [pc, #504]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a7d      	ldr	r2, [pc, #500]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800528e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005292:	6013      	str	r3, [r2, #0]
 8005294:	e01d      	b.n	80052d2 <HAL_RCC_OscConfig+0xd6>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800529e:	d10c      	bne.n	80052ba <HAL_RCC_OscConfig+0xbe>
 80052a0:	4b78      	ldr	r3, [pc, #480]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a77      	ldr	r2, [pc, #476]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	4b75      	ldr	r3, [pc, #468]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a74      	ldr	r2, [pc, #464]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b6:	6013      	str	r3, [r2, #0]
 80052b8:	e00b      	b.n	80052d2 <HAL_RCC_OscConfig+0xd6>
 80052ba:	4b72      	ldr	r3, [pc, #456]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a71      	ldr	r2, [pc, #452]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a6e      	ldr	r2, [pc, #440]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d013      	beq.n	8005302 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052da:	f7fc fa15 	bl	8001708 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e2:	f7fc fa11 	bl	8001708 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b64      	cmp	r3, #100	; 0x64
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e3aa      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052f4:	4b63      	ldr	r3, [pc, #396]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0f0      	beq.n	80052e2 <HAL_RCC_OscConfig+0xe6>
 8005300:	e014      	b.n	800532c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005302:	f7fc fa01 	bl	8001708 <HAL_GetTick>
 8005306:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800530a:	f7fc f9fd 	bl	8001708 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b64      	cmp	r3, #100	; 0x64
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e396      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800531c:	4b59      	ldr	r3, [pc, #356]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f0      	bne.n	800530a <HAL_RCC_OscConfig+0x10e>
 8005328:	e000      	b.n	800532c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800532a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80cb 	beq.w	80054d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800533a:	4b52      	ldr	r3, [pc, #328]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005342:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005344:	4b4f      	ldr	r3, [pc, #316]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_RCC_OscConfig+0x164>
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	2b18      	cmp	r3, #24
 8005354:	d156      	bne.n	8005404 <HAL_RCC_OscConfig+0x208>
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d151      	bne.n	8005404 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005360:	4b48      	ldr	r3, [pc, #288]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_OscConfig+0x17c>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e368      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005378:	4b42      	ldr	r3, [pc, #264]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 0219 	bic.w	r2, r3, #25
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	493f      	ldr	r1, [pc, #252]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800538a:	f7fc f9bd 	bl	8001708 <HAL_GetTick>
 800538e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005392:	f7fc f9b9 	bl	8001708 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e352      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a4:	4b37      	ldr	r3, [pc, #220]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0304 	and.w	r3, r3, #4
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b0:	f7fc f9da 	bl	8001768 <HAL_GetREVID>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d817      	bhi.n	80053ee <HAL_RCC_OscConfig+0x1f2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d108      	bne.n	80053d8 <HAL_RCC_OscConfig+0x1dc>
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80053ce:	4a2d      	ldr	r2, [pc, #180]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053d6:	e07b      	b.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d8:	4b2a      	ldr	r3, [pc, #168]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	031b      	lsls	r3, r3, #12
 80053e6:	4927      	ldr	r1, [pc, #156]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053ec:	e070      	b.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ee:	4b25      	ldr	r3, [pc, #148]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	061b      	lsls	r3, r3, #24
 80053fc:	4921      	ldr	r1, [pc, #132]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005402:	e065      	b.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d048      	beq.n	800549e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f023 0219 	bic.w	r2, r3, #25
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	491a      	ldr	r1, [pc, #104]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800541a:	4313      	orrs	r3, r2
 800541c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fc f973 	bl	8001708 <HAL_GetTick>
 8005422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005426:	f7fc f96f 	bl	8001708 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e308      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005438:	4b12      	ldr	r3, [pc, #72]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0304 	and.w	r3, r3, #4
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	f7fc f990 	bl	8001768 <HAL_GetREVID>
 8005448:	4603      	mov	r3, r0
 800544a:	f241 0203 	movw	r2, #4099	; 0x1003
 800544e:	4293      	cmp	r3, r2
 8005450:	d81a      	bhi.n	8005488 <HAL_RCC_OscConfig+0x28c>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d108      	bne.n	800546c <HAL_RCC_OscConfig+0x270>
 800545a:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005462:	4a08      	ldr	r2, [pc, #32]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 8005464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005468:	6053      	str	r3, [r2, #4]
 800546a:	e031      	b.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	031b      	lsls	r3, r3, #12
 800547a:	4902      	ldr	r1, [pc, #8]	; (8005484 <HAL_RCC_OscConfig+0x288>)
 800547c:	4313      	orrs	r3, r2
 800547e:	604b      	str	r3, [r1, #4]
 8005480:	e026      	b.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
 8005482:	bf00      	nop
 8005484:	58024400 	.word	0x58024400
 8005488:	4b9a      	ldr	r3, [pc, #616]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	061b      	lsls	r3, r3, #24
 8005496:	4997      	ldr	r1, [pc, #604]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005498:	4313      	orrs	r3, r2
 800549a:	604b      	str	r3, [r1, #4]
 800549c:	e018      	b.n	80054d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549e:	4b95      	ldr	r3, [pc, #596]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a94      	ldr	r2, [pc, #592]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054aa:	f7fc f92d 	bl	8001708 <HAL_GetTick>
 80054ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054b0:	e008      	b.n	80054c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054b2:	f7fc f929 	bl	8001708 <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d901      	bls.n	80054c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e2c2      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80054c4:	4b8b      	ldr	r3, [pc, #556]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1f0      	bne.n	80054b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80a9 	beq.w	8005630 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054de:	4b85      	ldr	r3, [pc, #532]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054e8:	4b82      	ldr	r3, [pc, #520]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80054ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d007      	beq.n	8005504 <HAL_RCC_OscConfig+0x308>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b18      	cmp	r3, #24
 80054f8:	d13a      	bne.n	8005570 <HAL_RCC_OscConfig+0x374>
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f003 0303 	and.w	r3, r3, #3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d135      	bne.n	8005570 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005504:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x320>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d001      	beq.n	800551c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e296      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800551c:	f7fc f924 	bl	8001768 <HAL_GetREVID>
 8005520:	4603      	mov	r3, r0
 8005522:	f241 0203 	movw	r2, #4099	; 0x1003
 8005526:	4293      	cmp	r3, r2
 8005528:	d817      	bhi.n	800555a <HAL_RCC_OscConfig+0x35e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	2b20      	cmp	r3, #32
 8005530:	d108      	bne.n	8005544 <HAL_RCC_OscConfig+0x348>
 8005532:	4b70      	ldr	r3, [pc, #448]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800553a:	4a6e      	ldr	r2, [pc, #440]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800553c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005540:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005542:	e075      	b.n	8005630 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005544:	4b6b      	ldr	r3, [pc, #428]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	069b      	lsls	r3, r3, #26
 8005552:	4968      	ldr	r1, [pc, #416]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005554:	4313      	orrs	r3, r2
 8005556:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005558:	e06a      	b.n	8005630 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800555a:	4b66      	ldr	r3, [pc, #408]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	4962      	ldr	r1, [pc, #392]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800556a:	4313      	orrs	r3, r2
 800556c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800556e:	e05f      	b.n	8005630 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d042      	beq.n	80055fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005578:	4b5e      	ldr	r3, [pc, #376]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a5d      	ldr	r2, [pc, #372]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800557e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005584:	f7fc f8c0 	bl	8001708 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800558c:	f7fc f8bc 	bl	8001708 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e255      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800559e:	4b55      	ldr	r3, [pc, #340]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80055aa:	f7fc f8dd 	bl	8001768 <HAL_GetREVID>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d817      	bhi.n	80055e8 <HAL_RCC_OscConfig+0x3ec>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d108      	bne.n	80055d2 <HAL_RCC_OscConfig+0x3d6>
 80055c0:	4b4c      	ldr	r3, [pc, #304]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80055c8:	4a4a      	ldr	r2, [pc, #296]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ce:	6053      	str	r3, [r2, #4]
 80055d0:	e02e      	b.n	8005630 <HAL_RCC_OscConfig+0x434>
 80055d2:	4b48      	ldr	r3, [pc, #288]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	069b      	lsls	r3, r3, #26
 80055e0:	4944      	ldr	r1, [pc, #272]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	604b      	str	r3, [r1, #4]
 80055e6:	e023      	b.n	8005630 <HAL_RCC_OscConfig+0x434>
 80055e8:	4b42      	ldr	r3, [pc, #264]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	061b      	lsls	r3, r3, #24
 80055f6:	493f      	ldr	r1, [pc, #252]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60cb      	str	r3, [r1, #12]
 80055fc:	e018      	b.n	8005630 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80055fe:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a3c      	ldr	r2, [pc, #240]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005608:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560a:	f7fc f87d 	bl	8001708 <HAL_GetTick>
 800560e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005610:	e008      	b.n	8005624 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005612:	f7fc f879 	bl	8001708 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	2b02      	cmp	r3, #2
 800561e:	d901      	bls.n	8005624 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e212      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005624:	4b33      	ldr	r3, [pc, #204]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1f0      	bne.n	8005612 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0308 	and.w	r3, r3, #8
 8005638:	2b00      	cmp	r3, #0
 800563a:	d036      	beq.n	80056aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	695b      	ldr	r3, [r3, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d019      	beq.n	8005678 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005644:	4b2b      	ldr	r3, [pc, #172]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 8005646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005648:	4a2a      	ldr	r2, [pc, #168]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800564a:	f043 0301 	orr.w	r3, r3, #1
 800564e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fc f85a 	bl	8001708 <HAL_GetTick>
 8005654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005658:	f7fc f856 	bl	8001708 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e1ef      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x45c>
 8005676:	e018      	b.n	80056aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005678:	4b1e      	ldr	r3, [pc, #120]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800567a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800567c:	4a1d      	ldr	r2, [pc, #116]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fc f840 	bl	8001708 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800568c:	f7fc f83c 	bl	8001708 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e1d5      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80056a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f0      	bne.n	800568c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d039      	beq.n	800572a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d01c      	beq.n	80056f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056be:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a0c      	ldr	r2, [pc, #48]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80056c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80056ca:	f7fc f81d 	bl	8001708 <HAL_GetTick>
 80056ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80056d2:	f7fc f819 	bl	8001708 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1b2      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80056e4:	4b03      	ldr	r3, [pc, #12]	; (80056f4 <HAL_RCC_OscConfig+0x4f8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x4d6>
 80056f0:	e01b      	b.n	800572a <HAL_RCC_OscConfig+0x52e>
 80056f2:	bf00      	nop
 80056f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056f8:	4b9b      	ldr	r3, [pc, #620]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a9a      	ldr	r2, [pc, #616]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80056fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005702:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005704:	f7fc f800 	bl	8001708 <HAL_GetTick>
 8005708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800570a:	e008      	b.n	800571e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800570c:	f7fb fffc 	bl	8001708 <HAL_GetTick>
 8005710:	4602      	mov	r2, r0
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	2b02      	cmp	r3, #2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e195      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800571e:	4b92      	ldr	r3, [pc, #584]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1f0      	bne.n	800570c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0304 	and.w	r3, r3, #4
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 8081 	beq.w	800583a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005738:	4b8c      	ldr	r3, [pc, #560]	; (800596c <HAL_RCC_OscConfig+0x770>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a8b      	ldr	r2, [pc, #556]	; (800596c <HAL_RCC_OscConfig+0x770>)
 800573e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005742:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005744:	f7fb ffe0 	bl	8001708 <HAL_GetTick>
 8005748:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800574c:	f7fb ffdc 	bl	8001708 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e175      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800575e:	4b83      	ldr	r3, [pc, #524]	; (800596c <HAL_RCC_OscConfig+0x770>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d106      	bne.n	8005780 <HAL_RCC_OscConfig+0x584>
 8005772:	4b7d      	ldr	r3, [pc, #500]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005776:	4a7c      	ldr	r2, [pc, #496]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	6713      	str	r3, [r2, #112]	; 0x70
 800577e:	e02d      	b.n	80057dc <HAL_RCC_OscConfig+0x5e0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10c      	bne.n	80057a2 <HAL_RCC_OscConfig+0x5a6>
 8005788:	4b77      	ldr	r3, [pc, #476]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a76      	ldr	r2, [pc, #472]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800578e:	f023 0301 	bic.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	4b74      	ldr	r3, [pc, #464]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	4a73      	ldr	r2, [pc, #460]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800579a:	f023 0304 	bic.w	r3, r3, #4
 800579e:	6713      	str	r3, [r2, #112]	; 0x70
 80057a0:	e01c      	b.n	80057dc <HAL_RCC_OscConfig+0x5e0>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	d10c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x5c8>
 80057aa:	4b6f      	ldr	r3, [pc, #444]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	4a6e      	ldr	r2, [pc, #440]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057b0:	f043 0304 	orr.w	r3, r3, #4
 80057b4:	6713      	str	r3, [r2, #112]	; 0x70
 80057b6:	4b6c      	ldr	r3, [pc, #432]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a6b      	ldr	r2, [pc, #428]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057bc:	f043 0301 	orr.w	r3, r3, #1
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
 80057c2:	e00b      	b.n	80057dc <HAL_RCC_OscConfig+0x5e0>
 80057c4:	4b68      	ldr	r3, [pc, #416]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a67      	ldr	r2, [pc, #412]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057ca:	f023 0301 	bic.w	r3, r3, #1
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
 80057d0:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a64      	ldr	r2, [pc, #400]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80057d6:	f023 0304 	bic.w	r3, r3, #4
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d015      	beq.n	8005810 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e4:	f7fb ff90 	bl	8001708 <HAL_GetTick>
 80057e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80057ea:	e00a      	b.n	8005802 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057ec:	f7fb ff8c 	bl	8001708 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e123      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005802:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ee      	beq.n	80057ec <HAL_RCC_OscConfig+0x5f0>
 800580e:	e014      	b.n	800583a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005810:	f7fb ff7a 	bl	8001708 <HAL_GetTick>
 8005814:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005816:	e00a      	b.n	800582e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005818:	f7fb ff76 	bl	8001708 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	f241 3288 	movw	r2, #5000	; 0x1388
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e10d      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800582e:	4b4e      	ldr	r3, [pc, #312]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	f003 0302 	and.w	r3, r3, #2
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1ee      	bne.n	8005818 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 8102 	beq.w	8005a48 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005844:	4b48      	ldr	r3, [pc, #288]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800584c:	2b18      	cmp	r3, #24
 800584e:	f000 80bd 	beq.w	80059cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b02      	cmp	r3, #2
 8005858:	f040 809e 	bne.w	8005998 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585c:	4b42      	ldr	r3, [pc, #264]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a41      	ldr	r2, [pc, #260]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005868:	f7fb ff4e 	bl	8001708 <HAL_GetTick>
 800586c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005870:	f7fb ff4a 	bl	8001708 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e0e3      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005882:	4b39      	ldr	r3, [pc, #228]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588e:	4b36      	ldr	r3, [pc, #216]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005890:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005892:	4b37      	ldr	r3, [pc, #220]	; (8005970 <HAL_RCC_OscConfig+0x774>)
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	430a      	orrs	r2, r1
 80058a2:	4931      	ldr	r1, [pc, #196]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	628b      	str	r3, [r1, #40]	; 0x28
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ac:	3b01      	subs	r3, #1
 80058ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	3b01      	subs	r3, #1
 80058b8:	025b      	lsls	r3, r3, #9
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	3b01      	subs	r3, #1
 80058c4:	041b      	lsls	r3, r3, #16
 80058c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d0:	3b01      	subs	r3, #1
 80058d2:	061b      	lsls	r3, r3, #24
 80058d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80058d8:	4923      	ldr	r1, [pc, #140]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	4a21      	ldr	r2, [pc, #132]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80058e4:	f023 0301 	bic.w	r3, r3, #1
 80058e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058ea:	4b1f      	ldr	r3, [pc, #124]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80058ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ee:	4b21      	ldr	r3, [pc, #132]	; (8005974 <HAL_RCC_OscConfig+0x778>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058f6:	00d2      	lsls	r2, r2, #3
 80058f8:	491b      	ldr	r1, [pc, #108]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 80058fa:	4313      	orrs	r3, r2
 80058fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80058fe:	4b1a      	ldr	r3, [pc, #104]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	f023 020c 	bic.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800590a:	4917      	ldr	r1, [pc, #92]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800590c:	4313      	orrs	r3, r2
 800590e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005910:	4b15      	ldr	r3, [pc, #84]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005914:	f023 0202 	bic.w	r2, r3, #2
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591c:	4912      	ldr	r1, [pc, #72]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800591e:	4313      	orrs	r3, r2
 8005920:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005922:	4b11      	ldr	r3, [pc, #68]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	4a10      	ldr	r2, [pc, #64]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592e:	4b0e      	ldr	r3, [pc, #56]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005932:	4a0d      	ldr	r2, [pc, #52]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005938:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	4a0a      	ldr	r2, [pc, #40]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005944:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005946:	4b08      	ldr	r3, [pc, #32]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594a:	4a07      	ldr	r2, [pc, #28]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 800594c:	f043 0301 	orr.w	r3, r3, #1
 8005950:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005952:	4b05      	ldr	r3, [pc, #20]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a04      	ldr	r2, [pc, #16]	; (8005968 <HAL_RCC_OscConfig+0x76c>)
 8005958:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800595c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595e:	f7fb fed3 	bl	8001708 <HAL_GetTick>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005964:	e011      	b.n	800598a <HAL_RCC_OscConfig+0x78e>
 8005966:	bf00      	nop
 8005968:	58024400 	.word	0x58024400
 800596c:	58024800 	.word	0x58024800
 8005970:	fffffc0c 	.word	0xfffffc0c
 8005974:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005978:	f7fb fec6 	bl	8001708 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d901      	bls.n	800598a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e05f      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800598a:	4b32      	ldr	r3, [pc, #200]	; (8005a54 <HAL_RCC_OscConfig+0x858>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f0      	beq.n	8005978 <HAL_RCC_OscConfig+0x77c>
 8005996:	e057      	b.n	8005a48 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005998:	4b2e      	ldr	r3, [pc, #184]	; (8005a54 <HAL_RCC_OscConfig+0x858>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a2d      	ldr	r2, [pc, #180]	; (8005a54 <HAL_RCC_OscConfig+0x858>)
 800599e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a4:	f7fb feb0 	bl	8001708 <HAL_GetTick>
 80059a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059ac:	f7fb feac 	bl	8001708 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e045      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059be:	4b25      	ldr	r3, [pc, #148]	; (8005a54 <HAL_RCC_OscConfig+0x858>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x7b0>
 80059ca:	e03d      	b.n	8005a48 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80059cc:	4b21      	ldr	r3, [pc, #132]	; (8005a54 <HAL_RCC_OscConfig+0x858>)
 80059ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_RCC_OscConfig+0x858>)
 80059d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d031      	beq.n	8005a44 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0203 	and.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d12a      	bne.n	8005a44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	091b      	lsrs	r3, r3, #4
 80059f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d122      	bne.n	8005a44 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a08:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d11a      	bne.n	8005a44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	0a5b      	lsrs	r3, r3, #9
 8005a12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d111      	bne.n	8005a44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	0c1b      	lsrs	r3, r3, #16
 8005a24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d108      	bne.n	8005a44 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	0e1b      	lsrs	r3, r3, #24
 8005a36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3730      	adds	r7, #48	; 0x30
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	58024400 	.word	0x58024400

08005a58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b086      	sub	sp, #24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e19c      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b8a      	ldr	r3, [pc, #552]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d910      	bls.n	8005a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b87      	ldr	r3, [pc, #540]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 020f 	bic.w	r2, r3, #15
 8005a82:	4985      	ldr	r1, [pc, #532]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b83      	ldr	r3, [pc, #524]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e184      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d010      	beq.n	8005aca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	691a      	ldr	r2, [r3, #16]
 8005aac:	4b7b      	ldr	r3, [pc, #492]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d908      	bls.n	8005aca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005ab8:	4b78      	ldr	r3, [pc, #480]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	4975      	ldr	r1, [pc, #468]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d010      	beq.n	8005af8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	4b70      	ldr	r3, [pc, #448]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d908      	bls.n	8005af8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ae6:	4b6d      	ldr	r3, [pc, #436]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	496a      	ldr	r1, [pc, #424]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d010      	beq.n	8005b26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	4b64      	ldr	r3, [pc, #400]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d908      	bls.n	8005b26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b14:	4b61      	ldr	r3, [pc, #388]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	495e      	ldr	r1, [pc, #376]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0320 	and.w	r3, r3, #32
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d010      	beq.n	8005b54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69da      	ldr	r2, [r3, #28]
 8005b36:	4b59      	ldr	r3, [pc, #356]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d908      	bls.n	8005b54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005b42:	4b56      	ldr	r3, [pc, #344]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	69db      	ldr	r3, [r3, #28]
 8005b4e:	4953      	ldr	r1, [pc, #332]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d010      	beq.n	8005b82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	4b4d      	ldr	r3, [pc, #308]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d908      	bls.n	8005b82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b70:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	f023 020f 	bic.w	r2, r3, #15
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	4947      	ldr	r1, [pc, #284]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d055      	beq.n	8005c3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b8e:	4b43      	ldr	r3, [pc, #268]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4940      	ldr	r1, [pc, #256]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d107      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ba8:	4b3c      	ldr	r3, [pc, #240]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d121      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0f6      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	2b03      	cmp	r3, #3
 8005bbe:	d107      	bne.n	8005bd0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005bc0:	4b36      	ldr	r3, [pc, #216]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d115      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e0ea      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bd8:	4b30      	ldr	r3, [pc, #192]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e0de      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be8:	4b2c      	ldr	r3, [pc, #176]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e0d6      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f023 0207 	bic.w	r2, r3, #7
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	4925      	ldr	r1, [pc, #148]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c0a:	f7fb fd7d 	bl	8001708 <HAL_GetTick>
 8005c0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c10:	e00a      	b.n	8005c28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c12:	f7fb fd79 	bl	8001708 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e0be      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c28:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d1eb      	bne.n	8005c12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d010      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	4b14      	ldr	r3, [pc, #80]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d208      	bcs.n	8005c68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f023 020f 	bic.w	r2, r3, #15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	490e      	ldr	r1, [pc, #56]	; (8005c9c <HAL_RCC_ClockConfig+0x244>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 030f 	and.w	r3, r3, #15
 8005c70:	683a      	ldr	r2, [r7, #0]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d214      	bcs.n	8005ca0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c76:	4b08      	ldr	r3, [pc, #32]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f023 020f 	bic.w	r2, r3, #15
 8005c7e:	4906      	ldr	r1, [pc, #24]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c86:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <HAL_RCC_ClockConfig+0x240>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e086      	b.n	8005da6 <HAL_RCC_ClockConfig+0x34e>
 8005c98:	52002000 	.word	0x52002000
 8005c9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0304 	and.w	r3, r3, #4
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d010      	beq.n	8005cce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	4b3f      	ldr	r3, [pc, #252]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d208      	bcs.n	8005cce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005cbc:	4b3c      	ldr	r3, [pc, #240]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	4939      	ldr	r1, [pc, #228]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0308 	and.w	r3, r3, #8
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d010      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	4b34      	ldr	r3, [pc, #208]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d208      	bcs.n	8005cfc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005cea:	4b31      	ldr	r3, [pc, #196]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	492e      	ldr	r1, [pc, #184]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0310 	and.w	r3, r3, #16
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d010      	beq.n	8005d2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699a      	ldr	r2, [r3, #24]
 8005d0c:	4b28      	ldr	r3, [pc, #160]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d208      	bcs.n	8005d2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699b      	ldr	r3, [r3, #24]
 8005d24:	4922      	ldr	r1, [pc, #136]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0320 	and.w	r3, r3, #32
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d010      	beq.n	8005d58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	69da      	ldr	r2, [r3, #28]
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d208      	bcs.n	8005d58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005d46:	4b1a      	ldr	r3, [pc, #104]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	4917      	ldr	r1, [pc, #92]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005d58:	f000 f834 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	4912      	ldr	r1, [pc, #72]	; (8005db4 <HAL_RCC_ClockConfig+0x35c>)
 8005d6a:	5ccb      	ldrb	r3, [r1, r3]
 8005d6c:	f003 031f 	and.w	r3, r3, #31
 8005d70:	fa22 f303 	lsr.w	r3, r2, r3
 8005d74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005d76:	4b0e      	ldr	r3, [pc, #56]	; (8005db0 <HAL_RCC_ClockConfig+0x358>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	4a0d      	ldr	r2, [pc, #52]	; (8005db4 <HAL_RCC_ClockConfig+0x35c>)
 8005d80:	5cd3      	ldrb	r3, [r2, r3]
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8c:	4a0a      	ldr	r2, [pc, #40]	; (8005db8 <HAL_RCC_ClockConfig+0x360>)
 8005d8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <HAL_RCC_ClockConfig+0x364>)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_RCC_ClockConfig+0x368>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fb fc6a 	bl	8001674 <HAL_InitTick>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	58024400 	.word	0x58024400
 8005db4:	0800d130 	.word	0x0800d130
 8005db8:	24000004 	.word	0x24000004
 8005dbc:	24000000 	.word	0x24000000
 8005dc0:	24000008 	.word	0x24000008

08005dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005dca:	4bb3      	ldr	r3, [pc, #716]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dd2:	2b18      	cmp	r3, #24
 8005dd4:	f200 8155 	bhi.w	8006082 <HAL_RCC_GetSysClockFreq+0x2be>
 8005dd8:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dde:	bf00      	nop
 8005de0:	08005e45 	.word	0x08005e45
 8005de4:	08006083 	.word	0x08006083
 8005de8:	08006083 	.word	0x08006083
 8005dec:	08006083 	.word	0x08006083
 8005df0:	08006083 	.word	0x08006083
 8005df4:	08006083 	.word	0x08006083
 8005df8:	08006083 	.word	0x08006083
 8005dfc:	08006083 	.word	0x08006083
 8005e00:	08005e6b 	.word	0x08005e6b
 8005e04:	08006083 	.word	0x08006083
 8005e08:	08006083 	.word	0x08006083
 8005e0c:	08006083 	.word	0x08006083
 8005e10:	08006083 	.word	0x08006083
 8005e14:	08006083 	.word	0x08006083
 8005e18:	08006083 	.word	0x08006083
 8005e1c:	08006083 	.word	0x08006083
 8005e20:	08005e71 	.word	0x08005e71
 8005e24:	08006083 	.word	0x08006083
 8005e28:	08006083 	.word	0x08006083
 8005e2c:	08006083 	.word	0x08006083
 8005e30:	08006083 	.word	0x08006083
 8005e34:	08006083 	.word	0x08006083
 8005e38:	08006083 	.word	0x08006083
 8005e3c:	08006083 	.word	0x08006083
 8005e40:	08005e77 	.word	0x08005e77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e44:	4b94      	ldr	r3, [pc, #592]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e50:	4b91      	ldr	r3, [pc, #580]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	08db      	lsrs	r3, r3, #3
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	4a90      	ldr	r2, [pc, #576]	; (800609c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005e62:	e111      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005e64:	4b8d      	ldr	r3, [pc, #564]	; (800609c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005e66:	61bb      	str	r3, [r7, #24]
    break;
 8005e68:	e10e      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005e6a:	4b8d      	ldr	r3, [pc, #564]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005e6c:	61bb      	str	r3, [r7, #24]
    break;
 8005e6e:	e10b      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005e70:	4b8c      	ldr	r3, [pc, #560]	; (80060a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005e72:	61bb      	str	r3, [r7, #24]
    break;
 8005e74:	e108      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e76:	4b88      	ldr	r3, [pc, #544]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005e80:	4b85      	ldr	r3, [pc, #532]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	091b      	lsrs	r3, r3, #4
 8005e86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005e8c:	4b82      	ldr	r3, [pc, #520]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	f003 0301 	and.w	r3, r3, #1
 8005e94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005e96:	4b80      	ldr	r3, [pc, #512]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9a:	08db      	lsrs	r3, r3, #3
 8005e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 80e1 	beq.w	800607c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	f000 8083 	beq.w	8005fc8 <HAL_RCC_GetSysClockFreq+0x204>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	f200 80a1 	bhi.w	800600c <HAL_RCC_GetSysClockFreq+0x248>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x114>
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d056      	beq.n	8005f84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005ed6:	e099      	b.n	800600c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ed8:	4b6f      	ldr	r3, [pc, #444]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f003 0320 	and.w	r3, r3, #32
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d02d      	beq.n	8005f40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ee4:	4b6c      	ldr	r3, [pc, #432]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	08db      	lsrs	r3, r3, #3
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	4a6b      	ldr	r2, [pc, #428]	; (800609c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0e:	4b62      	ldr	r3, [pc, #392]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f22:	eddf 5a61 	vldr	s11, [pc, #388]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005f3e:	e087      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80060ac <HAL_RCC_GetSysClockFreq+0x2e8>
 8005f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f52:	4b51      	ldr	r3, [pc, #324]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f66:	eddf 5a50 	vldr	s11, [pc, #320]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f82:	e065      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80060b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f96:	4b40      	ldr	r3, [pc, #256]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005faa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fc6:	e043      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80060b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fda:	4b2f      	ldr	r3, [pc, #188]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005fee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ffa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800600a:	e021      	b.n	8006050 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	ee07 3a90 	vmov	s15, r3
 8006012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006016:	eddf 6a26 	vldr	s13, [pc, #152]	; 80060b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800601a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800601e:	4b1e      	ldr	r3, [pc, #120]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800602e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006032:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80060a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006036:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800603a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800603e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006042:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800604e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	0a5b      	lsrs	r3, r3, #9
 8006056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605a:	3301      	adds	r3, #1
 800605c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006068:	edd7 6a07 	vldr	s13, [r7, #28]
 800606c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006074:	ee17 3a90 	vmov	r3, s15
 8006078:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800607a:	e005      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	61bb      	str	r3, [r7, #24]
    break;
 8006080:	e002      	b.n	8006088 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006082:	4b07      	ldr	r3, [pc, #28]	; (80060a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006084:	61bb      	str	r3, [r7, #24]
    break;
 8006086:	bf00      	nop
  }

  return sysclockfreq;
 8006088:	69bb      	ldr	r3, [r7, #24]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3724      	adds	r7, #36	; 0x24
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400
 800609c:	03d09000 	.word	0x03d09000
 80060a0:	003d0900 	.word	0x003d0900
 80060a4:	007a1200 	.word	0x007a1200
 80060a8:	46000000 	.word	0x46000000
 80060ac:	4c742400 	.word	0x4c742400
 80060b0:	4a742400 	.word	0x4a742400
 80060b4:	4af42400 	.word	0x4af42400

080060b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80060be:	f7ff fe81 	bl	8005dc4 <HAL_RCC_GetSysClockFreq>
 80060c2:	4602      	mov	r2, r0
 80060c4:	4b10      	ldr	r3, [pc, #64]	; (8006108 <HAL_RCC_GetHCLKFreq+0x50>)
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	490f      	ldr	r1, [pc, #60]	; (800610c <HAL_RCC_GetHCLKFreq+0x54>)
 80060d0:	5ccb      	ldrb	r3, [r1, r3]
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80060dc:	4b0a      	ldr	r3, [pc, #40]	; (8006108 <HAL_RCC_GetHCLKFreq+0x50>)
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	4a09      	ldr	r2, [pc, #36]	; (800610c <HAL_RCC_GetHCLKFreq+0x54>)
 80060e6:	5cd3      	ldrb	r3, [r2, r3]
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	fa22 f303 	lsr.w	r3, r2, r3
 80060f2:	4a07      	ldr	r2, [pc, #28]	; (8006110 <HAL_RCC_GetHCLKFreq+0x58>)
 80060f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80060f6:	4a07      	ldr	r2, [pc, #28]	; (8006114 <HAL_RCC_GetHCLKFreq+0x5c>)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80060fc:	4b04      	ldr	r3, [pc, #16]	; (8006110 <HAL_RCC_GetHCLKFreq+0x58>)
 80060fe:	681b      	ldr	r3, [r3, #0]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3708      	adds	r7, #8
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	58024400 	.word	0x58024400
 800610c:	0800d130 	.word	0x0800d130
 8006110:	24000004 	.word	0x24000004
 8006114:	24000000 	.word	0x24000000

08006118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800611c:	f7ff ffcc 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 8006120:	4602      	mov	r2, r0
 8006122:	4b06      	ldr	r3, [pc, #24]	; (800613c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	091b      	lsrs	r3, r3, #4
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	4904      	ldr	r1, [pc, #16]	; (8006140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800612e:	5ccb      	ldrb	r3, [r1, r3]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006138:	4618      	mov	r0, r3
 800613a:	bd80      	pop	{r7, pc}
 800613c:	58024400 	.word	0x58024400
 8006140:	0800d130 	.word	0x0800d130

08006144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006148:	f7ff ffb6 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 800614c:	4602      	mov	r2, r0
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	0a1b      	lsrs	r3, r3, #8
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	4904      	ldr	r1, [pc, #16]	; (800616c <HAL_RCC_GetPCLK2Freq+0x28>)
 800615a:	5ccb      	ldrb	r3, [r1, r3]
 800615c:	f003 031f 	and.w	r3, r3, #31
 8006160:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006164:	4618      	mov	r0, r3
 8006166:	bd80      	pop	{r7, pc}
 8006168:	58024400 	.word	0x58024400
 800616c:	0800d130 	.word	0x0800d130

08006170 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006178:	2300      	movs	r3, #0
 800617a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800617c:	2300      	movs	r3, #0
 800617e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d03f      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006190:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006194:	d02a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800619a:	d824      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800619c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a0:	d018      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061a6:	d81e      	bhi.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061b0:	d007      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061b2:	e018      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b4:	4ba3      	ldr	r3, [pc, #652]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b8:	4aa2      	ldr	r2, [pc, #648]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061c0:	e015      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	3304      	adds	r3, #4
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f001 f9d5 	bl	8007578 <RCCEx_PLL2_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061d2:	e00c      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	2102      	movs	r1, #2
 80061da:	4618      	mov	r0, r3
 80061dc:	f001 fa7e 	bl	80076dc <RCCEx_PLL3_Config>
 80061e0:	4603      	mov	r3, r0
 80061e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80061e4:	e003      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	75fb      	strb	r3, [r7, #23]
      break;
 80061ea:	e000      	b.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80061ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061ee:	7dfb      	ldrb	r3, [r7, #23]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80061f4:	4b93      	ldr	r3, [pc, #588]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006200:	4990      	ldr	r1, [pc, #576]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006202:	4313      	orrs	r3, r2
 8006204:	650b      	str	r3, [r1, #80]	; 0x50
 8006206:	e001      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006214:	2b00      	cmp	r3, #0
 8006216:	d03d      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	2b04      	cmp	r3, #4
 800621e:	d826      	bhi.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006220:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006226:	bf00      	nop
 8006228:	0800623d 	.word	0x0800623d
 800622c:	0800624b 	.word	0x0800624b
 8006230:	0800625d 	.word	0x0800625d
 8006234:	08006275 	.word	0x08006275
 8006238:	08006275 	.word	0x08006275
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623c:	4b81      	ldr	r3, [pc, #516]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a80      	ldr	r2, [pc, #512]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006248:	e015      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f991 	bl	8007578 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800625a:	e00c      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fa3a 	bl	80076dc <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
      break;
 8006272:	e000      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800627c:	4b71      	ldr	r3, [pc, #452]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800627e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006280:	f023 0207 	bic.w	r2, r3, #7
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006288:	496e      	ldr	r1, [pc, #440]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800628a:	4313      	orrs	r3, r2
 800628c:	650b      	str	r3, [r1, #80]	; 0x50
 800628e:	e001      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006290:	7dfb      	ldrb	r3, [r7, #23]
 8006292:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	2b00      	cmp	r3, #0
 800629e:	d042      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a8:	d02b      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80062aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ae:	d825      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062b0:	2bc0      	cmp	r3, #192	; 0xc0
 80062b2:	d028      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80062b4:	2bc0      	cmp	r3, #192	; 0xc0
 80062b6:	d821      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062b8:	2b80      	cmp	r3, #128	; 0x80
 80062ba:	d016      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80062bc:	2b80      	cmp	r3, #128	; 0x80
 80062be:	d81d      	bhi.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d002      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d007      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80062c8:	e018      	b.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062ca:	4b5e      	ldr	r3, [pc, #376]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ce:	4a5d      	ldr	r2, [pc, #372]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062d6:	e017      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2100      	movs	r1, #0
 80062de:	4618      	mov	r0, r3
 80062e0:	f001 f94a 	bl	8007578 <RCCEx_PLL2_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062e8:	e00e      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	3324      	adds	r3, #36	; 0x24
 80062ee:	2100      	movs	r1, #0
 80062f0:	4618      	mov	r0, r3
 80062f2:	f001 f9f3 	bl	80076dc <RCCEx_PLL3_Config>
 80062f6:	4603      	mov	r3, r0
 80062f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80062fa:	e005      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006300:	e002      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006306:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006308:	7dfb      	ldrb	r3, [r7, #23]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d109      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800630e:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006312:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800631a:	494a      	ldr	r1, [pc, #296]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800631c:	4313      	orrs	r3, r2
 800631e:	650b      	str	r3, [r1, #80]	; 0x50
 8006320:	e001      	b.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632e:	2b00      	cmp	r3, #0
 8006330:	d049      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800633c:	d030      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800633e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006342:	d82a      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006344:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006348:	d02c      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800634a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800634e:	d824      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006354:	d018      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800635a:	d81e      	bhi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006364:	d007      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006366:	e018      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006368:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	4a35      	ldr	r2, [pc, #212]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800636e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006372:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006374:	e017      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	3304      	adds	r3, #4
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f8fb 	bl	8007578 <RCCEx_PLL2_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006386:	e00e      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	3324      	adds	r3, #36	; 0x24
 800638c:	2100      	movs	r1, #0
 800638e:	4618      	mov	r0, r3
 8006390:	f001 f9a4 	bl	80076dc <RCCEx_PLL3_Config>
 8006394:	4603      	mov	r3, r0
 8006396:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	75fb      	strb	r3, [r7, #23]
      break;
 800639e:	e002      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063a0:	bf00      	nop
 80063a2:	e000      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80063a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063a6:	7dfb      	ldrb	r3, [r7, #23]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10a      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80063ac:	4b25      	ldr	r3, [pc, #148]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063b0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80063ba:	4922      	ldr	r1, [pc, #136]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	658b      	str	r3, [r1, #88]	; 0x58
 80063c0:	e001      	b.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
 80063c4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d04b      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063dc:	d030      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80063de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063e2:	d82a      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063e8:	d02e      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80063ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80063ee:	d824      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063f4:	d018      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80063f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80063fa:	d81e      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006404:	d007      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006406:	e018      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006408:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800640e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006412:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006414:	e019      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3304      	adds	r3, #4
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 f8ab 	bl	8007578 <RCCEx_PLL2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006426:	e010      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3324      	adds	r3, #36	; 0x24
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f001 f954 	bl	80076dc <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006438:	e007      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]
      break;
 800643e:	e004      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006440:	bf00      	nop
 8006442:	e002      	b.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006444:	58024400 	.word	0x58024400
      break;
 8006448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006450:	4b99      	ldr	r3, [pc, #612]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006454:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800645e:	4996      	ldr	r1, [pc, #600]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006460:	4313      	orrs	r3, r2
 8006462:	658b      	str	r3, [r1, #88]	; 0x58
 8006464:	e001      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	7dfb      	ldrb	r3, [r7, #23]
 8006468:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d032      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647a:	2b30      	cmp	r3, #48	; 0x30
 800647c:	d01c      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800647e:	2b30      	cmp	r3, #48	; 0x30
 8006480:	d817      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006482:	2b20      	cmp	r3, #32
 8006484:	d00c      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006486:	2b20      	cmp	r3, #32
 8006488:	d813      	bhi.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800648a:	2b00      	cmp	r3, #0
 800648c:	d016      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800648e:	2b10      	cmp	r3, #16
 8006490:	d10f      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006492:	4b89      	ldr	r3, [pc, #548]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006496:	4a88      	ldr	r2, [pc, #544]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800649c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800649e:	e00e      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3304      	adds	r3, #4
 80064a4:	2102      	movs	r1, #2
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f866 	bl	8007578 <RCCEx_PLL2_Config>
 80064ac:	4603      	mov	r3, r0
 80064ae:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80064b0:	e005      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
      break;
 80064b6:	e002      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80064b8:	bf00      	nop
 80064ba:	e000      	b.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80064bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80064c4:	4b7c      	ldr	r3, [pc, #496]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d0:	4979      	ldr	r1, [pc, #484]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80064d6:	e001      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d047      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f0:	d030      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80064f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064f6:	d82a      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80064f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80064fc:	d02c      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80064fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006502:	d824      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006508:	d018      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800650a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800650e:	d81e      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006518:	d007      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800651a:	e018      	b.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800651c:	4b66      	ldr	r3, [pc, #408]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006520:	4a65      	ldr	r2, [pc, #404]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006528:	e017      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f001 f821 	bl	8007578 <RCCEx_PLL2_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800653a:	e00e      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	3324      	adds	r3, #36	; 0x24
 8006540:	2100      	movs	r1, #0
 8006542:	4618      	mov	r0, r3
 8006544:	f001 f8ca 	bl	80076dc <RCCEx_PLL3_Config>
 8006548:	4603      	mov	r3, r0
 800654a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800654c:	e005      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	75fb      	strb	r3, [r7, #23]
      break;
 8006552:	e002      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006554:	bf00      	nop
 8006556:	e000      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006558:	bf00      	nop
    }

    if(ret == HAL_OK)
 800655a:	7dfb      	ldrb	r3, [r7, #23]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d109      	bne.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006560:	4b55      	ldr	r3, [pc, #340]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656c:	4952      	ldr	r1, [pc, #328]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800656e:	4313      	orrs	r3, r2
 8006570:	650b      	str	r3, [r1, #80]	; 0x50
 8006572:	e001      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006574:	7dfb      	ldrb	r3, [r7, #23]
 8006576:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d049      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800658c:	d02e      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800658e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006592:	d828      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006594:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006598:	d02a      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800659a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800659e:	d822      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80065a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065a4:	d026      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80065a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80065aa:	d81c      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80065ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b0:	d010      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80065b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b6:	d816      	bhi.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01d      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c0:	d111      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	2101      	movs	r1, #1
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 ffd5 	bl	8007578 <RCCEx_PLL2_Config>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065d2:	e012      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f001 f87e 	bl	80076dc <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80065e4:	e009      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	75fb      	strb	r3, [r7, #23]
      break;
 80065ea:	e006      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80065ec:	bf00      	nop
 80065ee:	e004      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80065f0:	bf00      	nop
 80065f2:	e002      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80065f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d109      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006600:	4b2d      	ldr	r3, [pc, #180]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006604:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800660c:	492a      	ldr	r1, [pc, #168]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800660e:	4313      	orrs	r3, r2
 8006610:	650b      	str	r3, [r1, #80]	; 0x50
 8006612:	e001      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d04d      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800662a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800662e:	d02e      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006634:	d828      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663a:	d02a      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006640:	d822      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006642:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006646:	d026      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006648:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800664c:	d81c      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800664e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006652:	d010      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006658:	d816      	bhi.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800665a:	2b00      	cmp	r3, #0
 800665c:	d01d      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800665e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006662:	d111      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	2101      	movs	r1, #1
 800666a:	4618      	mov	r0, r3
 800666c:	f000 ff84 	bl	8007578 <RCCEx_PLL2_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006674:	e012      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3324      	adds	r3, #36	; 0x24
 800667a:	2101      	movs	r1, #1
 800667c:	4618      	mov	r0, r3
 800667e:	f001 f82d 	bl	80076dc <RCCEx_PLL3_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006686:	e009      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	75fb      	strb	r3, [r7, #23]
      break;
 800668c:	e006      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800668e:	bf00      	nop
 8006690:	e004      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006692:	bf00      	nop
 8006694:	e002      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006696:	bf00      	nop
 8006698:	e000      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800669a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d10c      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066b0:	4901      	ldr	r1, [pc, #4]	; (80066b8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	658b      	str	r3, [r1, #88]	; 0x58
 80066b6:	e003      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80066b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d02f      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d4:	d00e      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80066d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066da:	d814      	bhi.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x596>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d015      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80066e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066e4:	d10f      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e6:	4baf      	ldr	r3, [pc, #700]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066ea:	4aae      	ldr	r2, [pc, #696]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80066f2:	e00c      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3304      	adds	r3, #4
 80066f8:	2101      	movs	r1, #1
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 ff3c 	bl	8007578 <RCCEx_PLL2_Config>
 8006700:	4603      	mov	r3, r0
 8006702:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006704:	e003      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	75fb      	strb	r3, [r7, #23]
      break;
 800670a:	e000      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800670c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800670e:	7dfb      	ldrb	r3, [r7, #23]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d109      	bne.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006714:	4ba3      	ldr	r3, [pc, #652]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006718:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006720:	49a0      	ldr	r1, [pc, #640]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006722:	4313      	orrs	r3, r2
 8006724:	650b      	str	r3, [r1, #80]	; 0x50
 8006726:	e001      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d032      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673c:	2b03      	cmp	r3, #3
 800673e:	d81b      	bhi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006740:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	0800677f 	.word	0x0800677f
 800674c:	08006759 	.word	0x08006759
 8006750:	08006767 	.word	0x08006767
 8006754:	0800677f 	.word	0x0800677f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006758:	4b92      	ldr	r3, [pc, #584]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	4a91      	ldr	r2, [pc, #580]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800675e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006762:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006764:	e00c      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2102      	movs	r1, #2
 800676c:	4618      	mov	r0, r3
 800676e:	f000 ff03 	bl	8007578 <RCCEx_PLL2_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006776:	e003      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	75fb      	strb	r3, [r7, #23]
      break;
 800677c:	e000      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800677e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006780:	7dfb      	ldrb	r3, [r7, #23]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d109      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006786:	4b87      	ldr	r3, [pc, #540]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800678a:	f023 0203 	bic.w	r2, r3, #3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006792:	4984      	ldr	r1, [pc, #528]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006794:	4313      	orrs	r3, r2
 8006796:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006798:	e001      	b.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 8086 	beq.w	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067ac:	4b7e      	ldr	r3, [pc, #504]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a7d      	ldr	r2, [pc, #500]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80067b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80067b8:	f7fa ffa6 	bl	8001708 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067be:	e009      	b.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c0:	f7fa ffa2 	bl	8001708 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b64      	cmp	r3, #100	; 0x64
 80067cc:	d902      	bls.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	75fb      	strb	r3, [r7, #23]
        break;
 80067d2:	e005      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067d4:	4b74      	ldr	r3, [pc, #464]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0ef      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d166      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067e6:	4b6f      	ldr	r3, [pc, #444]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80067e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067f0:	4053      	eors	r3, r2
 80067f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d013      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067fa:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006802:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006804:	4b67      	ldr	r3, [pc, #412]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	4a66      	ldr	r2, [pc, #408]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800680a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800680e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006810:	4b64      	ldr	r3, [pc, #400]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006814:	4a63      	ldr	r2, [pc, #396]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006816:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800681a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800681c:	4a61      	ldr	r2, [pc, #388]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800682c:	d115      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682e:	f7fa ff6b 	bl	8001708 <HAL_GetTick>
 8006832:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006834:	e00b      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006836:	f7fa ff67 	bl	8001708 <HAL_GetTick>
 800683a:	4602      	mov	r2, r0
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	1ad3      	subs	r3, r2, r3
 8006840:	f241 3288 	movw	r2, #5000	; 0x1388
 8006844:	4293      	cmp	r3, r2
 8006846:	d902      	bls.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	75fb      	strb	r3, [r7, #23]
            break;
 800684c:	e005      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800684e:	4b55      	ldr	r3, [pc, #340]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0ed      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800685a:	7dfb      	ldrb	r3, [r7, #23]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d126      	bne.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800686a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800686e:	d10d      	bne.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006870:	4b4c      	ldr	r3, [pc, #304]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800687e:	0919      	lsrs	r1, r3, #4
 8006880:	4b4a      	ldr	r3, [pc, #296]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006882:	400b      	ands	r3, r1
 8006884:	4947      	ldr	r1, [pc, #284]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]
 800688a:	e005      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800688c:	4b45      	ldr	r3, [pc, #276]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	4a44      	ldr	r2, [pc, #272]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006892:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006896:	6113      	str	r3, [r2, #16]
 8006898:	4b42      	ldr	r3, [pc, #264]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800689a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80068a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068a6:	493f      	ldr	r1, [pc, #252]	; (80069a4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	670b      	str	r3, [r1, #112]	; 0x70
 80068ac:	e004      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	75bb      	strb	r3, [r7, #22]
 80068b2:	e001      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8085 	beq.w	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068ca:	2b28      	cmp	r3, #40	; 0x28
 80068cc:	d866      	bhi.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80068ce:	a201      	add	r2, pc, #4	; (adr r2, 80068d4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80068d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068d4:	080069b1 	.word	0x080069b1
 80068d8:	0800699d 	.word	0x0800699d
 80068dc:	0800699d 	.word	0x0800699d
 80068e0:	0800699d 	.word	0x0800699d
 80068e4:	0800699d 	.word	0x0800699d
 80068e8:	0800699d 	.word	0x0800699d
 80068ec:	0800699d 	.word	0x0800699d
 80068f0:	0800699d 	.word	0x0800699d
 80068f4:	08006979 	.word	0x08006979
 80068f8:	0800699d 	.word	0x0800699d
 80068fc:	0800699d 	.word	0x0800699d
 8006900:	0800699d 	.word	0x0800699d
 8006904:	0800699d 	.word	0x0800699d
 8006908:	0800699d 	.word	0x0800699d
 800690c:	0800699d 	.word	0x0800699d
 8006910:	0800699d 	.word	0x0800699d
 8006914:	0800698b 	.word	0x0800698b
 8006918:	0800699d 	.word	0x0800699d
 800691c:	0800699d 	.word	0x0800699d
 8006920:	0800699d 	.word	0x0800699d
 8006924:	0800699d 	.word	0x0800699d
 8006928:	0800699d 	.word	0x0800699d
 800692c:	0800699d 	.word	0x0800699d
 8006930:	0800699d 	.word	0x0800699d
 8006934:	080069b1 	.word	0x080069b1
 8006938:	0800699d 	.word	0x0800699d
 800693c:	0800699d 	.word	0x0800699d
 8006940:	0800699d 	.word	0x0800699d
 8006944:	0800699d 	.word	0x0800699d
 8006948:	0800699d 	.word	0x0800699d
 800694c:	0800699d 	.word	0x0800699d
 8006950:	0800699d 	.word	0x0800699d
 8006954:	080069b1 	.word	0x080069b1
 8006958:	0800699d 	.word	0x0800699d
 800695c:	0800699d 	.word	0x0800699d
 8006960:	0800699d 	.word	0x0800699d
 8006964:	0800699d 	.word	0x0800699d
 8006968:	0800699d 	.word	0x0800699d
 800696c:	0800699d 	.word	0x0800699d
 8006970:	0800699d 	.word	0x0800699d
 8006974:	080069b1 	.word	0x080069b1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	2101      	movs	r1, #1
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fdfa 	bl	8007578 <RCCEx_PLL2_Config>
 8006984:	4603      	mov	r3, r0
 8006986:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006988:	e013      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3324      	adds	r3, #36	; 0x24
 800698e:	2101      	movs	r1, #1
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fea3 	bl	80076dc <RCCEx_PLL3_Config>
 8006996:	4603      	mov	r3, r0
 8006998:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800699a:	e00a      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
      break;
 80069a0:	e007      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80069a2:	bf00      	nop
 80069a4:	58024400 	.word	0x58024400
 80069a8:	58024800 	.word	0x58024800
 80069ac:	00ffffcf 	.word	0x00ffffcf
      break;
 80069b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069b8:	4b96      	ldr	r3, [pc, #600]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069bc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069c4:	4993      	ldr	r1, [pc, #588]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	654b      	str	r3, [r1, #84]	; 0x54
 80069ca:	e001      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069cc:	7dfb      	ldrb	r3, [r7, #23]
 80069ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d038      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e0:	2b05      	cmp	r3, #5
 80069e2:	d821      	bhi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80069e4:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80069e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ea:	bf00      	nop
 80069ec:	08006a2f 	.word	0x08006a2f
 80069f0:	08006a05 	.word	0x08006a05
 80069f4:	08006a17 	.word	0x08006a17
 80069f8:	08006a2f 	.word	0x08006a2f
 80069fc:	08006a2f 	.word	0x08006a2f
 8006a00:	08006a2f 	.word	0x08006a2f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	2101      	movs	r1, #1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 fdb4 	bl	8007578 <RCCEx_PLL2_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a14:	e00c      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	3324      	adds	r3, #36	; 0x24
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	f000 fe5d 	bl	80076dc <RCCEx_PLL3_Config>
 8006a22:	4603      	mov	r3, r0
 8006a24:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006a26:	e003      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a2c:	e000      	b.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a30:	7dfb      	ldrb	r3, [r7, #23]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a36:	4b77      	ldr	r3, [pc, #476]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	f023 0207 	bic.w	r2, r3, #7
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a42:	4974      	ldr	r1, [pc, #464]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	654b      	str	r3, [r1, #84]	; 0x54
 8006a48:	e001      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d03a      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a60:	2b05      	cmp	r3, #5
 8006a62:	d821      	bhi.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006aaf 	.word	0x08006aaf
 8006a70:	08006a85 	.word	0x08006a85
 8006a74:	08006a97 	.word	0x08006a97
 8006a78:	08006aaf 	.word	0x08006aaf
 8006a7c:	08006aaf 	.word	0x08006aaf
 8006a80:	08006aaf 	.word	0x08006aaf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	3304      	adds	r3, #4
 8006a88:	2101      	movs	r1, #1
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fd74 	bl	8007578 <RCCEx_PLL2_Config>
 8006a90:	4603      	mov	r3, r0
 8006a92:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006a94:	e00c      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	3324      	adds	r3, #36	; 0x24
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 fe1d 	bl	80076dc <RCCEx_PLL3_Config>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006aa6:	e003      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	75fb      	strb	r3, [r7, #23]
      break;
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ab6:	4b57      	ldr	r3, [pc, #348]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aba:	f023 0207 	bic.w	r2, r3, #7
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	4953      	ldr	r1, [pc, #332]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	658b      	str	r3, [r1, #88]	; 0x58
 8006aca:	e001      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d04b      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ae6:	d02e      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006ae8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006aec:	d828      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af2:	d02a      	beq.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af8:	d822      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006afa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006afe:	d026      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006b00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b04:	d81c      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006b06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0a:	d010      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006b0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b10:	d816      	bhi.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01d      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b1a:	d111      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	2100      	movs	r1, #0
 8006b22:	4618      	mov	r0, r3
 8006b24:	f000 fd28 	bl	8007578 <RCCEx_PLL2_Config>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b2c:	e012      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	3324      	adds	r3, #36	; 0x24
 8006b32:	2102      	movs	r1, #2
 8006b34:	4618      	mov	r0, r3
 8006b36:	f000 fdd1 	bl	80076dc <RCCEx_PLL3_Config>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006b3e:	e009      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	75fb      	strb	r3, [r7, #23]
      break;
 8006b44:	e006      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006b46:	bf00      	nop
 8006b48:	e004      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006b4a:	bf00      	nop
 8006b4c:	e002      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006b4e:	bf00      	nop
 8006b50:	e000      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006b52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10a      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b5a:	4b2e      	ldr	r3, [pc, #184]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b68:	492a      	ldr	r1, [pc, #168]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	654b      	str	r3, [r1, #84]	; 0x54
 8006b6e:	e001      	b.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b70:	7dfb      	ldrb	r3, [r7, #23]
 8006b72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d04d      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b8a:	d02e      	beq.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006b8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b90:	d828      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b96:	d02a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9c:	d822      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba2:	d026      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba8:	d81c      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bae:	d010      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d816      	bhi.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d01d      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bbe:	d111      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 fcd6 	bl	8007578 <RCCEx_PLL2_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006bd0:	e012      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	3324      	adds	r3, #36	; 0x24
 8006bd6:	2102      	movs	r1, #2
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fd7f 	bl	80076dc <RCCEx_PLL3_Config>
 8006bde:	4603      	mov	r3, r0
 8006be0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006be2:	e009      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	75fb      	strb	r3, [r7, #23]
      break;
 8006be8:	e006      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006bea:	bf00      	nop
 8006bec:	e004      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e002      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10c      	bne.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c02:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c0c:	4901      	ldr	r1, [pc, #4]	; (8006c14 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	658b      	str	r3, [r1, #88]	; 0x58
 8006c12:	e003      	b.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006c14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c18:	7dfb      	ldrb	r3, [r7, #23]
 8006c1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d04b      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c2e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c32:	d02e      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006c34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c38:	d828      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3e:	d02a      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c44:	d822      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006c46:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c4a:	d026      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006c4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c50:	d81c      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006c52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c56:	d010      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006c58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c5c:	d816      	bhi.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d01d      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c66:	d111      	bne.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fc82 	bl	8007578 <RCCEx_PLL2_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c78:	e012      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3324      	adds	r3, #36	; 0x24
 8006c7e:	2102      	movs	r1, #2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f000 fd2b 	bl	80076dc <RCCEx_PLL3_Config>
 8006c86:	4603      	mov	r3, r0
 8006c88:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006c8a:	e009      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c92:	bf00      	nop
 8006c94:	e004      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006c9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ca6:	4b9d      	ldr	r3, [pc, #628]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cb4:	4999      	ldr	r1, [pc, #612]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	658b      	str	r3, [r1, #88]	; 0x58
 8006cba:	e001      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0308 	and.w	r3, r3, #8
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd6:	d10a      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	2102      	movs	r1, #2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fcfc 	bl	80076dc <RCCEx_PLL3_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006cee:	4b8b      	ldr	r3, [pc, #556]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cfc:	4987      	ldr	r1, [pc, #540]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 0310 	and.w	r3, r3, #16
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01a      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d18:	d10a      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3324      	adds	r3, #36	; 0x24
 8006d1e:	2102      	movs	r1, #2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fcdb 	bl	80076dc <RCCEx_PLL3_Config>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d30:	4b7a      	ldr	r3, [pc, #488]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d3e:	4977      	ldr	r1, [pc, #476]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d034      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5a:	d01d      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d60:	d817      	bhi.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6a:	d009      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006d6c:	e011      	b.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3304      	adds	r3, #4
 8006d72:	2100      	movs	r1, #0
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fbff 	bl	8007578 <RCCEx_PLL2_Config>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d7e:	e00c      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3324      	adds	r3, #36	; 0x24
 8006d84:	2102      	movs	r1, #2
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fca8 	bl	80076dc <RCCEx_PLL3_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	75fb      	strb	r3, [r7, #23]
      break;
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006da0:	4b5e      	ldr	r3, [pc, #376]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dae:	495b      	ldr	r1, [pc, #364]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	658b      	str	r3, [r1, #88]	; 0x58
 8006db4:	e001      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d033      	beq.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dd0:	d01c      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006dd6:	d816      	bhi.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ddc:	d003      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006dde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006de2:	d007      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006de4:	e00f      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de6:	4b4d      	ldr	r3, [pc, #308]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	4a4c      	ldr	r2, [pc, #304]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006df2:	e00c      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3324      	adds	r3, #36	; 0x24
 8006df8:	2101      	movs	r1, #1
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fc6e 	bl	80076dc <RCCEx_PLL3_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006e04:	e003      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0a:	e000      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0e:	7dfb      	ldrb	r3, [r7, #23]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10a      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e14:	4b41      	ldr	r3, [pc, #260]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e22:	493e      	ldr	r1, [pc, #248]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e24:	4313      	orrs	r3, r2
 8006e26:	654b      	str	r3, [r1, #84]	; 0x54
 8006e28:	e001      	b.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d029      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e46:	d007      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006e48:	e00f      	b.n	8006e6a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e4a:	4b34      	ldr	r3, [pc, #208]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	4a33      	ldr	r2, [pc, #204]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e56:	e00b      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f000 fb8a 	bl	8007578 <RCCEx_PLL2_Config>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006e68:	e002      	b.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e70:	7dfb      	ldrb	r3, [r7, #23]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006e76:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	4926      	ldr	r1, [pc, #152]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006e88:	e001      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3324      	adds	r3, #36	; 0x24
 8006e9e:	2102      	movs	r1, #2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 fc1b 	bl	80076dc <RCCEx_PLL3_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d033      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ec0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ec4:	d017      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eca:	d811      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed0:	d013      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed6:	d80b      	bhi.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d010      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee0:	d106      	bne.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee2:	4b0e      	ldr	r3, [pc, #56]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	4a0d      	ldr	r2, [pc, #52]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006eee:	e007      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef4:	e004      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006ef6:	bf00      	nop
 8006ef8:	e002      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006efa:	bf00      	nop
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10c      	bne.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006f06:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f12:	4902      	ldr	r1, [pc, #8]	; (8006f1c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f14:	4313      	orrs	r3, r2
 8006f16:	654b      	str	r3, [r1, #84]	; 0x54
 8006f18:	e004      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006f1a:	bf00      	nop
 8006f1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d008      	beq.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006f30:	4b31      	ldr	r3, [pc, #196]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3c:	492e      	ldr	r1, [pc, #184]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d009      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006f4e:	4b2a      	ldr	r3, [pc, #168]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006f5c:	4926      	ldr	r1, [pc, #152]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d008      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006f6e:	4b22      	ldr	r3, [pc, #136]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f72:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7a:	491f      	ldr	r1, [pc, #124]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00d      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006f8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006f96:	6113      	str	r3, [r2, #16]
 8006f98:	4b17      	ldr	r3, [pc, #92]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006f9a:	691a      	ldr	r2, [r3, #16]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006fa2:	4915      	ldr	r1, [pc, #84]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	da08      	bge.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006fb0:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006fb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	490e      	ldr	r1, [pc, #56]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fdc:	4906      	ldr	r1, [pc, #24]	; (8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006fe2:	7dbb      	ldrb	r3, [r7, #22]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d101      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	e000      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3718      	adds	r7, #24
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	58024400 	.word	0x58024400

08006ffc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007000:	f7ff f85a 	bl	80060b8 <HAL_RCC_GetHCLKFreq>
 8007004:	4602      	mov	r2, r0
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	091b      	lsrs	r3, r3, #4
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	4904      	ldr	r1, [pc, #16]	; (8007024 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007012:	5ccb      	ldrb	r3, [r1, r3]
 8007014:	f003 031f 	and.w	r3, r3, #31
 8007018:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800701c:	4618      	mov	r0, r3
 800701e:	bd80      	pop	{r7, pc}
 8007020:	58024400 	.word	0x58024400
 8007024:	0800d130 	.word	0x0800d130

08007028 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007028:	b480      	push	{r7}
 800702a:	b089      	sub	sp, #36	; 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007030:	4ba1      	ldr	r3, [pc, #644]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800703a:	4b9f      	ldr	r3, [pc, #636]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	0b1b      	lsrs	r3, r3, #12
 8007040:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007044:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007046:	4b9c      	ldr	r3, [pc, #624]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	091b      	lsrs	r3, r3, #4
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007052:	4b99      	ldr	r3, [pc, #612]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	08db      	lsrs	r3, r3, #3
 8007058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 8111 	beq.w	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	2b02      	cmp	r3, #2
 800707a:	f000 8083 	beq.w	8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f200 80a1 	bhi.w	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d003      	beq.n	8007094 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800708c:	69bb      	ldr	r3, [r7, #24]
 800708e:	2b01      	cmp	r3, #1
 8007090:	d056      	beq.n	8007140 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007092:	e099      	b.n	80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007094:	4b88      	ldr	r3, [pc, #544]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0320 	and.w	r3, r3, #32
 800709c:	2b00      	cmp	r3, #0
 800709e:	d02d      	beq.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80070a0:	4b85      	ldr	r3, [pc, #532]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	08db      	lsrs	r3, r3, #3
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	4a84      	ldr	r2, [pc, #528]	; (80072bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
 80070b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ca:	4b7b      	ldr	r3, [pc, #492]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070da:	ed97 6a03 	vldr	s12, [r7, #12]
 80070de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80070fa:	e087      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	ee07 3a90 	vmov	s15, r3
 8007102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007106:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80072c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800710a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710e:	4b6a      	ldr	r3, [pc, #424]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007116:	ee07 3a90 	vmov	s15, r3
 800711a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007122:	eddf 5a67 	vldr	s11, [pc, #412]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800713e:	e065      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	ee07 3a90 	vmov	s15, r3
 8007146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800714e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007152:	4b59      	ldr	r3, [pc, #356]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715a:	ee07 3a90 	vmov	s15, r3
 800715e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007162:	ed97 6a03 	vldr	s12, [r7, #12]
 8007166:	eddf 5a56 	vldr	s11, [pc, #344]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800716a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800717a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007182:	e043      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	ee07 3a90 	vmov	s15, r3
 800718a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80072cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007196:	4b48      	ldr	r3, [pc, #288]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80071aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80071c6:	e021      	b.n	800720c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80072c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80071d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071da:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80071ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80071f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007206:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800720a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800720e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007210:	0a5b      	lsrs	r3, r3, #9
 8007212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007222:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007226:	edd7 6a07 	vldr	s13, [r7, #28]
 800722a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007232:	ee17 2a90 	vmov	r2, s15
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800723c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723e:	0c1b      	lsrs	r3, r3, #16
 8007240:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800724c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007250:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007254:	edd7 6a07 	vldr	s13, [r7, #28]
 8007258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800725c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007260:	ee17 2a90 	vmov	r2, s15
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007268:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726c:	0e1b      	lsrs	r3, r3, #24
 800726e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007272:	ee07 3a90 	vmov	s15, r3
 8007276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800727a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800727e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007282:	edd7 6a07 	vldr	s13, [r7, #28]
 8007286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800728a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728e:	ee17 2a90 	vmov	r2, s15
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007296:	e008      	b.n	80072aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	609a      	str	r2, [r3, #8]
}
 80072aa:	bf00      	nop
 80072ac:	3724      	adds	r7, #36	; 0x24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	58024400 	.word	0x58024400
 80072bc:	03d09000 	.word	0x03d09000
 80072c0:	46000000 	.word	0x46000000
 80072c4:	4c742400 	.word	0x4c742400
 80072c8:	4a742400 	.word	0x4a742400
 80072cc:	4af42400 	.word	0x4af42400

080072d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b089      	sub	sp, #36	; 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072d8:	4ba1      	ldr	r3, [pc, #644]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80072e2:	4b9f      	ldr	r3, [pc, #636]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	0d1b      	lsrs	r3, r3, #20
 80072e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80072ee:	4b9c      	ldr	r3, [pc, #624]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80072fa:	4b99      	ldr	r3, [pc, #612]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	08db      	lsrs	r3, r3, #3
 8007300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	fb02 f303 	mul.w	r3, r2, r3
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2b00      	cmp	r3, #0
 800731a:	f000 8111 	beq.w	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b02      	cmp	r3, #2
 8007322:	f000 8083 	beq.w	800742c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	2b02      	cmp	r3, #2
 800732a:	f200 80a1 	bhi.w	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d003      	beq.n	800733c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d056      	beq.n	80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800733a:	e099      	b.n	8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800733c:	4b88      	ldr	r3, [pc, #544]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d02d      	beq.n	80073a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007348:	4b85      	ldr	r3, [pc, #532]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	08db      	lsrs	r3, r3, #3
 800734e:	f003 0303 	and.w	r3, r3, #3
 8007352:	4a84      	ldr	r2, [pc, #528]	; (8007564 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
 8007358:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	ee07 3a90 	vmov	s15, r3
 8007360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	ee07 3a90 	vmov	s15, r3
 800736a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800736e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007372:	4b7b      	ldr	r3, [pc, #492]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007382:	ed97 6a03 	vldr	s12, [r7, #12]
 8007386:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800738a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800738e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007392:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800739a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80073a2:	e087      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	ee07 3a90 	vmov	s15, r3
 80073aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800756c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b6a      	ldr	r3, [pc, #424]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073e6:	e065      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b59      	ldr	r3, [pc, #356]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a03 	vldr	s12, [r7, #12]
 800740e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800742a:	e043      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800743a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743e:	4b48      	ldr	r3, [pc, #288]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007452:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800746e:	e021      	b.n	80074b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007570 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b37      	ldr	r3, [pc, #220]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a03 	vldr	s12, [r7, #12]
 8007496:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007568 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80074b4:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	0a5b      	lsrs	r3, r3, #9
 80074ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80074d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074da:	ee17 2a90 	vmov	r2, s15
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80074e2:	4b1f      	ldr	r3, [pc, #124]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ec:	ee07 3a90 	vmov	s15, r3
 80074f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8007500:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007508:	ee17 2a90 	vmov	r2, s15
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007510:	4b13      	ldr	r3, [pc, #76]	; (8007560 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007514:	0e1b      	lsrs	r3, r3, #24
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007526:	ee37 7a87 	vadd.f32	s14, s15, s14
 800752a:	edd7 6a07 	vldr	s13, [r7, #28]
 800752e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007536:	ee17 2a90 	vmov	r2, s15
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800753e:	e008      	b.n	8007552 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	609a      	str	r2, [r3, #8]
}
 8007552:	bf00      	nop
 8007554:	3724      	adds	r7, #36	; 0x24
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	58024400 	.word	0x58024400
 8007564:	03d09000 	.word	0x03d09000
 8007568:	46000000 	.word	0x46000000
 800756c:	4c742400 	.word	0x4c742400
 8007570:	4a742400 	.word	0x4a742400
 8007574:	4af42400 	.word	0x4af42400

08007578 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007586:	4b53      	ldr	r3, [pc, #332]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	f003 0303 	and.w	r3, r3, #3
 800758e:	2b03      	cmp	r3, #3
 8007590:	d101      	bne.n	8007596 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e099      	b.n	80076ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007596:	4b4f      	ldr	r3, [pc, #316]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a4e      	ldr	r2, [pc, #312]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800759c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a2:	f7fa f8b1 	bl	8001708 <HAL_GetTick>
 80075a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075a8:	e008      	b.n	80075bc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80075aa:	f7fa f8ad 	bl	8001708 <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d901      	bls.n	80075bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e086      	b.n	80076ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075bc:	4b45      	ldr	r3, [pc, #276]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1f0      	bne.n	80075aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80075c8:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80075ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	031b      	lsls	r3, r3, #12
 80075d6:	493f      	ldr	r1, [pc, #252]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	628b      	str	r3, [r1, #40]	; 0x28
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	3b01      	subs	r3, #1
 80075ec:	025b      	lsls	r3, r3, #9
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	431a      	orrs	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	041b      	lsls	r3, r3, #16
 80075fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	3b01      	subs	r3, #1
 8007606:	061b      	lsls	r3, r3, #24
 8007608:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800760c:	4931      	ldr	r1, [pc, #196]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800760e:	4313      	orrs	r3, r2
 8007610:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007612:	4b30      	ldr	r3, [pc, #192]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	492d      	ldr	r1, [pc, #180]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007620:	4313      	orrs	r3, r2
 8007622:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007624:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	f023 0220 	bic.w	r2, r3, #32
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4928      	ldr	r1, [pc, #160]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007632:	4313      	orrs	r3, r2
 8007634:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007636:	4b27      	ldr	r3, [pc, #156]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	4a26      	ldr	r2, [pc, #152]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800763c:	f023 0310 	bic.w	r3, r3, #16
 8007640:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <RCCEx_PLL2_Config+0x160>)
 8007648:	4013      	ands	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	69d2      	ldr	r2, [r2, #28]
 800764e:	00d2      	lsls	r2, r2, #3
 8007650:	4920      	ldr	r1, [pc, #128]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007652:	4313      	orrs	r3, r2
 8007654:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007656:	4b1f      	ldr	r3, [pc, #124]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800765c:	f043 0310 	orr.w	r3, r3, #16
 8007660:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007668:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800766e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007672:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007674:	e00f      	b.n	8007696 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b01      	cmp	r3, #1
 800767a:	d106      	bne.n	800768a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800767c:	4b15      	ldr	r3, [pc, #84]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800767e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007680:	4a14      	ldr	r2, [pc, #80]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007686:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007688:	e005      	b.n	8007696 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800768a:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	4a11      	ldr	r2, [pc, #68]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007694:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007696:	4b0f      	ldr	r3, [pc, #60]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 800769c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a2:	f7fa f831 	bl	8001708 <HAL_GetTick>
 80076a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076a8:	e008      	b.n	80076bc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80076aa:	f7fa f82d 	bl	8001708 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e006      	b.n	80076ca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80076bc:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <RCCEx_PLL2_Config+0x15c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0f0      	beq.n	80076aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	58024400 	.word	0x58024400
 80076d8:	ffff0007 	.word	0xffff0007

080076dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076ea:	4b53      	ldr	r3, [pc, #332]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80076ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b03      	cmp	r3, #3
 80076f4:	d101      	bne.n	80076fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e099      	b.n	800782e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80076fa:	4b4f      	ldr	r3, [pc, #316]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a4e      	ldr	r2, [pc, #312]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007706:	f7f9 ffff 	bl	8001708 <HAL_GetTick>
 800770a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800770c:	e008      	b.n	8007720 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800770e:	f7f9 fffb 	bl	8001708 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	2b02      	cmp	r3, #2
 800771a:	d901      	bls.n	8007720 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800771c:	2303      	movs	r3, #3
 800771e:	e086      	b.n	800782e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007720:	4b45      	ldr	r3, [pc, #276]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1f0      	bne.n	800770e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800772c:	4b42      	ldr	r3, [pc, #264]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800772e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007730:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	051b      	lsls	r3, r3, #20
 800773a:	493f      	ldr	r1, [pc, #252]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800773c:	4313      	orrs	r3, r2
 800773e:	628b      	str	r3, [r1, #40]	; 0x28
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	3b01      	subs	r3, #1
 8007746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	3b01      	subs	r3, #1
 8007750:	025b      	lsls	r3, r3, #9
 8007752:	b29b      	uxth	r3, r3
 8007754:	431a      	orrs	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	3b01      	subs	r3, #1
 800775c:	041b      	lsls	r3, r3, #16
 800775e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	3b01      	subs	r3, #1
 800776a:	061b      	lsls	r3, r3, #24
 800776c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007770:	4931      	ldr	r1, [pc, #196]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007772:	4313      	orrs	r3, r2
 8007774:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007776:	4b30      	ldr	r3, [pc, #192]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	492d      	ldr	r1, [pc, #180]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007788:	4b2b      	ldr	r3, [pc, #172]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	4928      	ldr	r1, [pc, #160]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007796:	4313      	orrs	r3, r2
 8007798:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800779a:	4b27      	ldr	r3, [pc, #156]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 800779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779e:	4a26      	ldr	r2, [pc, #152]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80077a6:	4b24      	ldr	r3, [pc, #144]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077aa:	4b24      	ldr	r3, [pc, #144]	; (800783c <RCCEx_PLL3_Config+0x160>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	69d2      	ldr	r2, [r2, #28]
 80077b2:	00d2      	lsls	r2, r2, #3
 80077b4:	4920      	ldr	r1, [pc, #128]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80077ba:	4b1f      	ldr	r3, [pc, #124]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077be:	4a1e      	ldr	r2, [pc, #120]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d106      	bne.n	80077da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80077cc:	4b1a      	ldr	r3, [pc, #104]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a19      	ldr	r2, [pc, #100]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077d8:	e00f      	b.n	80077fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d106      	bne.n	80077ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80077e0:	4b15      	ldr	r3, [pc, #84]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	4a14      	ldr	r2, [pc, #80]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077ec:	e005      	b.n	80077fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80077ee:	4b12      	ldr	r3, [pc, #72]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f2:	4a11      	ldr	r2, [pc, #68]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80077f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80077fa:	4b0f      	ldr	r3, [pc, #60]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a0e      	ldr	r2, [pc, #56]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007806:	f7f9 ff7f 	bl	8001708 <HAL_GetTick>
 800780a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800780c:	e008      	b.n	8007820 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800780e:	f7f9 ff7b 	bl	8001708 <HAL_GetTick>
 8007812:	4602      	mov	r2, r0
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	d901      	bls.n	8007820 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800781c:	2303      	movs	r3, #3
 800781e:	e006      	b.n	800782e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007820:	4b05      	ldr	r3, [pc, #20]	; (8007838 <RCCEx_PLL3_Config+0x15c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0f0      	beq.n	800780e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	58024400 	.word	0x58024400
 800783c:	ffff0007 	.word	0xffff0007

08007840 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d101      	bne.n	8007852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e0f1      	b.n	8007a36 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a78      	ldr	r2, [pc, #480]	; (8007a40 <HAL_SPI_Init+0x200>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d00f      	beq.n	8007882 <HAL_SPI_Init+0x42>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a77      	ldr	r2, [pc, #476]	; (8007a44 <HAL_SPI_Init+0x204>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d00a      	beq.n	8007882 <HAL_SPI_Init+0x42>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a75      	ldr	r2, [pc, #468]	; (8007a48 <HAL_SPI_Init+0x208>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d005      	beq.n	8007882 <HAL_SPI_Init+0x42>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	d901      	bls.n	8007882 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e0d9      	b.n	8007a36 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 ff52 	bl	800872c <SPI_GetPacketSize>
 8007888:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a6c      	ldr	r2, [pc, #432]	; (8007a40 <HAL_SPI_Init+0x200>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d00c      	beq.n	80078ae <HAL_SPI_Init+0x6e>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a6a      	ldr	r2, [pc, #424]	; (8007a44 <HAL_SPI_Init+0x204>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d007      	beq.n	80078ae <HAL_SPI_Init+0x6e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a69      	ldr	r2, [pc, #420]	; (8007a48 <HAL_SPI_Init+0x208>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d002      	beq.n	80078ae <HAL_SPI_Init+0x6e>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d811      	bhi.n	80078d2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078b2:	4a63      	ldr	r2, [pc, #396]	; (8007a40 <HAL_SPI_Init+0x200>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a61      	ldr	r2, [pc, #388]	; (8007a44 <HAL_SPI_Init+0x204>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_SPI_Init+0x8c>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a60      	ldr	r2, [pc, #384]	; (8007a48 <HAL_SPI_Init+0x208>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d104      	bne.n	80078d6 <HAL_SPI_Init+0x96>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b10      	cmp	r3, #16
 80078d0:	d901      	bls.n	80078d6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e0af      	b.n	8007a36 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d106      	bne.n	80078f0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7f9 fb16 	bl	8000f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f022 0201 	bic.w	r2, r2, #1
 8007906:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007912:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800791c:	d119      	bne.n	8007952 <HAL_SPI_Init+0x112>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007926:	d103      	bne.n	8007930 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007934:	2b00      	cmp	r3, #0
 8007936:	d10c      	bne.n	8007952 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800793c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007940:	d107      	bne.n	8007952 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007950:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	69da      	ldr	r2, [r3, #28]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	431a      	orrs	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	431a      	orrs	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007964:	ea42 0103 	orr.w	r1, r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	68da      	ldr	r2, [r3, #12]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	431a      	orrs	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	431a      	orrs	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b2:	ea42 0103 	orr.w	r1, r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d113      	bne.n	80079f2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	40013000 	.word	0x40013000
 8007a44:	40003800 	.word	0x40003800
 8007a48:	40003c00 	.word	0x40003c00

08007a4c <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	4613      	mov	r3, r2
 8007a58:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d110      	bne.n	8007a88 <HAL_SPI_Receive_DMA+0x3c>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6e:	d10b      	bne.n	8007a88 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2204      	movs	r2, #4
 8007a74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f940 	bl	8007d04 <HAL_SPI_TransmitReceive_DMA>
 8007a84:	4603      	mov	r3, r0
 8007a86:	e130      	b.n	8007cea <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d101      	bne.n	8007a96 <HAL_SPI_Receive_DMA+0x4a>
 8007a92:	2302      	movs	r3, #2
 8007a94:	e129      	b.n	8007cea <HAL_SPI_Receive_DMA+0x29e>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d007      	beq.n	8007aba <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8007aaa:	2302      	movs	r3, #2
 8007aac:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ab6:	7dfb      	ldrb	r3, [r7, #23]
 8007ab8:	e117      	b.n	8007cea <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d002      	beq.n	8007ac6 <HAL_SPI_Receive_DMA+0x7a>
 8007ac0:	88fb      	ldrh	r3, [r7, #6]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d107      	bne.n	8007ad6 <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	e109      	b.n	8007cea <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2204      	movs	r2, #4
 8007ada:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	88fa      	ldrh	r2, [r7, #6]
 8007af0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	88fa      	ldrh	r2, [r7, #6]
 8007af8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007b20:	d107      	bne.n	8007b32 <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b30:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	2b0f      	cmp	r3, #15
 8007b38:	d905      	bls.n	8007b46 <HAL_SPI_Receive_DMA+0xfa>
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b3e:	699b      	ldr	r3, [r3, #24]
 8007b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b44:	d10f      	bne.n	8007b66 <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007b4a:	2b07      	cmp	r3, #7
 8007b4c:	d913      	bls.n	8007b76 <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b58:	d00d      	beq.n	8007b76 <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b5e:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b64:	d007      	beq.n	8007b76 <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007b72:	7dfb      	ldrb	r3, [r7, #23]
 8007b74:	e0b9      	b.n	8007cea <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b84:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	2b07      	cmp	r3, #7
 8007b8c:	d820      	bhi.n	8007bd0 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b98:	d109      	bne.n	8007bae <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	105b      	asrs	r3, r3, #1
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bb8:	d11e      	bne.n	8007bf8 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3303      	adds	r3, #3
 8007bc4:	109b      	asrs	r3, r3, #2
 8007bc6:	b29a      	uxth	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007bce:	e013      	b.n	8007bf8 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	68db      	ldr	r3, [r3, #12]
 8007bd4:	2b0f      	cmp	r3, #15
 8007bd6:	d80f      	bhi.n	8007bf8 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007be2:	d109      	bne.n	8007bf8 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3301      	adds	r3, #1
 8007bee:	105b      	asrs	r3, r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfc:	4a3d      	ldr	r2, [pc, #244]	; (8007cf4 <HAL_SPI_Receive_DMA+0x2a8>)
 8007bfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c04:	4a3c      	ldr	r2, [pc, #240]	; (8007cf8 <HAL_SPI_Receive_DMA+0x2ac>)
 8007c06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c0c:	4a3b      	ldr	r2, [pc, #236]	; (8007cfc <HAL_SPI_Receive_DMA+0x2b0>)
 8007c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c14:	2200      	movs	r2, #0
 8007c16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	3330      	adds	r3, #48	; 0x30
 8007c22:	4619      	mov	r1, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c28:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007c30:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007c32:	f7fa fa25 	bl	8002080 <HAL_DMA_Start_IT>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d013      	beq.n	8007c64 <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c42:	f043 0210 	orr.w	r2, r3, #16
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007c60:	7dfb      	ldrb	r3, [r7, #23]
 8007c62:	e042      	b.n	8007cea <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c6e:	d108      	bne.n	8007c82 <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6859      	ldr	r1, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	4b21      	ldr	r3, [pc, #132]	; (8007d00 <HAL_SPI_Receive_DMA+0x2b4>)
 8007c7c:	400b      	ands	r3, r1
 8007c7e:	6053      	str	r3, [r2, #4]
 8007c80:	e009      	b.n	8007c96 <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	685a      	ldr	r2, [r3, #4]
 8007c88:	4b1d      	ldr	r3, [pc, #116]	; (8007d00 <HAL_SPI_Receive_DMA+0x2b4>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	88f9      	ldrh	r1, [r7, #6]
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	6812      	ldr	r2, [r2, #0]
 8007c92:	430b      	orrs	r3, r1
 8007c94:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ca4:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8007cb4:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f042 0201 	orr.w	r2, r2, #1
 8007cc4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cce:	d107      	bne.n	8007ce0 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cde:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	08008539 	.word	0x08008539
 8007cf8:	080084ad 	.word	0x080084ad
 8007cfc:	08008571 	.word	0x08008571
 8007d00:	ffff0000 	.word	0xffff0000

08007d04 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
 8007d10:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e1b4      	b.n	800808e <HAL_SPI_TransmitReceive_DMA+0x38a>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d32:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d3a:	7dbb      	ldrb	r3, [r7, #22]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d012      	beq.n	8007d66 <HAL_SPI_TransmitReceive_DMA+0x62>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d46:	d106      	bne.n	8007d56 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007d50:	7dbb      	ldrb	r3, [r7, #22]
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	d007      	beq.n	8007d66 <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007d56:	2302      	movs	r3, #2
 8007d58:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	e193      	b.n	800808e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007d72:	887b      	ldrh	r3, [r7, #2]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d107      	bne.n	8007d88 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007d84:	7dfb      	ldrb	r3, [r7, #23]
 8007d86:	e182      	b.n	800808e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b04      	cmp	r3, #4
 8007d92:	d003      	beq.n	8007d9c <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2205      	movs	r2, #5
 8007d98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	887a      	ldrh	r2, [r7, #2]
 8007dae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	887a      	ldrh	r2, [r7, #2]
 8007db6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	887a      	ldrh	r2, [r7, #2]
 8007dc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	887a      	ldrh	r2, [r7, #2]
 8007dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	689a      	ldr	r2, [r3, #8]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007dea:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b0f      	cmp	r3, #15
 8007df2:	d905      	bls.n	8007e00 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dfe:	d10f      	bne.n	8007e20 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d913      	bls.n	8007e30 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e12:	d00d      	beq.n	8007e30 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e18:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1e:	d007      	beq.n	8007e30 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e2c:	7dfb      	ldrb	r3, [r7, #23]
 8007e2e:	e12e      	b.n	800808e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b07      	cmp	r3, #7
 8007e36:	d840      	bhi.n	8007eba <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e42:	d109      	bne.n	8007e58 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	105b      	asrs	r3, r3, #1
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e62:	d109      	bne.n	8007e78 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	3303      	adds	r3, #3
 8007e6e:	109b      	asrs	r3, r3, #2
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e82:	d109      	bne.n	8007e98 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	105b      	asrs	r3, r3, #1
 8007e90:	b29a      	uxth	r2, r3
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea2:	d12e      	bne.n	8007f02 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3303      	adds	r3, #3
 8007eae:	109b      	asrs	r3, r3, #2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007eb8:	e023      	b.n	8007f02 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68db      	ldr	r3, [r3, #12]
 8007ebe:	2b0f      	cmp	r3, #15
 8007ec0:	d81f      	bhi.n	8007f02 <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ecc:	d109      	bne.n	8007ee2 <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	105b      	asrs	r3, r3, #1
 8007eda:	b29a      	uxth	r2, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007eec:	d109      	bne.n	8007f02 <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	105b      	asrs	r3, r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d108      	bne.n	8007f20 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f12:	4a61      	ldr	r2, [pc, #388]	; (8008098 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8007f14:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f1a:	4a60      	ldr	r2, [pc, #384]	; (800809c <HAL_SPI_TransmitReceive_DMA+0x398>)
 8007f1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007f1e:	e007      	b.n	8007f30 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f24:	4a5e      	ldr	r2, [pc, #376]	; (80080a0 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8007f26:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f2c:	4a5d      	ldr	r2, [pc, #372]	; (80080a4 <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8007f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f34:	4a5c      	ldr	r2, [pc, #368]	; (80080a8 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8007f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3330      	adds	r3, #48	; 0x30
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f50:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f58:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007f5a:	f7fa f891 	bl	8002080 <HAL_DMA_Start_IT>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d013      	beq.n	8007f8c <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6a:	f043 0210 	orr.w	r2, r3, #16
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007f88:	7dfb      	ldrb	r3, [r7, #23]
 8007f8a:	e080      	b.n	800808e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f9a:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fa8:	2200      	movs	r2, #0
 8007faa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007fb8:	2200      	movs	r2, #0
 8007fba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3320      	adds	r3, #32
 8007fcc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fd4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007fd6:	f7fa f853 	bl	8002080 <HAL_DMA_Start_IT>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d013      	beq.n	8008008 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fe6:	f043 0210 	orr.w	r2, r3, #16
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	e042      	b.n	800808e <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008012:	d108      	bne.n	8008026 <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6859      	ldr	r1, [r3, #4]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b23      	ldr	r3, [pc, #140]	; (80080ac <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8008020:	400b      	ands	r3, r1
 8008022:	6053      	str	r3, [r2, #4]
 8008024:	e009      	b.n	800803a <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	685a      	ldr	r2, [r3, #4]
 800802c:	4b1f      	ldr	r3, [pc, #124]	; (80080ac <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 800802e:	4013      	ands	r3, r2
 8008030:	8879      	ldrh	r1, [r7, #2]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	6812      	ldr	r2, [r2, #0]
 8008036:	430b      	orrs	r3, r1
 8008038:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008048:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8008058:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f042 0201 	orr.w	r2, r2, #1
 8008068:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008072:	d107      	bne.n	8008084 <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008082:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	08008539 	.word	0x08008539
 800809c:	080084ad 	.word	0x080084ad
 80080a0:	08008555 	.word	0x08008555
 80080a4:	080084f3 	.word	0x080084f3
 80080a8:	08008571 	.word	0x08008571
 80080ac:	ffff0000 	.word	0xffff0000

080080b0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	695b      	ldr	r3, [r3, #20]
 80080c6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80080c8:	6a3a      	ldr	r2, [r7, #32]
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4013      	ands	r3, r2
 80080ce:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80080e2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3330      	adds	r3, #48	; 0x30
 80080ea:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d113      	bne.n	800811e <HAL_SPI_IRQHandler+0x6e>
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10e      	bne.n	800811e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008106:	2b00      	cmp	r3, #0
 8008108:	d009      	beq.n	800811e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	4798      	blx	r3
    handled = 1UL;
 800811a:	2301      	movs	r3, #1
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10f      	bne.n	8008148 <HAL_SPI_IRQHandler+0x98>
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00a      	beq.n	8008148 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008138:	2b00      	cmp	r3, #0
 800813a:	d105      	bne.n	8008148 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
    handled = 1UL;
 8008144:	2301      	movs	r3, #1
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	f003 0320 	and.w	r3, r3, #32
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10f      	bne.n	8008172 <HAL_SPI_IRQHandler+0xc2>
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00a      	beq.n	8008172 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
    handled = 1UL;
 800816e:	2301      	movs	r3, #1
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 815a 	bne.w	800842e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	f003 0308 	and.w	r3, r3, #8
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 808b 	beq.w	800829c <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	699a      	ldr	r2, [r3, #24]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f042 0208 	orr.w	r2, r2, #8
 8008194:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	699a      	ldr	r2, [r3, #24]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f042 0210 	orr.w	r2, r2, #16
 80081a4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	699a      	ldr	r2, [r3, #24]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081b4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f022 0208 	bic.w	r2, r2, #8
 80081c4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d13d      	bne.n	8008250 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80081d4:	e036      	b.n	8008244 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	2b0f      	cmp	r3, #15
 80081dc:	d90b      	bls.n	80081f6 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80081e8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081ee:	1d1a      	adds	r2, r3, #4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	665a      	str	r2, [r3, #100]	; 0x64
 80081f4:	e01d      	b.n	8008232 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	2b07      	cmp	r3, #7
 80081fc:	d90b      	bls.n	8008216 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	8812      	ldrh	r2, [r2, #0]
 8008206:	b292      	uxth	r2, r2
 8008208:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800820e:	1c9a      	adds	r2, r3, #2
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	665a      	str	r2, [r3, #100]	; 0x64
 8008214:	e00d      	b.n	8008232 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008222:	7812      	ldrb	r2, [r2, #0]
 8008224:	b2d2      	uxtb	r2, r2
 8008226:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800822c:	1c5a      	adds	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008238:	b29b      	uxth	r3, r3
 800823a:	3b01      	subs	r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800824a:	b29b      	uxth	r3, r3
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1c2      	bne.n	80081d6 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f9cb 	bl	80085ec <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f915 	bl	8008498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800826e:	e0e3      	b.n	8008438 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008270:	7cfb      	ldrb	r3, [r7, #19]
 8008272:	2b05      	cmp	r3, #5
 8008274:	d103      	bne.n	800827e <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f8f0 	bl	800845c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800827c:	e0d9      	b.n	8008432 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800827e:	7cfb      	ldrb	r3, [r7, #19]
 8008280:	2b04      	cmp	r3, #4
 8008282:	d103      	bne.n	800828c <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7f8 fa05 	bl	8000694 <HAL_SPI_RxCpltCallback>
    return;
 800828a:	e0d2      	b.n	8008432 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800828c:	7cfb      	ldrb	r3, [r7, #19]
 800828e:	2b03      	cmp	r3, #3
 8008290:	f040 80cf 	bne.w	8008432 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f8d7 	bl	8008448 <HAL_SPI_TxCpltCallback>
    return;
 800829a:	e0ca      	b.n	8008432 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00d      	beq.n	80082c2 <HAL_SPI_IRQHandler+0x212>
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	f003 0308 	and.w	r3, r3, #8
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d008      	beq.n	80082c2 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	699a      	ldr	r2, [r3, #24]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082be:	619a      	str	r2, [r3, #24]

    return;
 80082c0:	e0ba      	b.n	8008438 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	f403 7358 	and.w	r3, r3, #864	; 0x360
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 80b5 	beq.w	8008438 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00f      	beq.n	80082f8 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082de:	f043 0204 	orr.w	r2, r3, #4
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082f6:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00f      	beq.n	8008322 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008308:	f043 0201 	orr.w	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	699a      	ldr	r2, [r3, #24]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008320:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00f      	beq.n	800834c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008332:	f043 0208 	orr.w	r2, r3, #8
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	699a      	ldr	r2, [r3, #24]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800834a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	f003 0320 	and.w	r3, r3, #32
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00f      	beq.n	8008376 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800835c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	699a      	ldr	r2, [r3, #24]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0220 	orr.w	r2, r2, #32
 8008374:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800837c:	2b00      	cmp	r3, #0
 800837e:	d05a      	beq.n	8008436 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f022 0201 	bic.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6919      	ldr	r1, [r3, #16]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b29      	ldr	r3, [pc, #164]	; (8008440 <HAL_SPI_IRQHandler+0x390>)
 800839c:	400b      	ands	r3, r1
 800839e:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083a6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083aa:	d138      	bne.n	800841e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80083ba:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d013      	beq.n	80083ec <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083c8:	4a1e      	ldr	r2, [pc, #120]	; (8008444 <HAL_SPI_IRQHandler+0x394>)
 80083ca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7fa f8bf 	bl	8002554 <HAL_DMA_Abort_IT>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d007      	beq.n	80083ec <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d020      	beq.n	8008436 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083f8:	4a12      	ldr	r2, [pc, #72]	; (8008444 <HAL_SPI_IRQHandler+0x394>)
 80083fa:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008400:	4618      	mov	r0, r3
 8008402:	f7fa f8a7 	bl	8002554 <HAL_DMA_Abort_IT>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d014      	beq.n	8008436 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008412:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800841c:	e00b      	b.n	8008436 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2201      	movs	r2, #1
 8008422:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f836 	bl	8008498 <HAL_SPI_ErrorCallback>
    return;
 800842c:	e003      	b.n	8008436 <HAL_SPI_IRQHandler+0x386>
    return;
 800842e:	bf00      	nop
 8008430:	e002      	b.n	8008438 <HAL_SPI_IRQHandler+0x388>
    return;
 8008432:	bf00      	nop
 8008434:	e000      	b.n	8008438 <HAL_SPI_IRQHandler+0x388>
    return;
 8008436:	bf00      	nop
  }
}
 8008438:	3728      	adds	r7, #40	; 0x28
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	fffffc94 	.word	0xfffffc94
 8008444:	080085b7 	.word	0x080085b7

08008448 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008448:	b480      	push	{r7}
 800844a:	b083      	sub	sp, #12
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008450:	bf00      	nop
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b07      	cmp	r3, #7
 80084c4:	d011      	beq.n	80084ea <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084ca:	69db      	ldr	r3, [r3, #28]
 80084cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d0:	d103      	bne.n	80084da <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80084d2:	68f8      	ldr	r0, [r7, #12]
 80084d4:	f7f8 f8de 	bl	8000694 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80084d8:	e007      	b.n	80084ea <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	691a      	ldr	r2, [r3, #16]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f042 0208 	orr.w	r2, r2, #8
 80084e8:	611a      	str	r2, [r3, #16]
}
 80084ea:	bf00      	nop
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008506:	b2db      	uxtb	r3, r3
 8008508:	2b07      	cmp	r3, #7
 800850a:	d011      	beq.n	8008530 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008516:	d103      	bne.n	8008520 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff ff9f 	bl	800845c <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800851e:	e007      	b.n	8008530 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691a      	ldr	r2, [r3, #16]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f042 0208 	orr.w	r2, r2, #8
 800852e:	611a      	str	r2, [r3, #16]
}
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008544:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f7ff ff92 	bl	8008470 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800854c:	bf00      	nop
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008560:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff ff8e 	bl	8008484 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008568:	bf00      	nop
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b084      	sub	sp, #16
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fb f958 	bl	8003834 <HAL_DMA_GetError>
 8008584:	4603      	mov	r3, r0
 8008586:	2b02      	cmp	r3, #2
 8008588:	d011      	beq.n	80085ae <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f000 f82e 	bl	80085ec <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008596:	f043 0210 	orr.w	r2, r3, #16
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f7ff ff75 	bl	8008498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80085ae:	bf00      	nop
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c2:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7ff ff5b 	bl	8008498 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80085e2:	bf00      	nop
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
	...

080085ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b085      	sub	sp, #20
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	699a      	ldr	r2, [r3, #24]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0208 	orr.w	r2, r2, #8
 800860a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	699a      	ldr	r2, [r3, #24]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0210 	orr.w	r2, r2, #16
 800861a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 0201 	bic.w	r2, r2, #1
 800862a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6919      	ldr	r1, [r3, #16]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	4b3c      	ldr	r3, [pc, #240]	; (8008728 <SPI_CloseTransfer+0x13c>)
 8008638:	400b      	ands	r3, r1
 800863a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800864a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b04      	cmp	r3, #4
 8008656:	d014      	beq.n	8008682 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00f      	beq.n	8008682 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699a      	ldr	r2, [r3, #24]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f042 0220 	orr.w	r2, r2, #32
 8008680:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b03      	cmp	r3, #3
 800868c:	d014      	beq.n	80086b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00f      	beq.n	80086b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800869e:	f043 0204 	orr.w	r2, r3, #4
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699a      	ldr	r2, [r3, #24]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00f      	beq.n	80086e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086c8:	f043 0201 	orr.w	r2, r3, #1
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	699a      	ldr	r2, [r3, #24]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00f      	beq.n	800870c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086f2:	f043 0208 	orr.w	r2, r3, #8
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699a      	ldr	r2, [r3, #24]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800870a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800871c:	bf00      	nop
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr
 8008728:	fffffc90 	.word	0xfffffc90

0800872c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008738:	095b      	lsrs	r3, r3, #5
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	3301      	adds	r3, #1
 8008744:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	3307      	adds	r3, #7
 800874a:	08db      	lsrs	r3, r3, #3
 800874c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	fb02 f303 	mul.w	r3, r2, r3
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b082      	sub	sp, #8
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d101      	bne.n	8008774 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	e042      	b.n	80087fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800877a:	2b00      	cmp	r3, #0
 800877c:	d106      	bne.n	800878c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f7f8 fc74 	bl	8001074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2224      	movs	r2, #36	; 0x24
 8008790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0201 	bic.w	r2, r2, #1
 80087a2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f96b 	bl	8008a80 <UART_SetConfig>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d101      	bne.n	80087b4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	e022      	b.n	80087fa <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fec7 	bl	8009550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689a      	ldr	r2, [r3, #8]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80087e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f042 0201 	orr.w	r2, r2, #1
 80087f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 ff4e 	bl	8009694 <UART_CheckIdleState>
 80087f8:	4603      	mov	r3, r0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b08a      	sub	sp, #40	; 0x28
 8008806:	af02      	add	r7, sp, #8
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	603b      	str	r3, [r7, #0]
 800880e:	4613      	mov	r3, r2
 8008810:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008818:	2b20      	cmp	r3, #32
 800881a:	f040 8083 	bne.w	8008924 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <HAL_UART_Transmit+0x28>
 8008824:	88fb      	ldrh	r3, [r7, #6]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e07b      	b.n	8008926 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008834:	2b01      	cmp	r3, #1
 8008836:	d101      	bne.n	800883c <HAL_UART_Transmit+0x3a>
 8008838:	2302      	movs	r3, #2
 800883a:	e074      	b.n	8008926 <HAL_UART_Transmit+0x124>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2221      	movs	r2, #33	; 0x21
 8008850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008854:	f7f8 ff58 	bl	8001708 <HAL_GetTick>
 8008858:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	88fa      	ldrh	r2, [r7, #6]
 8008866:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008872:	d108      	bne.n	8008886 <HAL_UART_Transmit+0x84>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800887c:	2300      	movs	r3, #0
 800887e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	61bb      	str	r3, [r7, #24]
 8008884:	e003      	b.n	800888e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800888a:	2300      	movs	r3, #0
 800888c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008896:	e02c      	b.n	80088f2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	9300      	str	r3, [sp, #0]
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	2200      	movs	r2, #0
 80088a0:	2180      	movs	r1, #128	; 0x80
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 ff41 	bl	800972a <UART_WaitOnFlagUntilTimeout>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e039      	b.n	8008926 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	461a      	mov	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	3302      	adds	r3, #2
 80088cc:	61bb      	str	r3, [r7, #24]
 80088ce:	e007      	b.n	80088e0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	3301      	adds	r3, #1
 80088de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	3b01      	subs	r3, #1
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1cc      	bne.n	8008898 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2200      	movs	r2, #0
 8008906:	2140      	movs	r1, #64	; 0x40
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 ff0e 	bl	800972a <UART_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e006      	b.n	8008926 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2220      	movs	r2, #32
 800891c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008920:	2300      	movs	r3, #0
 8008922:	e000      	b.n	8008926 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008924:	2302      	movs	r3, #2
  }
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
	...

08008930 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008930:	b480      	push	{r7}
 8008932:	b091      	sub	sp, #68	; 0x44
 8008934:	af00      	add	r7, sp, #0
 8008936:	60f8      	str	r0, [r7, #12]
 8008938:	60b9      	str	r1, [r7, #8]
 800893a:	4613      	mov	r3, r2
 800893c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008944:	2b20      	cmp	r3, #32
 8008946:	f040 808c 	bne.w	8008a62 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d002      	beq.n	8008956 <HAL_UART_Transmit_IT+0x26>
 8008950:	88fb      	ldrh	r3, [r7, #6]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e084      	b.n	8008a64 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_UART_Transmit_IT+0x38>
 8008964:	2302      	movs	r3, #2
 8008966:	e07d      	b.n	8008a64 <HAL_UART_Transmit_IT+0x134>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	88fa      	ldrh	r2, [r7, #6]
 800897a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	88fa      	ldrh	r2, [r7, #6]
 8008982:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2200      	movs	r2, #0
 800898a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2221      	movs	r2, #33	; 0x21
 8008998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089a4:	d12e      	bne.n	8008a04 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089ae:	d107      	bne.n	80089c0 <HAL_UART_Transmit_IT+0x90>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4a2d      	ldr	r2, [pc, #180]	; (8008a70 <HAL_UART_Transmit_IT+0x140>)
 80089bc:	675a      	str	r2, [r3, #116]	; 0x74
 80089be:	e002      	b.n	80089c6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a2c      	ldr	r2, [pc, #176]	; (8008a74 <HAL_UART_Transmit_IT+0x144>)
 80089c4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3308      	adds	r3, #8
 80089ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ee:	637a      	str	r2, [r7, #52]	; 0x34
 80089f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089f6:	e841 2300 	strex	r3, r2, [r1]
 80089fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d1e5      	bne.n	80089ce <HAL_UART_Transmit_IT+0x9e>
 8008a02:	e02c      	b.n	8008a5e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a0c:	d107      	bne.n	8008a1e <HAL_UART_Transmit_IT+0xee>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d103      	bne.n	8008a1e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4a17      	ldr	r2, [pc, #92]	; (8008a78 <HAL_UART_Transmit_IT+0x148>)
 8008a1a:	675a      	str	r2, [r3, #116]	; 0x74
 8008a1c:	e002      	b.n	8008a24 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	4a16      	ldr	r2, [pc, #88]	; (8008a7c <HAL_UART_Transmit_IT+0x14c>)
 8008a22:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a4a:	623b      	str	r3, [r7, #32]
 8008a4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	69f9      	ldr	r1, [r7, #28]
 8008a50:	6a3a      	ldr	r2, [r7, #32]
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e6      	bne.n	8008a2c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8008a62:	2302      	movs	r3, #2
  }
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3744      	adds	r7, #68	; 0x44
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	08009b15 	.word	0x08009b15
 8008a74:	08009a35 	.word	0x08009a35
 8008a78:	08009973 	.word	0x08009973
 8008a7c:	080098bb 	.word	0x080098bb

08008a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a84:	b092      	sub	sp, #72	; 0x48
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	689a      	ldr	r2, [r3, #8]
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	4bbe      	ldr	r3, [pc, #760]	; (8008da8 <UART_SetConfig+0x328>)
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	6812      	ldr	r2, [r2, #0]
 8008ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ab8:	430b      	orrs	r3, r1
 8008aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4ab3      	ldr	r2, [pc, #716]	; (8008dac <UART_SetConfig+0x32c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d004      	beq.n	8008aec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	4baf      	ldr	r3, [pc, #700]	; (8008db0 <UART_SetConfig+0x330>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	6812      	ldr	r2, [r2, #0]
 8008afa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008afc:	430b      	orrs	r3, r1
 8008afe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	f023 010f 	bic.w	r1, r3, #15
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4aa6      	ldr	r2, [pc, #664]	; (8008db4 <UART_SetConfig+0x334>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d177      	bne.n	8008c10 <UART_SetConfig+0x190>
 8008b20:	4ba5      	ldr	r3, [pc, #660]	; (8008db8 <UART_SetConfig+0x338>)
 8008b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b28:	2b28      	cmp	r3, #40	; 0x28
 8008b2a:	d86d      	bhi.n	8008c08 <UART_SetConfig+0x188>
 8008b2c:	a201      	add	r2, pc, #4	; (adr r2, 8008b34 <UART_SetConfig+0xb4>)
 8008b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b32:	bf00      	nop
 8008b34:	08008bd9 	.word	0x08008bd9
 8008b38:	08008c09 	.word	0x08008c09
 8008b3c:	08008c09 	.word	0x08008c09
 8008b40:	08008c09 	.word	0x08008c09
 8008b44:	08008c09 	.word	0x08008c09
 8008b48:	08008c09 	.word	0x08008c09
 8008b4c:	08008c09 	.word	0x08008c09
 8008b50:	08008c09 	.word	0x08008c09
 8008b54:	08008be1 	.word	0x08008be1
 8008b58:	08008c09 	.word	0x08008c09
 8008b5c:	08008c09 	.word	0x08008c09
 8008b60:	08008c09 	.word	0x08008c09
 8008b64:	08008c09 	.word	0x08008c09
 8008b68:	08008c09 	.word	0x08008c09
 8008b6c:	08008c09 	.word	0x08008c09
 8008b70:	08008c09 	.word	0x08008c09
 8008b74:	08008be9 	.word	0x08008be9
 8008b78:	08008c09 	.word	0x08008c09
 8008b7c:	08008c09 	.word	0x08008c09
 8008b80:	08008c09 	.word	0x08008c09
 8008b84:	08008c09 	.word	0x08008c09
 8008b88:	08008c09 	.word	0x08008c09
 8008b8c:	08008c09 	.word	0x08008c09
 8008b90:	08008c09 	.word	0x08008c09
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008c09 	.word	0x08008c09
 8008b9c:	08008c09 	.word	0x08008c09
 8008ba0:	08008c09 	.word	0x08008c09
 8008ba4:	08008c09 	.word	0x08008c09
 8008ba8:	08008c09 	.word	0x08008c09
 8008bac:	08008c09 	.word	0x08008c09
 8008bb0:	08008c09 	.word	0x08008c09
 8008bb4:	08008bf9 	.word	0x08008bf9
 8008bb8:	08008c09 	.word	0x08008c09
 8008bbc:	08008c09 	.word	0x08008c09
 8008bc0:	08008c09 	.word	0x08008c09
 8008bc4:	08008c09 	.word	0x08008c09
 8008bc8:	08008c09 	.word	0x08008c09
 8008bcc:	08008c09 	.word	0x08008c09
 8008bd0:	08008c09 	.word	0x08008c09
 8008bd4:	08008c01 	.word	0x08008c01
 8008bd8:	2301      	movs	r3, #1
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e222      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008be0:	2304      	movs	r3, #4
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be6:	e21e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008be8:	2308      	movs	r3, #8
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bee:	e21a      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf6:	e216      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008bf8:	2320      	movs	r3, #32
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfe:	e212      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c00:	2340      	movs	r3, #64	; 0x40
 8008c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c06:	e20e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c08:	2380      	movs	r3, #128	; 0x80
 8008c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0e:	e20a      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a69      	ldr	r2, [pc, #420]	; (8008dbc <UART_SetConfig+0x33c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d130      	bne.n	8008c7c <UART_SetConfig+0x1fc>
 8008c1a:	4b67      	ldr	r3, [pc, #412]	; (8008db8 <UART_SetConfig+0x338>)
 8008c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	d826      	bhi.n	8008c74 <UART_SetConfig+0x1f4>
 8008c26:	a201      	add	r2, pc, #4	; (adr r2, 8008c2c <UART_SetConfig+0x1ac>)
 8008c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2c:	08008c45 	.word	0x08008c45
 8008c30:	08008c4d 	.word	0x08008c4d
 8008c34:	08008c55 	.word	0x08008c55
 8008c38:	08008c5d 	.word	0x08008c5d
 8008c3c:	08008c65 	.word	0x08008c65
 8008c40:	08008c6d 	.word	0x08008c6d
 8008c44:	2300      	movs	r3, #0
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e1ec      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c4c:	2304      	movs	r3, #4
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c52:	e1e8      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c54:	2308      	movs	r3, #8
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5a:	e1e4      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c5c:	2310      	movs	r3, #16
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c62:	e1e0      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c64:	2320      	movs	r3, #32
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6a:	e1dc      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c6c:	2340      	movs	r3, #64	; 0x40
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c72:	e1d8      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7a:	e1d4      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a4f      	ldr	r2, [pc, #316]	; (8008dc0 <UART_SetConfig+0x340>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d130      	bne.n	8008ce8 <UART_SetConfig+0x268>
 8008c86:	4b4c      	ldr	r3, [pc, #304]	; (8008db8 <UART_SetConfig+0x338>)
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	f003 0307 	and.w	r3, r3, #7
 8008c8e:	2b05      	cmp	r3, #5
 8008c90:	d826      	bhi.n	8008ce0 <UART_SetConfig+0x260>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x218>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008cb1 	.word	0x08008cb1
 8008c9c:	08008cb9 	.word	0x08008cb9
 8008ca0:	08008cc1 	.word	0x08008cc1
 8008ca4:	08008cc9 	.word	0x08008cc9
 8008ca8:	08008cd1 	.word	0x08008cd1
 8008cac:	08008cd9 	.word	0x08008cd9
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb6:	e1b6      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008cb8:	2304      	movs	r3, #4
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cbe:	e1b2      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008cc0:	2308      	movs	r3, #8
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cc6:	e1ae      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008cc8:	2310      	movs	r3, #16
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e1aa      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e1a6      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e1a2      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e19e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a35      	ldr	r2, [pc, #212]	; (8008dc4 <UART_SetConfig+0x344>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d130      	bne.n	8008d54 <UART_SetConfig+0x2d4>
 8008cf2:	4b31      	ldr	r3, [pc, #196]	; (8008db8 <UART_SetConfig+0x338>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	2b05      	cmp	r3, #5
 8008cfc:	d826      	bhi.n	8008d4c <UART_SetConfig+0x2cc>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <UART_SetConfig+0x284>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d1d 	.word	0x08008d1d
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	08008d35 	.word	0x08008d35
 8008d14:	08008d3d 	.word	0x08008d3d
 8008d18:	08008d45 	.word	0x08008d45
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d22:	e180      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d24:	2304      	movs	r3, #4
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d2a:	e17c      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d32:	e178      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d34:	2310      	movs	r3, #16
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e174      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d3c:	2320      	movs	r3, #32
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e170      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d44:	2340      	movs	r3, #64	; 0x40
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e16c      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d4c:	2380      	movs	r3, #128	; 0x80
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e168      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a1b      	ldr	r2, [pc, #108]	; (8008dc8 <UART_SetConfig+0x348>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d142      	bne.n	8008de4 <UART_SetConfig+0x364>
 8008d5e:	4b16      	ldr	r3, [pc, #88]	; (8008db8 <UART_SetConfig+0x338>)
 8008d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d62:	f003 0307 	and.w	r3, r3, #7
 8008d66:	2b05      	cmp	r3, #5
 8008d68:	d838      	bhi.n	8008ddc <UART_SetConfig+0x35c>
 8008d6a:	a201      	add	r2, pc, #4	; (adr r2, 8008d70 <UART_SetConfig+0x2f0>)
 8008d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d70:	08008d89 	.word	0x08008d89
 8008d74:	08008d91 	.word	0x08008d91
 8008d78:	08008d99 	.word	0x08008d99
 8008d7c:	08008da1 	.word	0x08008da1
 8008d80:	08008dcd 	.word	0x08008dcd
 8008d84:	08008dd5 	.word	0x08008dd5
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8e:	e14a      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d90:	2304      	movs	r3, #4
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d96:	e146      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008d98:	2308      	movs	r3, #8
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9e:	e142      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008da0:	2310      	movs	r3, #16
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e13e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008da8:	cfff69f3 	.word	0xcfff69f3
 8008dac:	58000c00 	.word	0x58000c00
 8008db0:	11fff4ff 	.word	0x11fff4ff
 8008db4:	40011000 	.word	0x40011000
 8008db8:	58024400 	.word	0x58024400
 8008dbc:	40004400 	.word	0x40004400
 8008dc0:	40004800 	.word	0x40004800
 8008dc4:	40004c00 	.word	0x40004c00
 8008dc8:	40005000 	.word	0x40005000
 8008dcc:	2320      	movs	r3, #32
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd2:	e128      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008dd4:	2340      	movs	r3, #64	; 0x40
 8008dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dda:	e124      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ddc:	2380      	movs	r3, #128	; 0x80
 8008dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de2:	e120      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4acb      	ldr	r2, [pc, #812]	; (8009118 <UART_SetConfig+0x698>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d176      	bne.n	8008edc <UART_SetConfig+0x45c>
 8008dee:	4bcb      	ldr	r3, [pc, #812]	; (800911c <UART_SetConfig+0x69c>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008df6:	2b28      	cmp	r3, #40	; 0x28
 8008df8:	d86c      	bhi.n	8008ed4 <UART_SetConfig+0x454>
 8008dfa:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <UART_SetConfig+0x380>)
 8008dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e00:	08008ea5 	.word	0x08008ea5
 8008e04:	08008ed5 	.word	0x08008ed5
 8008e08:	08008ed5 	.word	0x08008ed5
 8008e0c:	08008ed5 	.word	0x08008ed5
 8008e10:	08008ed5 	.word	0x08008ed5
 8008e14:	08008ed5 	.word	0x08008ed5
 8008e18:	08008ed5 	.word	0x08008ed5
 8008e1c:	08008ed5 	.word	0x08008ed5
 8008e20:	08008ead 	.word	0x08008ead
 8008e24:	08008ed5 	.word	0x08008ed5
 8008e28:	08008ed5 	.word	0x08008ed5
 8008e2c:	08008ed5 	.word	0x08008ed5
 8008e30:	08008ed5 	.word	0x08008ed5
 8008e34:	08008ed5 	.word	0x08008ed5
 8008e38:	08008ed5 	.word	0x08008ed5
 8008e3c:	08008ed5 	.word	0x08008ed5
 8008e40:	08008eb5 	.word	0x08008eb5
 8008e44:	08008ed5 	.word	0x08008ed5
 8008e48:	08008ed5 	.word	0x08008ed5
 8008e4c:	08008ed5 	.word	0x08008ed5
 8008e50:	08008ed5 	.word	0x08008ed5
 8008e54:	08008ed5 	.word	0x08008ed5
 8008e58:	08008ed5 	.word	0x08008ed5
 8008e5c:	08008ed5 	.word	0x08008ed5
 8008e60:	08008ebd 	.word	0x08008ebd
 8008e64:	08008ed5 	.word	0x08008ed5
 8008e68:	08008ed5 	.word	0x08008ed5
 8008e6c:	08008ed5 	.word	0x08008ed5
 8008e70:	08008ed5 	.word	0x08008ed5
 8008e74:	08008ed5 	.word	0x08008ed5
 8008e78:	08008ed5 	.word	0x08008ed5
 8008e7c:	08008ed5 	.word	0x08008ed5
 8008e80:	08008ec5 	.word	0x08008ec5
 8008e84:	08008ed5 	.word	0x08008ed5
 8008e88:	08008ed5 	.word	0x08008ed5
 8008e8c:	08008ed5 	.word	0x08008ed5
 8008e90:	08008ed5 	.word	0x08008ed5
 8008e94:	08008ed5 	.word	0x08008ed5
 8008e98:	08008ed5 	.word	0x08008ed5
 8008e9c:	08008ed5 	.word	0x08008ed5
 8008ea0:	08008ecd 	.word	0x08008ecd
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e0bc      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008eac:	2304      	movs	r3, #4
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb2:	e0b8      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008eb4:	2308      	movs	r3, #8
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eba:	e0b4      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ebc:	2310      	movs	r3, #16
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec2:	e0b0      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ec4:	2320      	movs	r3, #32
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eca:	e0ac      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ecc:	2340      	movs	r3, #64	; 0x40
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed2:	e0a8      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ed4:	2380      	movs	r3, #128	; 0x80
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eda:	e0a4      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a8f      	ldr	r2, [pc, #572]	; (8009120 <UART_SetConfig+0x6a0>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d130      	bne.n	8008f48 <UART_SetConfig+0x4c8>
 8008ee6:	4b8d      	ldr	r3, [pc, #564]	; (800911c <UART_SetConfig+0x69c>)
 8008ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	2b05      	cmp	r3, #5
 8008ef0:	d826      	bhi.n	8008f40 <UART_SetConfig+0x4c0>
 8008ef2:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <UART_SetConfig+0x478>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08008f11 	.word	0x08008f11
 8008efc:	08008f19 	.word	0x08008f19
 8008f00:	08008f21 	.word	0x08008f21
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08008f31 	.word	0x08008f31
 8008f0c:	08008f39 	.word	0x08008f39
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e086      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f18:	2304      	movs	r3, #4
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1e:	e082      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f20:	2308      	movs	r3, #8
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f26:	e07e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f28:	2310      	movs	r3, #16
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e07a      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f30:	2320      	movs	r3, #32
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e076      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f38:	2340      	movs	r3, #64	; 0x40
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e072      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f40:	2380      	movs	r3, #128	; 0x80
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e06e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a75      	ldr	r2, [pc, #468]	; (8009124 <UART_SetConfig+0x6a4>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d130      	bne.n	8008fb4 <UART_SetConfig+0x534>
 8008f52:	4b72      	ldr	r3, [pc, #456]	; (800911c <UART_SetConfig+0x69c>)
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	2b05      	cmp	r3, #5
 8008f5c:	d826      	bhi.n	8008fac <UART_SetConfig+0x52c>
 8008f5e:	a201      	add	r2, pc, #4	; (adr r2, 8008f64 <UART_SetConfig+0x4e4>)
 8008f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f64:	08008f7d 	.word	0x08008f7d
 8008f68:	08008f85 	.word	0x08008f85
 8008f6c:	08008f8d 	.word	0x08008f8d
 8008f70:	08008f95 	.word	0x08008f95
 8008f74:	08008f9d 	.word	0x08008f9d
 8008f78:	08008fa5 	.word	0x08008fa5
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f82:	e050      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f84:	2304      	movs	r3, #4
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f8a:	e04c      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f8c:	2308      	movs	r3, #8
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f92:	e048      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f94:	2310      	movs	r3, #16
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f9a:	e044      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008f9c:	2320      	movs	r3, #32
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e040      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008fa4:	2340      	movs	r3, #64	; 0x40
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e03c      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008fac:	2380      	movs	r3, #128	; 0x80
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e038      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	4a5b      	ldr	r2, [pc, #364]	; (8009128 <UART_SetConfig+0x6a8>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d130      	bne.n	8009020 <UART_SetConfig+0x5a0>
 8008fbe:	4b57      	ldr	r3, [pc, #348]	; (800911c <UART_SetConfig+0x69c>)
 8008fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc2:	f003 0307 	and.w	r3, r3, #7
 8008fc6:	2b05      	cmp	r3, #5
 8008fc8:	d826      	bhi.n	8009018 <UART_SetConfig+0x598>
 8008fca:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <UART_SetConfig+0x550>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08008fe9 	.word	0x08008fe9
 8008fd4:	08008ff1 	.word	0x08008ff1
 8008fd8:	08008ff9 	.word	0x08008ff9
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	08009011 	.word	0x08009011
 8008fe8:	2302      	movs	r3, #2
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fee:	e01a      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ff6:	e016      	b.n	8009026 <UART_SetConfig+0x5a6>
 8008ff8:	2308      	movs	r3, #8
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ffe:	e012      	b.n	8009026 <UART_SetConfig+0x5a6>
 8009000:	2310      	movs	r3, #16
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e00e      	b.n	8009026 <UART_SetConfig+0x5a6>
 8009008:	2320      	movs	r3, #32
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e00a      	b.n	8009026 <UART_SetConfig+0x5a6>
 8009010:	2340      	movs	r3, #64	; 0x40
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e006      	b.n	8009026 <UART_SetConfig+0x5a6>
 8009018:	2380      	movs	r3, #128	; 0x80
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e002      	b.n	8009026 <UART_SetConfig+0x5a6>
 8009020:	2380      	movs	r3, #128	; 0x80
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a3f      	ldr	r2, [pc, #252]	; (8009128 <UART_SetConfig+0x6a8>)
 800902c:	4293      	cmp	r3, r2
 800902e:	f040 80f8 	bne.w	8009222 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009032:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009036:	2b20      	cmp	r3, #32
 8009038:	dc46      	bgt.n	80090c8 <UART_SetConfig+0x648>
 800903a:	2b02      	cmp	r3, #2
 800903c:	f2c0 8082 	blt.w	8009144 <UART_SetConfig+0x6c4>
 8009040:	3b02      	subs	r3, #2
 8009042:	2b1e      	cmp	r3, #30
 8009044:	d87e      	bhi.n	8009144 <UART_SetConfig+0x6c4>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <UART_SetConfig+0x5cc>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	080090cf 	.word	0x080090cf
 8009050:	08009145 	.word	0x08009145
 8009054:	080090d7 	.word	0x080090d7
 8009058:	08009145 	.word	0x08009145
 800905c:	08009145 	.word	0x08009145
 8009060:	08009145 	.word	0x08009145
 8009064:	080090e7 	.word	0x080090e7
 8009068:	08009145 	.word	0x08009145
 800906c:	08009145 	.word	0x08009145
 8009070:	08009145 	.word	0x08009145
 8009074:	08009145 	.word	0x08009145
 8009078:	08009145 	.word	0x08009145
 800907c:	08009145 	.word	0x08009145
 8009080:	08009145 	.word	0x08009145
 8009084:	080090f7 	.word	0x080090f7
 8009088:	08009145 	.word	0x08009145
 800908c:	08009145 	.word	0x08009145
 8009090:	08009145 	.word	0x08009145
 8009094:	08009145 	.word	0x08009145
 8009098:	08009145 	.word	0x08009145
 800909c:	08009145 	.word	0x08009145
 80090a0:	08009145 	.word	0x08009145
 80090a4:	08009145 	.word	0x08009145
 80090a8:	08009145 	.word	0x08009145
 80090ac:	08009145 	.word	0x08009145
 80090b0:	08009145 	.word	0x08009145
 80090b4:	08009145 	.word	0x08009145
 80090b8:	08009145 	.word	0x08009145
 80090bc:	08009145 	.word	0x08009145
 80090c0:	08009145 	.word	0x08009145
 80090c4:	08009137 	.word	0x08009137
 80090c8:	2b40      	cmp	r3, #64	; 0x40
 80090ca:	d037      	beq.n	800913c <UART_SetConfig+0x6bc>
 80090cc:	e03a      	b.n	8009144 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80090ce:	f7fd ff95 	bl	8006ffc <HAL_RCCEx_GetD3PCLK1Freq>
 80090d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090d4:	e03c      	b.n	8009150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd ffa4 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090e4:	e034      	b.n	8009150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e6:	f107 0318 	add.w	r3, r7, #24
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fe f8f0 	bl	80072d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090f4:	e02c      	b.n	8009150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090f6:	4b09      	ldr	r3, [pc, #36]	; (800911c <UART_SetConfig+0x69c>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f003 0320 	and.w	r3, r3, #32
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d016      	beq.n	8009130 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009102:	4b06      	ldr	r3, [pc, #24]	; (800911c <UART_SetConfig+0x69c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	08db      	lsrs	r3, r3, #3
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	4a07      	ldr	r2, [pc, #28]	; (800912c <UART_SetConfig+0x6ac>)
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009114:	e01c      	b.n	8009150 <UART_SetConfig+0x6d0>
 8009116:	bf00      	nop
 8009118:	40011400 	.word	0x40011400
 800911c:	58024400 	.word	0x58024400
 8009120:	40007800 	.word	0x40007800
 8009124:	40007c00 	.word	0x40007c00
 8009128:	58000c00 	.word	0x58000c00
 800912c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009130:	4b9d      	ldr	r3, [pc, #628]	; (80093a8 <UART_SetConfig+0x928>)
 8009132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009134:	e00c      	b.n	8009150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009136:	4b9d      	ldr	r3, [pc, #628]	; (80093ac <UART_SetConfig+0x92c>)
 8009138:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800913a:	e009      	b.n	8009150 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800913c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009142:	e005      	b.n	8009150 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800914e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 81de 	beq.w	8009514 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	4a94      	ldr	r2, [pc, #592]	; (80093b0 <UART_SetConfig+0x930>)
 800915e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009162:	461a      	mov	r2, r3
 8009164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009166:	fbb3 f3f2 	udiv	r3, r3, r2
 800916a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	4613      	mov	r3, r2
 8009172:	005b      	lsls	r3, r3, #1
 8009174:	4413      	add	r3, r2
 8009176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009178:	429a      	cmp	r2, r3
 800917a:	d305      	bcc.n	8009188 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009184:	429a      	cmp	r2, r3
 8009186:	d903      	bls.n	8009190 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800918e:	e1c1      	b.n	8009514 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009192:	2200      	movs	r2, #0
 8009194:	60bb      	str	r3, [r7, #8]
 8009196:	60fa      	str	r2, [r7, #12]
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	4a84      	ldr	r2, [pc, #528]	; (80093b0 <UART_SetConfig+0x930>)
 800919e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2200      	movs	r2, #0
 80091a6:	603b      	str	r3, [r7, #0]
 80091a8:	607a      	str	r2, [r7, #4]
 80091aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091b2:	f7f7 f8ed 	bl	8000390 <__aeabi_uldivmod>
 80091b6:	4602      	mov	r2, r0
 80091b8:	460b      	mov	r3, r1
 80091ba:	4610      	mov	r0, r2
 80091bc:	4619      	mov	r1, r3
 80091be:	f04f 0200 	mov.w	r2, #0
 80091c2:	f04f 0300 	mov.w	r3, #0
 80091c6:	020b      	lsls	r3, r1, #8
 80091c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091cc:	0202      	lsls	r2, r0, #8
 80091ce:	6979      	ldr	r1, [r7, #20]
 80091d0:	6849      	ldr	r1, [r1, #4]
 80091d2:	0849      	lsrs	r1, r1, #1
 80091d4:	2000      	movs	r0, #0
 80091d6:	460c      	mov	r4, r1
 80091d8:	4605      	mov	r5, r0
 80091da:	eb12 0804 	adds.w	r8, r2, r4
 80091de:	eb43 0905 	adc.w	r9, r3, r5
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	469a      	mov	sl, r3
 80091ea:	4693      	mov	fp, r2
 80091ec:	4652      	mov	r2, sl
 80091ee:	465b      	mov	r3, fp
 80091f0:	4640      	mov	r0, r8
 80091f2:	4649      	mov	r1, r9
 80091f4:	f7f7 f8cc 	bl	8000390 <__aeabi_uldivmod>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4613      	mov	r3, r2
 80091fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009206:	d308      	bcc.n	800921a <UART_SetConfig+0x79a>
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800920e:	d204      	bcs.n	800921a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009216:	60da      	str	r2, [r3, #12]
 8009218:	e17c      	b.n	8009514 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009220:	e178      	b.n	8009514 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800922a:	f040 80c5 	bne.w	80093b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800922e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009232:	2b20      	cmp	r3, #32
 8009234:	dc48      	bgt.n	80092c8 <UART_SetConfig+0x848>
 8009236:	2b00      	cmp	r3, #0
 8009238:	db7b      	blt.n	8009332 <UART_SetConfig+0x8b2>
 800923a:	2b20      	cmp	r3, #32
 800923c:	d879      	bhi.n	8009332 <UART_SetConfig+0x8b2>
 800923e:	a201      	add	r2, pc, #4	; (adr r2, 8009244 <UART_SetConfig+0x7c4>)
 8009240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009244:	080092cf 	.word	0x080092cf
 8009248:	080092d7 	.word	0x080092d7
 800924c:	08009333 	.word	0x08009333
 8009250:	08009333 	.word	0x08009333
 8009254:	080092df 	.word	0x080092df
 8009258:	08009333 	.word	0x08009333
 800925c:	08009333 	.word	0x08009333
 8009260:	08009333 	.word	0x08009333
 8009264:	080092ef 	.word	0x080092ef
 8009268:	08009333 	.word	0x08009333
 800926c:	08009333 	.word	0x08009333
 8009270:	08009333 	.word	0x08009333
 8009274:	08009333 	.word	0x08009333
 8009278:	08009333 	.word	0x08009333
 800927c:	08009333 	.word	0x08009333
 8009280:	08009333 	.word	0x08009333
 8009284:	080092ff 	.word	0x080092ff
 8009288:	08009333 	.word	0x08009333
 800928c:	08009333 	.word	0x08009333
 8009290:	08009333 	.word	0x08009333
 8009294:	08009333 	.word	0x08009333
 8009298:	08009333 	.word	0x08009333
 800929c:	08009333 	.word	0x08009333
 80092a0:	08009333 	.word	0x08009333
 80092a4:	08009333 	.word	0x08009333
 80092a8:	08009333 	.word	0x08009333
 80092ac:	08009333 	.word	0x08009333
 80092b0:	08009333 	.word	0x08009333
 80092b4:	08009333 	.word	0x08009333
 80092b8:	08009333 	.word	0x08009333
 80092bc:	08009333 	.word	0x08009333
 80092c0:	08009333 	.word	0x08009333
 80092c4:	08009325 	.word	0x08009325
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d02e      	beq.n	800932a <UART_SetConfig+0x8aa>
 80092cc:	e031      	b.n	8009332 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092ce:	f7fc ff23 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 80092d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092d4:	e033      	b.n	800933e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d6:	f7fc ff35 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 80092da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092dc:	e02f      	b.n	800933e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e2:	4618      	mov	r0, r3
 80092e4:	f7fd fea0 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ec:	e027      	b.n	800933e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092ee:	f107 0318 	add.w	r3, r7, #24
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fd ffec 	bl	80072d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092fc:	e01f      	b.n	800933e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092fe:	4b2d      	ldr	r3, [pc, #180]	; (80093b4 <UART_SetConfig+0x934>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800930a:	4b2a      	ldr	r3, [pc, #168]	; (80093b4 <UART_SetConfig+0x934>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	08db      	lsrs	r3, r3, #3
 8009310:	f003 0303 	and.w	r3, r3, #3
 8009314:	4a24      	ldr	r2, [pc, #144]	; (80093a8 <UART_SetConfig+0x928>)
 8009316:	fa22 f303 	lsr.w	r3, r2, r3
 800931a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800931c:	e00f      	b.n	800933e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800931e:	4b22      	ldr	r3, [pc, #136]	; (80093a8 <UART_SetConfig+0x928>)
 8009320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009322:	e00c      	b.n	800933e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009324:	4b21      	ldr	r3, [pc, #132]	; (80093ac <UART_SetConfig+0x92c>)
 8009326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009328:	e009      	b.n	800933e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800932a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800932e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009330:	e005      	b.n	800933e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800933c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800933e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 80e7 	beq.w	8009514 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	4a19      	ldr	r2, [pc, #100]	; (80093b0 <UART_SetConfig+0x930>)
 800934c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009350:	461a      	mov	r2, r3
 8009352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009354:	fbb3 f3f2 	udiv	r3, r3, r2
 8009358:	005a      	lsls	r2, r3, #1
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	085b      	lsrs	r3, r3, #1
 8009360:	441a      	add	r2, r3
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	fbb2 f3f3 	udiv	r3, r2, r3
 800936a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	2b0f      	cmp	r3, #15
 8009370:	d916      	bls.n	80093a0 <UART_SetConfig+0x920>
 8009372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009378:	d212      	bcs.n	80093a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	b29b      	uxth	r3, r3
 800937e:	f023 030f 	bic.w	r3, r3, #15
 8009382:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	085b      	lsrs	r3, r3, #1
 8009388:	b29b      	uxth	r3, r3
 800938a:	f003 0307 	and.w	r3, r3, #7
 800938e:	b29a      	uxth	r2, r3
 8009390:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009392:	4313      	orrs	r3, r2
 8009394:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800939c:	60da      	str	r2, [r3, #12]
 800939e:	e0b9      	b.n	8009514 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80093a6:	e0b5      	b.n	8009514 <UART_SetConfig+0xa94>
 80093a8:	03d09000 	.word	0x03d09000
 80093ac:	003d0900 	.word	0x003d0900
 80093b0:	0800d148 	.word	0x0800d148
 80093b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80093b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80093bc:	2b20      	cmp	r3, #32
 80093be:	dc49      	bgt.n	8009454 <UART_SetConfig+0x9d4>
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	db7c      	blt.n	80094be <UART_SetConfig+0xa3e>
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	d87a      	bhi.n	80094be <UART_SetConfig+0xa3e>
 80093c8:	a201      	add	r2, pc, #4	; (adr r2, 80093d0 <UART_SetConfig+0x950>)
 80093ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ce:	bf00      	nop
 80093d0:	0800945b 	.word	0x0800945b
 80093d4:	08009463 	.word	0x08009463
 80093d8:	080094bf 	.word	0x080094bf
 80093dc:	080094bf 	.word	0x080094bf
 80093e0:	0800946b 	.word	0x0800946b
 80093e4:	080094bf 	.word	0x080094bf
 80093e8:	080094bf 	.word	0x080094bf
 80093ec:	080094bf 	.word	0x080094bf
 80093f0:	0800947b 	.word	0x0800947b
 80093f4:	080094bf 	.word	0x080094bf
 80093f8:	080094bf 	.word	0x080094bf
 80093fc:	080094bf 	.word	0x080094bf
 8009400:	080094bf 	.word	0x080094bf
 8009404:	080094bf 	.word	0x080094bf
 8009408:	080094bf 	.word	0x080094bf
 800940c:	080094bf 	.word	0x080094bf
 8009410:	0800948b 	.word	0x0800948b
 8009414:	080094bf 	.word	0x080094bf
 8009418:	080094bf 	.word	0x080094bf
 800941c:	080094bf 	.word	0x080094bf
 8009420:	080094bf 	.word	0x080094bf
 8009424:	080094bf 	.word	0x080094bf
 8009428:	080094bf 	.word	0x080094bf
 800942c:	080094bf 	.word	0x080094bf
 8009430:	080094bf 	.word	0x080094bf
 8009434:	080094bf 	.word	0x080094bf
 8009438:	080094bf 	.word	0x080094bf
 800943c:	080094bf 	.word	0x080094bf
 8009440:	080094bf 	.word	0x080094bf
 8009444:	080094bf 	.word	0x080094bf
 8009448:	080094bf 	.word	0x080094bf
 800944c:	080094bf 	.word	0x080094bf
 8009450:	080094b1 	.word	0x080094b1
 8009454:	2b40      	cmp	r3, #64	; 0x40
 8009456:	d02e      	beq.n	80094b6 <UART_SetConfig+0xa36>
 8009458:	e031      	b.n	80094be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800945a:	f7fc fe5d 	bl	8006118 <HAL_RCC_GetPCLK1Freq>
 800945e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009460:	e033      	b.n	80094ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009462:	f7fc fe6f 	bl	8006144 <HAL_RCC_GetPCLK2Freq>
 8009466:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009468:	e02f      	b.n	80094ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800946a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946e:	4618      	mov	r0, r3
 8009470:	f7fd fdda 	bl	8007028 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009478:	e027      	b.n	80094ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800947a:	f107 0318 	add.w	r3, r7, #24
 800947e:	4618      	mov	r0, r3
 8009480:	f7fd ff26 	bl	80072d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009484:	69fb      	ldr	r3, [r7, #28]
 8009486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009488:	e01f      	b.n	80094ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800948a:	4b2d      	ldr	r3, [pc, #180]	; (8009540 <UART_SetConfig+0xac0>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0320 	and.w	r3, r3, #32
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <UART_SetConfig+0xac0>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	08db      	lsrs	r3, r3, #3
 800949c:	f003 0303 	and.w	r3, r3, #3
 80094a0:	4a28      	ldr	r2, [pc, #160]	; (8009544 <UART_SetConfig+0xac4>)
 80094a2:	fa22 f303 	lsr.w	r3, r2, r3
 80094a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094a8:	e00f      	b.n	80094ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80094aa:	4b26      	ldr	r3, [pc, #152]	; (8009544 <UART_SetConfig+0xac4>)
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094ae:	e00c      	b.n	80094ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094b0:	4b25      	ldr	r3, [pc, #148]	; (8009548 <UART_SetConfig+0xac8>)
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094b4:	e009      	b.n	80094ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094bc:	e005      	b.n	80094ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80094c8:	bf00      	nop
    }

    if (pclk != 0U)
 80094ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d021      	beq.n	8009514 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d4:	4a1d      	ldr	r2, [pc, #116]	; (800954c <UART_SetConfig+0xacc>)
 80094d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094da:	461a      	mov	r2, r3
 80094dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094de:	fbb3 f2f2 	udiv	r2, r3, r2
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	085b      	lsrs	r3, r3, #1
 80094e8:	441a      	add	r2, r3
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	2b0f      	cmp	r3, #15
 80094f8:	d909      	bls.n	800950e <UART_SetConfig+0xa8e>
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009500:	d205      	bcs.n	800950e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009504:	b29a      	uxth	r2, r3
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	60da      	str	r2, [r3, #12]
 800950c:	e002      	b.n	8009514 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2201      	movs	r2, #1
 8009518:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	2201      	movs	r2, #1
 8009520:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	2200      	movs	r2, #0
 8009528:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2200      	movs	r2, #0
 800952e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009530:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009534:	4618      	mov	r0, r3
 8009536:	3748      	adds	r7, #72	; 0x48
 8009538:	46bd      	mov	sp, r7
 800953a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	0800d148 	.word	0x0800d148

08009550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800955c:	f003 0301 	and.w	r3, r3, #1
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00a      	beq.n	800957a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	f003 0302 	and.w	r3, r3, #2
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00a      	beq.n	800959c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a0:	f003 0304 	and.w	r3, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00a      	beq.n	80095be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c2:	f003 0308 	and.w	r3, r3, #8
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00a      	beq.n	80095e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	430a      	orrs	r2, r1
 80095de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	f003 0310 	and.w	r3, r3, #16
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d00a      	beq.n	8009602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009606:	f003 0320 	and.w	r3, r3, #32
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00a      	beq.n	8009624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	430a      	orrs	r2, r1
 8009622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962c:	2b00      	cmp	r3, #0
 800962e:	d01a      	beq.n	8009666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800964e:	d10a      	bne.n	8009666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	685b      	ldr	r3, [r3, #4]
 8009656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800966e:	2b00      	cmp	r3, #0
 8009670:	d00a      	beq.n	8009688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	430a      	orrs	r2, r1
 8009686:	605a      	str	r2, [r3, #4]
  }
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b086      	sub	sp, #24
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2200      	movs	r2, #0
 80096a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096a4:	f7f8 f830 	bl	8001708 <HAL_GetTick>
 80096a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d10e      	bne.n	80096d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f82f 	bl	800972a <UART_WaitOnFlagUntilTimeout>
 80096cc:	4603      	mov	r3, r0
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d001      	beq.n	80096d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e025      	b.n	8009722 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b04      	cmp	r3, #4
 80096e2:	d10e      	bne.n	8009702 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2200      	movs	r2, #0
 80096ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f819 	bl	800972a <UART_WaitOnFlagUntilTimeout>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096fe:	2303      	movs	r3, #3
 8009700:	e00f      	b.n	8009722 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2220      	movs	r2, #32
 8009706:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2220      	movs	r2, #32
 800970e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009720:	2300      	movs	r3, #0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3710      	adds	r7, #16
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b09c      	sub	sp, #112	; 0x70
 800972e:	af00      	add	r7, sp, #0
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800973a:	e0a9      	b.n	8009890 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800973c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800973e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009742:	f000 80a5 	beq.w	8009890 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009746:	f7f7 ffdf 	bl	8001708 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009752:	429a      	cmp	r2, r3
 8009754:	d302      	bcc.n	800975c <UART_WaitOnFlagUntilTimeout+0x32>
 8009756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009758:	2b00      	cmp	r3, #0
 800975a:	d140      	bne.n	80097de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800976a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800976c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009770:	667b      	str	r3, [r7, #100]	; 0x64
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800977a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800977c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009780:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e6      	bne.n	800975c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	3308      	adds	r3, #8
 8009794:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800979e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a0:	f023 0301 	bic.w	r3, r3, #1
 80097a4:	663b      	str	r3, [r7, #96]	; 0x60
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3308      	adds	r3, #8
 80097ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80097ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80097b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e5      	bne.n	800978e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2220      	movs	r2, #32
 80097ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2200      	movs	r2, #0
 80097d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80097da:	2303      	movs	r3, #3
 80097dc:	e069      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0304 	and.w	r3, r3, #4
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d051      	beq.n	8009890 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	69db      	ldr	r3, [r3, #28]
 80097f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097fa:	d149      	bne.n	8009890 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009804:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	e853 3f00 	ldrex	r3, [r3]
 8009812:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800981a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009824:	637b      	str	r3, [r7, #52]	; 0x34
 8009826:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009828:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800982a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800982c:	e841 2300 	strex	r3, r2, [r1]
 8009830:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1e6      	bne.n	8009806 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3308      	adds	r3, #8
 800983e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	e853 3f00 	ldrex	r3, [r3]
 8009846:	613b      	str	r3, [r7, #16]
   return(result);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	f023 0301 	bic.w	r3, r3, #1
 800984e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	3308      	adds	r3, #8
 8009856:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009858:	623a      	str	r2, [r7, #32]
 800985a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	69f9      	ldr	r1, [r7, #28]
 800985e:	6a3a      	ldr	r2, [r7, #32]
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	61bb      	str	r3, [r7, #24]
   return(result);
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e5      	bne.n	8009838 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e010      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	69da      	ldr	r2, [r3, #28]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	4013      	ands	r3, r2
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	bf0c      	ite	eq
 80098a0:	2301      	moveq	r3, #1
 80098a2:	2300      	movne	r3, #0
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	79fb      	ldrb	r3, [r7, #7]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	f43f af46 	beq.w	800973c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3770      	adds	r7, #112	; 0x70
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b08f      	sub	sp, #60	; 0x3c
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098c8:	2b21      	cmp	r3, #33	; 0x21
 80098ca:	d14c      	bne.n	8009966 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d132      	bne.n	800993e <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	e853 3f00 	ldrex	r3, [r3]
 80098e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ec:	637b      	str	r3, [r7, #52]	; 0x34
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	461a      	mov	r2, r3
 80098f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098f8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e6      	bne.n	80098d8 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	e853 3f00 	ldrex	r3, [r3]
 8009916:	60bb      	str	r3, [r7, #8]
   return(result);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800991e:	633b      	str	r3, [r7, #48]	; 0x30
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009928:	61bb      	str	r3, [r7, #24]
 800992a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992c:	6979      	ldr	r1, [r7, #20]
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	e841 2300 	strex	r3, r2, [r1]
 8009934:	613b      	str	r3, [r7, #16]
   return(result);
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d1e6      	bne.n	800990a <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800993c:	e013      	b.n	8009966 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009942:	781a      	ldrb	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994e:	1c5a      	adds	r2, r3, #1
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800995a:	b29b      	uxth	r3, r3
 800995c:	3b01      	subs	r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009966:	bf00      	nop
 8009968:	373c      	adds	r7, #60	; 0x3c
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009972:	b480      	push	{r7}
 8009974:	b091      	sub	sp, #68	; 0x44
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009980:	2b21      	cmp	r3, #33	; 0x21
 8009982:	d151      	bne.n	8009a28 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800998a:	b29b      	uxth	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d132      	bne.n	80099f6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009998:	e853 3f00 	ldrex	r3, [r3]
 800999c:	623b      	str	r3, [r7, #32]
   return(result);
 800999e:	6a3b      	ldr	r3, [r7, #32]
 80099a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80099a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ae:	633b      	str	r3, [r7, #48]	; 0x30
 80099b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b6:	e841 2300 	strex	r3, r2, [r1]
 80099ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1e6      	bne.n	8009990 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	e853 3f00 	ldrex	r3, [r3]
 80099ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099d6:	637b      	str	r3, [r7, #52]	; 0x34
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	461a      	mov	r2, r3
 80099de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e0:	61fb      	str	r3, [r7, #28]
 80099e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	69b9      	ldr	r1, [r7, #24]
 80099e6:	69fa      	ldr	r2, [r7, #28]
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	617b      	str	r3, [r7, #20]
   return(result);
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e6      	bne.n	80099c2 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80099f4:	e018      	b.n	8009a28 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80099fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	461a      	mov	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a0a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a10:	1c9a      	adds	r2, r3, #2
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a1c:	b29b      	uxth	r3, r3
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8009a28:	bf00      	nop
 8009a2a:	3744      	adds	r7, #68	; 0x44
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b091      	sub	sp, #68	; 0x44
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a42:	2b21      	cmp	r3, #33	; 0x21
 8009a44:	d160      	bne.n	8009b08 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009a4c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009a4e:	e057      	b.n	8009b00 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d133      	bne.n	8009ac4 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8009a6c:	6a3b      	ldr	r3, [r7, #32]
 8009a6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	3308      	adds	r3, #8
 8009a7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8009a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e5      	bne.n	8009a5c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	e853 3f00 	ldrex	r3, [r3]
 8009a9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	461a      	mov	r2, r3
 8009aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab2:	69b9      	ldr	r1, [r7, #24]
 8009ab4:	69fa      	ldr	r2, [r7, #28]
 8009ab6:	e841 2300 	strex	r3, r2, [r1]
 8009aba:	617b      	str	r3, [r7, #20]
   return(result);
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d1e6      	bne.n	8009a90 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009ac2:	e021      	b.n	8009b08 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	69db      	ldr	r3, [r3, #28]
 8009aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d013      	beq.n	8009afa <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ad6:	781a      	ldrb	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ae2:	1c5a      	adds	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	3b01      	subs	r3, #1
 8009af2:	b29a      	uxth	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009afa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009afc:	3b01      	subs	r3, #1
 8009afe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1a4      	bne.n	8009a50 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009b06:	e7ff      	b.n	8009b08 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8009b08:	bf00      	nop
 8009b0a:	3744      	adds	r7, #68	; 0x44
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b091      	sub	sp, #68	; 0x44
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b22:	2b21      	cmp	r3, #33	; 0x21
 8009b24:	d165      	bne.n	8009bf2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009b2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009b2e:	e05c      	b.n	8009bea <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d133      	bne.n	8009ba4 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3308      	adds	r3, #8
 8009b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	6a3b      	ldr	r3, [r7, #32]
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009b52:	637b      	str	r3, [r7, #52]	; 0x34
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3308      	adds	r3, #8
 8009b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b5c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e5      	bne.n	8009b3c <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	e853 3f00 	ldrex	r3, [r3]
 8009b7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b84:	633b      	str	r3, [r7, #48]	; 0x30
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b92:	6979      	ldr	r1, [r7, #20]
 8009b94:	69ba      	ldr	r2, [r7, #24]
 8009b96:	e841 2300 	strex	r3, r2, [r1]
 8009b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d1e6      	bne.n	8009b70 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009ba2:	e026      	b.n	8009bf2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d018      	beq.n	8009be4 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb6:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bc6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bcc:	1c9a      	adds	r2, r3, #2
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009be4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009be6:	3b01      	subs	r3, #1
 8009be8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009bea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d19f      	bne.n	8009b30 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009bf0:	e7ff      	b.n	8009bf2 <UART_TxISR_16BIT_FIFOEN+0xde>
 8009bf2:	bf00      	nop
 8009bf4:	3744      	adds	r7, #68	; 0x44
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b085      	sub	sp, #20
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e027      	b.n	8009c64 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2224      	movs	r2, #36	; 0x24
 8009c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0201 	bic.w	r2, r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2200      	movs	r2, #0
 8009c48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d101      	bne.n	8009c88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c84:	2302      	movs	r3, #2
 8009c86:	e02d      	b.n	8009ce4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2224      	movs	r2, #36	; 0x24
 8009c94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 f84f 	bl	8009d68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2220      	movs	r2, #32
 8009cd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d101      	bne.n	8009d04 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d00:	2302      	movs	r3, #2
 8009d02:	e02d      	b.n	8009d60 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2224      	movs	r2, #36	; 0x24
 8009d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681a      	ldr	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f022 0201 	bic.w	r2, r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f811 	bl	8009d68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2220      	movs	r2, #32
 8009d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d108      	bne.n	8009d8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d88:	e031      	b.n	8009dee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d8a:	2310      	movs	r3, #16
 8009d8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d8e:	2310      	movs	r3, #16
 8009d90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	0e5b      	lsrs	r3, r3, #25
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	f003 0307 	and.w	r3, r3, #7
 8009da0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	0f5b      	lsrs	r3, r3, #29
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	f003 0307 	and.w	r3, r3, #7
 8009db0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db2:	7bbb      	ldrb	r3, [r7, #14]
 8009db4:	7b3a      	ldrb	r2, [r7, #12]
 8009db6:	4911      	ldr	r1, [pc, #68]	; (8009dfc <UARTEx_SetNbDataToProcess+0x94>)
 8009db8:	5c8a      	ldrb	r2, [r1, r2]
 8009dba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009dbe:	7b3a      	ldrb	r2, [r7, #12]
 8009dc0:	490f      	ldr	r1, [pc, #60]	; (8009e00 <UARTEx_SetNbDataToProcess+0x98>)
 8009dc2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009dc4:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd0:	7bfb      	ldrb	r3, [r7, #15]
 8009dd2:	7b7a      	ldrb	r2, [r7, #13]
 8009dd4:	4909      	ldr	r1, [pc, #36]	; (8009dfc <UARTEx_SetNbDataToProcess+0x94>)
 8009dd6:	5c8a      	ldrb	r2, [r1, r2]
 8009dd8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ddc:	7b7a      	ldrb	r2, [r7, #13]
 8009dde:	4908      	ldr	r1, [pc, #32]	; (8009e00 <UARTEx_SetNbDataToProcess+0x98>)
 8009de0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009de2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009de6:	b29a      	uxth	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009dee:	bf00      	nop
 8009df0:	3714      	adds	r7, #20
 8009df2:	46bd      	mov	sp, r7
 8009df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop
 8009dfc:	0800d160 	.word	0x0800d160
 8009e00:	0800d168 	.word	0x0800d168

08009e04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e04:	b084      	sub	sp, #16
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	6078      	str	r0, [r7, #4]
 8009e0e:	f107 001c 	add.w	r0, r7, #28
 8009e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d120      	bne.n	8009e5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	4b2a      	ldr	r3, [pc, #168]	; (8009ed8 <USB_CoreInit+0xd4>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d105      	bne.n	8009e52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 faac 	bl	800a3b0 <USB_CoreReset>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	73fb      	strb	r3, [r7, #15]
 8009e5c:	e01a      	b.n	8009e94 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 faa0 	bl	800a3b0 <USB_CoreReset>
 8009e70:	4603      	mov	r3, r0
 8009e72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	639a      	str	r2, [r3, #56]	; 0x38
 8009e86:	e005      	b.n	8009e94 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d116      	bne.n	8009ec8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ea8:	4b0c      	ldr	r3, [pc, #48]	; (8009edc <USB_CoreInit+0xd8>)
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f043 0206 	orr.w	r2, r3, #6
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f043 0220 	orr.w	r2, r3, #32
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ed4:	b004      	add	sp, #16
 8009ed6:	4770      	bx	lr
 8009ed8:	ffbdffbf 	.word	0xffbdffbf
 8009edc:	03ee0000 	.word	0x03ee0000

08009ee0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f023 0201 	bic.w	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f1e:	78fb      	ldrb	r3, [r7, #3]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d115      	bne.n	8009f50 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f30:	2001      	movs	r0, #1
 8009f32:	f7f7 fbf5 	bl	8001720 <HAL_Delay>
      ms++;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f000 fa29 	bl	800a394 <USB_GetMode>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d01e      	beq.n	8009f86 <USB_SetCurrentMode+0x84>
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b31      	cmp	r3, #49	; 0x31
 8009f4c:	d9f0      	bls.n	8009f30 <USB_SetCurrentMode+0x2e>
 8009f4e:	e01a      	b.n	8009f86 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d115      	bne.n	8009f82 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68db      	ldr	r3, [r3, #12]
 8009f5a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f62:	2001      	movs	r0, #1
 8009f64:	f7f7 fbdc 	bl	8001720 <HAL_Delay>
      ms++;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fa10 	bl	800a394 <USB_GetMode>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d005      	beq.n	8009f86 <USB_SetCurrentMode+0x84>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b31      	cmp	r3, #49	; 0x31
 8009f7e:	d9f0      	bls.n	8009f62 <USB_SetCurrentMode+0x60>
 8009f80:	e001      	b.n	8009f86 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e005      	b.n	8009f92 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b32      	cmp	r3, #50	; 0x32
 8009f8a:	d101      	bne.n	8009f90 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e000      	b.n	8009f92 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f9c:	b084      	sub	sp, #16
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	613b      	str	r3, [r7, #16]
 8009fba:	e009      	b.n	8009fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	3340      	adds	r3, #64	; 0x40
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	4413      	add	r3, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	2b0e      	cmp	r3, #14
 8009fd4:	d9f2      	bls.n	8009fbc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d11c      	bne.n	800a016 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	68fa      	ldr	r2, [r7, #12]
 8009fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fea:	f043 0302 	orr.w	r3, r3, #2
 8009fee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]
 800a014:	e005      	b.n	800a022 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a028:	461a      	mov	r2, r3
 800a02a:	2300      	movs	r3, #0
 800a02c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a034:	4619      	mov	r1, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a03c:	461a      	mov	r2, r3
 800a03e:	680b      	ldr	r3, [r1, #0]
 800a040:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a044:	2b01      	cmp	r3, #1
 800a046:	d10c      	bne.n	800a062 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d104      	bne.n	800a058 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a04e:	2100      	movs	r1, #0
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f965 	bl	800a320 <USB_SetDevSpeed>
 800a056:	e008      	b.n	800a06a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a058:	2101      	movs	r1, #1
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f960 	bl	800a320 <USB_SetDevSpeed>
 800a060:	e003      	b.n	800a06a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a062:	2103      	movs	r1, #3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f95b 	bl	800a320 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a06a:	2110      	movs	r1, #16
 800a06c:	6878      	ldr	r0, [r7, #4]
 800a06e:	f000 f8f3 	bl	800a258 <USB_FlushTxFifo>
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f91f 	bl	800a2c0 <USB_FlushRxFifo>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d001      	beq.n	800a08c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a092:	461a      	mov	r2, r3
 800a094:	2300      	movs	r3, #0
 800a096:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09e:	461a      	mov	r2, r3
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	613b      	str	r3, [r7, #16]
 800a0b4:	e043      	b.n	800a13e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0cc:	d118      	bne.n	800a100 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d10a      	bne.n	800a0ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	015a      	lsls	r2, r3, #5
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0e6:	6013      	str	r3, [r2, #0]
 800a0e8:	e013      	b.n	800a112 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	e008      	b.n	800a112 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	015a      	lsls	r2, r3, #5
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4413      	add	r3, r2
 800a108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10c:	461a      	mov	r2, r3
 800a10e:	2300      	movs	r3, #0
 800a110:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	461a      	mov	r2, r3
 800a120:	2300      	movs	r3, #0
 800a122:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a130:	461a      	mov	r2, r3
 800a132:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a136:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	3301      	adds	r3, #1
 800a13c:	613b      	str	r3, [r7, #16]
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	693a      	ldr	r2, [r7, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	d3b7      	bcc.n	800a0b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a146:	2300      	movs	r3, #0
 800a148:	613b      	str	r3, [r7, #16]
 800a14a:	e043      	b.n	800a1d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a15e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a162:	d118      	bne.n	800a196 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10a      	bne.n	800a180 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	015a      	lsls	r2, r3, #5
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	4413      	add	r3, r2
 800a172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a176:	461a      	mov	r2, r3
 800a178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a17c:	6013      	str	r3, [r2, #0]
 800a17e:	e013      	b.n	800a1a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18c:	461a      	mov	r2, r3
 800a18e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a192:	6013      	str	r3, [r2, #0]
 800a194:	e008      	b.n	800a1a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	015a      	lsls	r2, r3, #5
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	4413      	add	r3, r2
 800a19e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	613b      	str	r3, [r7, #16]
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	693a      	ldr	r2, [r7, #16]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d3b7      	bcc.n	800a14c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	68fa      	ldr	r2, [r7, #12]
 800a1e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a1fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	2b00      	cmp	r3, #0
 800a202:	d105      	bne.n	800a210 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	f043 0210 	orr.w	r2, r3, #16
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	699a      	ldr	r2, [r3, #24]
 800a214:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <USB_DevInit+0x2b4>)
 800a216:	4313      	orrs	r3, r2
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a21c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d005      	beq.n	800a22e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	f043 0208 	orr.w	r2, r3, #8
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a230:	2b01      	cmp	r3, #1
 800a232:	d105      	bne.n	800a240 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <USB_DevInit+0x2b8>)
 800a23a:	4313      	orrs	r3, r2
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a24c:	b004      	add	sp, #16
 800a24e:	4770      	bx	lr
 800a250:	803c3800 	.word	0x803c3800
 800a254:	40000004 	.word	0x40000004

0800a258 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a258:	b480      	push	{r7}
 800a25a:	b085      	sub	sp, #20
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
 800a260:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	3301      	adds	r3, #1
 800a26a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4a13      	ldr	r2, [pc, #76]	; (800a2bc <USB_FlushTxFifo+0x64>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d901      	bls.n	800a278 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e01b      	b.n	800a2b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	daf2      	bge.n	800a266 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	019b      	lsls	r3, r3, #6
 800a288:	f043 0220 	orr.w	r2, r3, #32
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3301      	adds	r3, #1
 800a294:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	4a08      	ldr	r2, [pc, #32]	; (800a2bc <USB_FlushTxFifo+0x64>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d901      	bls.n	800a2a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	e006      	b.n	800a2b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	f003 0320 	and.w	r3, r3, #32
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d0f0      	beq.n	800a290 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a2ae:	2300      	movs	r3, #0
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3714      	adds	r7, #20
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ba:	4770      	bx	lr
 800a2bc:	00030d40 	.word	0x00030d40

0800a2c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b085      	sub	sp, #20
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	4a11      	ldr	r2, [pc, #68]	; (800a31c <USB_FlushRxFifo+0x5c>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d901      	bls.n	800a2de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e018      	b.n	800a310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	daf2      	bge.n	800a2cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2210      	movs	r2, #16
 800a2ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	4a08      	ldr	r2, [pc, #32]	; (800a31c <USB_FlushRxFifo+0x5c>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d901      	bls.n	800a302 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2fe:	2303      	movs	r3, #3
 800a300:	e006      	b.n	800a310 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	f003 0310 	and.w	r3, r3, #16
 800a30a:	2b10      	cmp	r3, #16
 800a30c:	d0f0      	beq.n	800a2f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a30e:	2300      	movs	r3, #0
}
 800a310:	4618      	mov	r0, r3
 800a312:	3714      	adds	r7, #20
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	00030d40 	.word	0x00030d40

0800a320 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	460b      	mov	r3, r1
 800a32a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	68f9      	ldr	r1, [r7, #12]
 800a33c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a340:	4313      	orrs	r3, r2
 800a342:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3714      	adds	r7, #20
 800a34a:	46bd      	mov	sp, r7
 800a34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a350:	4770      	bx	lr

0800a352 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a352:	b480      	push	{r7}
 800a354:	b085      	sub	sp, #20
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a36c:	f023 0303 	bic.w	r3, r3, #3
 800a370:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a380:	f043 0302 	orr.w	r3, r3, #2
 800a384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a386:	2300      	movs	r3, #0
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	370c      	adds	r7, #12
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	4a13      	ldr	r2, [pc, #76]	; (800a414 <USB_CoreReset+0x64>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d901      	bls.n	800a3ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e01b      	b.n	800a406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	daf2      	bge.n	800a3bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	f043 0201 	orr.w	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4a09      	ldr	r2, [pc, #36]	; (800a414 <USB_CoreReset+0x64>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d901      	bls.n	800a3f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a3f4:	2303      	movs	r3, #3
 800a3f6:	e006      	b.n	800a406 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	691b      	ldr	r3, [r3, #16]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b01      	cmp	r3, #1
 800a402:	d0f0      	beq.n	800a3e6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	00030d40 	.word	0x00030d40

0800a418 <__errno>:
 800a418:	4b01      	ldr	r3, [pc, #4]	; (800a420 <__errno+0x8>)
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	24000010 	.word	0x24000010

0800a424 <__libc_init_array>:
 800a424:	b570      	push	{r4, r5, r6, lr}
 800a426:	4d0d      	ldr	r5, [pc, #52]	; (800a45c <__libc_init_array+0x38>)
 800a428:	4c0d      	ldr	r4, [pc, #52]	; (800a460 <__libc_init_array+0x3c>)
 800a42a:	1b64      	subs	r4, r4, r5
 800a42c:	10a4      	asrs	r4, r4, #2
 800a42e:	2600      	movs	r6, #0
 800a430:	42a6      	cmp	r6, r4
 800a432:	d109      	bne.n	800a448 <__libc_init_array+0x24>
 800a434:	4d0b      	ldr	r5, [pc, #44]	; (800a464 <__libc_init_array+0x40>)
 800a436:	4c0c      	ldr	r4, [pc, #48]	; (800a468 <__libc_init_array+0x44>)
 800a438:	f002 fe5e 	bl	800d0f8 <_init>
 800a43c:	1b64      	subs	r4, r4, r5
 800a43e:	10a4      	asrs	r4, r4, #2
 800a440:	2600      	movs	r6, #0
 800a442:	42a6      	cmp	r6, r4
 800a444:	d105      	bne.n	800a452 <__libc_init_array+0x2e>
 800a446:	bd70      	pop	{r4, r5, r6, pc}
 800a448:	f855 3b04 	ldr.w	r3, [r5], #4
 800a44c:	4798      	blx	r3
 800a44e:	3601      	adds	r6, #1
 800a450:	e7ee      	b.n	800a430 <__libc_init_array+0xc>
 800a452:	f855 3b04 	ldr.w	r3, [r5], #4
 800a456:	4798      	blx	r3
 800a458:	3601      	adds	r6, #1
 800a45a:	e7f2      	b.n	800a442 <__libc_init_array+0x1e>
 800a45c:	0800d554 	.word	0x0800d554
 800a460:	0800d554 	.word	0x0800d554
 800a464:	0800d554 	.word	0x0800d554
 800a468:	0800d558 	.word	0x0800d558

0800a46c <memset>:
 800a46c:	4402      	add	r2, r0
 800a46e:	4603      	mov	r3, r0
 800a470:	4293      	cmp	r3, r2
 800a472:	d100      	bne.n	800a476 <memset+0xa>
 800a474:	4770      	bx	lr
 800a476:	f803 1b01 	strb.w	r1, [r3], #1
 800a47a:	e7f9      	b.n	800a470 <memset+0x4>

0800a47c <__cvt>:
 800a47c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47e:	ed2d 8b02 	vpush	{d8}
 800a482:	eeb0 8b40 	vmov.f64	d8, d0
 800a486:	b085      	sub	sp, #20
 800a488:	4617      	mov	r7, r2
 800a48a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a48c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a48e:	ee18 2a90 	vmov	r2, s17
 800a492:	f025 0520 	bic.w	r5, r5, #32
 800a496:	2a00      	cmp	r2, #0
 800a498:	bfb6      	itet	lt
 800a49a:	222d      	movlt	r2, #45	; 0x2d
 800a49c:	2200      	movge	r2, #0
 800a49e:	eeb1 8b40 	vneglt.f64	d8, d0
 800a4a2:	2d46      	cmp	r5, #70	; 0x46
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	701a      	strb	r2, [r3, #0]
 800a4a8:	d004      	beq.n	800a4b4 <__cvt+0x38>
 800a4aa:	2d45      	cmp	r5, #69	; 0x45
 800a4ac:	d100      	bne.n	800a4b0 <__cvt+0x34>
 800a4ae:	3401      	adds	r4, #1
 800a4b0:	2102      	movs	r1, #2
 800a4b2:	e000      	b.n	800a4b6 <__cvt+0x3a>
 800a4b4:	2103      	movs	r1, #3
 800a4b6:	ab03      	add	r3, sp, #12
 800a4b8:	9301      	str	r3, [sp, #4]
 800a4ba:	ab02      	add	r3, sp, #8
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4622      	mov	r2, r4
 800a4c0:	4633      	mov	r3, r6
 800a4c2:	eeb0 0b48 	vmov.f64	d0, d8
 800a4c6:	f000 fccb 	bl	800ae60 <_dtoa_r>
 800a4ca:	2d47      	cmp	r5, #71	; 0x47
 800a4cc:	d101      	bne.n	800a4d2 <__cvt+0x56>
 800a4ce:	07fb      	lsls	r3, r7, #31
 800a4d0:	d51a      	bpl.n	800a508 <__cvt+0x8c>
 800a4d2:	2d46      	cmp	r5, #70	; 0x46
 800a4d4:	eb00 0204 	add.w	r2, r0, r4
 800a4d8:	d10c      	bne.n	800a4f4 <__cvt+0x78>
 800a4da:	7803      	ldrb	r3, [r0, #0]
 800a4dc:	2b30      	cmp	r3, #48	; 0x30
 800a4de:	d107      	bne.n	800a4f0 <__cvt+0x74>
 800a4e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e8:	bf1c      	itt	ne
 800a4ea:	f1c4 0401 	rsbne	r4, r4, #1
 800a4ee:	6034      	strne	r4, [r6, #0]
 800a4f0:	6833      	ldr	r3, [r6, #0]
 800a4f2:	441a      	add	r2, r3
 800a4f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fc:	bf08      	it	eq
 800a4fe:	9203      	streq	r2, [sp, #12]
 800a500:	2130      	movs	r1, #48	; 0x30
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	4293      	cmp	r3, r2
 800a506:	d307      	bcc.n	800a518 <__cvt+0x9c>
 800a508:	9b03      	ldr	r3, [sp, #12]
 800a50a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a50c:	1a1b      	subs	r3, r3, r0
 800a50e:	6013      	str	r3, [r2, #0]
 800a510:	b005      	add	sp, #20
 800a512:	ecbd 8b02 	vpop	{d8}
 800a516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a518:	1c5c      	adds	r4, r3, #1
 800a51a:	9403      	str	r4, [sp, #12]
 800a51c:	7019      	strb	r1, [r3, #0]
 800a51e:	e7f0      	b.n	800a502 <__cvt+0x86>

0800a520 <__exponent>:
 800a520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a522:	4603      	mov	r3, r0
 800a524:	2900      	cmp	r1, #0
 800a526:	bfb8      	it	lt
 800a528:	4249      	neglt	r1, r1
 800a52a:	f803 2b02 	strb.w	r2, [r3], #2
 800a52e:	bfb4      	ite	lt
 800a530:	222d      	movlt	r2, #45	; 0x2d
 800a532:	222b      	movge	r2, #43	; 0x2b
 800a534:	2909      	cmp	r1, #9
 800a536:	7042      	strb	r2, [r0, #1]
 800a538:	dd2a      	ble.n	800a590 <__exponent+0x70>
 800a53a:	f10d 0407 	add.w	r4, sp, #7
 800a53e:	46a4      	mov	ip, r4
 800a540:	270a      	movs	r7, #10
 800a542:	46a6      	mov	lr, r4
 800a544:	460a      	mov	r2, r1
 800a546:	fb91 f6f7 	sdiv	r6, r1, r7
 800a54a:	fb07 1516 	mls	r5, r7, r6, r1
 800a54e:	3530      	adds	r5, #48	; 0x30
 800a550:	2a63      	cmp	r2, #99	; 0x63
 800a552:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a556:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a55a:	4631      	mov	r1, r6
 800a55c:	dcf1      	bgt.n	800a542 <__exponent+0x22>
 800a55e:	3130      	adds	r1, #48	; 0x30
 800a560:	f1ae 0502 	sub.w	r5, lr, #2
 800a564:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a568:	1c44      	adds	r4, r0, #1
 800a56a:	4629      	mov	r1, r5
 800a56c:	4561      	cmp	r1, ip
 800a56e:	d30a      	bcc.n	800a586 <__exponent+0x66>
 800a570:	f10d 0209 	add.w	r2, sp, #9
 800a574:	eba2 020e 	sub.w	r2, r2, lr
 800a578:	4565      	cmp	r5, ip
 800a57a:	bf88      	it	hi
 800a57c:	2200      	movhi	r2, #0
 800a57e:	4413      	add	r3, r2
 800a580:	1a18      	subs	r0, r3, r0
 800a582:	b003      	add	sp, #12
 800a584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a58a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a58e:	e7ed      	b.n	800a56c <__exponent+0x4c>
 800a590:	2330      	movs	r3, #48	; 0x30
 800a592:	3130      	adds	r1, #48	; 0x30
 800a594:	7083      	strb	r3, [r0, #2]
 800a596:	70c1      	strb	r1, [r0, #3]
 800a598:	1d03      	adds	r3, r0, #4
 800a59a:	e7f1      	b.n	800a580 <__exponent+0x60>
 800a59c:	0000      	movs	r0, r0
	...

0800a5a0 <_printf_float>:
 800a5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5a4:	b08b      	sub	sp, #44	; 0x2c
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a5ac:	4616      	mov	r6, r2
 800a5ae:	461f      	mov	r7, r3
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	f001 f9c3 	bl	800b93c <_localeconv_r>
 800a5b6:	f8d0 b000 	ldr.w	fp, [r0]
 800a5ba:	4658      	mov	r0, fp
 800a5bc:	f7f5 fe90 	bl	80002e0 <strlen>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	9308      	str	r3, [sp, #32]
 800a5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	3307      	adds	r3, #7
 800a5d0:	f023 0307 	bic.w	r3, r3, #7
 800a5d4:	f103 0108 	add.w	r1, r3, #8
 800a5d8:	f8c8 1000 	str.w	r1, [r8]
 800a5dc:	4682      	mov	sl, r0
 800a5de:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a5e2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a5e6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800a848 <_printf_float+0x2a8>
 800a5ea:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a5ee:	eeb0 6bc0 	vabs.f64	d6, d0
 800a5f2:	eeb4 6b47 	vcmp.f64	d6, d7
 800a5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fa:	dd24      	ble.n	800a646 <_printf_float+0xa6>
 800a5fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a604:	d502      	bpl.n	800a60c <_printf_float+0x6c>
 800a606:	232d      	movs	r3, #45	; 0x2d
 800a608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60c:	4b90      	ldr	r3, [pc, #576]	; (800a850 <_printf_float+0x2b0>)
 800a60e:	4891      	ldr	r0, [pc, #580]	; (800a854 <_printf_float+0x2b4>)
 800a610:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a614:	bf94      	ite	ls
 800a616:	4698      	movls	r8, r3
 800a618:	4680      	movhi	r8, r0
 800a61a:	2303      	movs	r3, #3
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	f022 0204 	bic.w	r2, r2, #4
 800a622:	2300      	movs	r3, #0
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	9304      	str	r3, [sp, #16]
 800a628:	9700      	str	r7, [sp, #0]
 800a62a:	4633      	mov	r3, r6
 800a62c:	aa09      	add	r2, sp, #36	; 0x24
 800a62e:	4621      	mov	r1, r4
 800a630:	4628      	mov	r0, r5
 800a632:	f000 f9d3 	bl	800a9dc <_printf_common>
 800a636:	3001      	adds	r0, #1
 800a638:	f040 808a 	bne.w	800a750 <_printf_float+0x1b0>
 800a63c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a640:	b00b      	add	sp, #44	; 0x2c
 800a642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a646:	eeb4 0b40 	vcmp.f64	d0, d0
 800a64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64e:	d709      	bvc.n	800a664 <_printf_float+0xc4>
 800a650:	ee10 3a90 	vmov	r3, s1
 800a654:	2b00      	cmp	r3, #0
 800a656:	bfbc      	itt	lt
 800a658:	232d      	movlt	r3, #45	; 0x2d
 800a65a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a65e:	487e      	ldr	r0, [pc, #504]	; (800a858 <_printf_float+0x2b8>)
 800a660:	4b7e      	ldr	r3, [pc, #504]	; (800a85c <_printf_float+0x2bc>)
 800a662:	e7d5      	b.n	800a610 <_printf_float+0x70>
 800a664:	6863      	ldr	r3, [r4, #4]
 800a666:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a66a:	9104      	str	r1, [sp, #16]
 800a66c:	1c59      	adds	r1, r3, #1
 800a66e:	d13c      	bne.n	800a6ea <_printf_float+0x14a>
 800a670:	2306      	movs	r3, #6
 800a672:	6063      	str	r3, [r4, #4]
 800a674:	2300      	movs	r3, #0
 800a676:	9303      	str	r3, [sp, #12]
 800a678:	ab08      	add	r3, sp, #32
 800a67a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a67e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a682:	ab07      	add	r3, sp, #28
 800a684:	6861      	ldr	r1, [r4, #4]
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	f10d 031b 	add.w	r3, sp, #27
 800a68e:	4628      	mov	r0, r5
 800a690:	f7ff fef4 	bl	800a47c <__cvt>
 800a694:	9b04      	ldr	r3, [sp, #16]
 800a696:	9907      	ldr	r1, [sp, #28]
 800a698:	2b47      	cmp	r3, #71	; 0x47
 800a69a:	4680      	mov	r8, r0
 800a69c:	d108      	bne.n	800a6b0 <_printf_float+0x110>
 800a69e:	1cc8      	adds	r0, r1, #3
 800a6a0:	db02      	blt.n	800a6a8 <_printf_float+0x108>
 800a6a2:	6863      	ldr	r3, [r4, #4]
 800a6a4:	4299      	cmp	r1, r3
 800a6a6:	dd41      	ble.n	800a72c <_printf_float+0x18c>
 800a6a8:	f1a9 0902 	sub.w	r9, r9, #2
 800a6ac:	fa5f f989 	uxtb.w	r9, r9
 800a6b0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a6b4:	d820      	bhi.n	800a6f8 <_printf_float+0x158>
 800a6b6:	3901      	subs	r1, #1
 800a6b8:	464a      	mov	r2, r9
 800a6ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6be:	9107      	str	r1, [sp, #28]
 800a6c0:	f7ff ff2e 	bl	800a520 <__exponent>
 800a6c4:	9a08      	ldr	r2, [sp, #32]
 800a6c6:	9004      	str	r0, [sp, #16]
 800a6c8:	1813      	adds	r3, r2, r0
 800a6ca:	2a01      	cmp	r2, #1
 800a6cc:	6123      	str	r3, [r4, #16]
 800a6ce:	dc02      	bgt.n	800a6d6 <_printf_float+0x136>
 800a6d0:	6822      	ldr	r2, [r4, #0]
 800a6d2:	07d2      	lsls	r2, r2, #31
 800a6d4:	d501      	bpl.n	800a6da <_printf_float+0x13a>
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	6123      	str	r3, [r4, #16]
 800a6da:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d0a2      	beq.n	800a628 <_printf_float+0x88>
 800a6e2:	232d      	movs	r3, #45	; 0x2d
 800a6e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6e8:	e79e      	b.n	800a628 <_printf_float+0x88>
 800a6ea:	9904      	ldr	r1, [sp, #16]
 800a6ec:	2947      	cmp	r1, #71	; 0x47
 800a6ee:	d1c1      	bne.n	800a674 <_printf_float+0xd4>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d1bf      	bne.n	800a674 <_printf_float+0xd4>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e7bc      	b.n	800a672 <_printf_float+0xd2>
 800a6f8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a6fc:	d118      	bne.n	800a730 <_printf_float+0x190>
 800a6fe:	2900      	cmp	r1, #0
 800a700:	6863      	ldr	r3, [r4, #4]
 800a702:	dd0b      	ble.n	800a71c <_printf_float+0x17c>
 800a704:	6121      	str	r1, [r4, #16]
 800a706:	b913      	cbnz	r3, 800a70e <_printf_float+0x16e>
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	07d0      	lsls	r0, r2, #31
 800a70c:	d502      	bpl.n	800a714 <_printf_float+0x174>
 800a70e:	3301      	adds	r3, #1
 800a710:	440b      	add	r3, r1
 800a712:	6123      	str	r3, [r4, #16]
 800a714:	2300      	movs	r3, #0
 800a716:	65a1      	str	r1, [r4, #88]	; 0x58
 800a718:	9304      	str	r3, [sp, #16]
 800a71a:	e7de      	b.n	800a6da <_printf_float+0x13a>
 800a71c:	b913      	cbnz	r3, 800a724 <_printf_float+0x184>
 800a71e:	6822      	ldr	r2, [r4, #0]
 800a720:	07d2      	lsls	r2, r2, #31
 800a722:	d501      	bpl.n	800a728 <_printf_float+0x188>
 800a724:	3302      	adds	r3, #2
 800a726:	e7f4      	b.n	800a712 <_printf_float+0x172>
 800a728:	2301      	movs	r3, #1
 800a72a:	e7f2      	b.n	800a712 <_printf_float+0x172>
 800a72c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a730:	9b08      	ldr	r3, [sp, #32]
 800a732:	4299      	cmp	r1, r3
 800a734:	db05      	blt.n	800a742 <_printf_float+0x1a2>
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	6121      	str	r1, [r4, #16]
 800a73a:	07d8      	lsls	r0, r3, #31
 800a73c:	d5ea      	bpl.n	800a714 <_printf_float+0x174>
 800a73e:	1c4b      	adds	r3, r1, #1
 800a740:	e7e7      	b.n	800a712 <_printf_float+0x172>
 800a742:	2900      	cmp	r1, #0
 800a744:	bfd4      	ite	le
 800a746:	f1c1 0202 	rsble	r2, r1, #2
 800a74a:	2201      	movgt	r2, #1
 800a74c:	4413      	add	r3, r2
 800a74e:	e7e0      	b.n	800a712 <_printf_float+0x172>
 800a750:	6823      	ldr	r3, [r4, #0]
 800a752:	055a      	lsls	r2, r3, #21
 800a754:	d407      	bmi.n	800a766 <_printf_float+0x1c6>
 800a756:	6923      	ldr	r3, [r4, #16]
 800a758:	4642      	mov	r2, r8
 800a75a:	4631      	mov	r1, r6
 800a75c:	4628      	mov	r0, r5
 800a75e:	47b8      	blx	r7
 800a760:	3001      	adds	r0, #1
 800a762:	d12a      	bne.n	800a7ba <_printf_float+0x21a>
 800a764:	e76a      	b.n	800a63c <_printf_float+0x9c>
 800a766:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a76a:	f240 80e2 	bls.w	800a932 <_printf_float+0x392>
 800a76e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a772:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a77a:	d133      	bne.n	800a7e4 <_printf_float+0x244>
 800a77c:	4a38      	ldr	r2, [pc, #224]	; (800a860 <_printf_float+0x2c0>)
 800a77e:	2301      	movs	r3, #1
 800a780:	4631      	mov	r1, r6
 800a782:	4628      	mov	r0, r5
 800a784:	47b8      	blx	r7
 800a786:	3001      	adds	r0, #1
 800a788:	f43f af58 	beq.w	800a63c <_printf_float+0x9c>
 800a78c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a790:	429a      	cmp	r2, r3
 800a792:	db02      	blt.n	800a79a <_printf_float+0x1fa>
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	07d8      	lsls	r0, r3, #31
 800a798:	d50f      	bpl.n	800a7ba <_printf_float+0x21a>
 800a79a:	4653      	mov	r3, sl
 800a79c:	465a      	mov	r2, fp
 800a79e:	4631      	mov	r1, r6
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	47b8      	blx	r7
 800a7a4:	3001      	adds	r0, #1
 800a7a6:	f43f af49 	beq.w	800a63c <_printf_float+0x9c>
 800a7aa:	f04f 0800 	mov.w	r8, #0
 800a7ae:	f104 091a 	add.w	r9, r4, #26
 800a7b2:	9b08      	ldr	r3, [sp, #32]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	4543      	cmp	r3, r8
 800a7b8:	dc09      	bgt.n	800a7ce <_printf_float+0x22e>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	079b      	lsls	r3, r3, #30
 800a7be:	f100 8108 	bmi.w	800a9d2 <_printf_float+0x432>
 800a7c2:	68e0      	ldr	r0, [r4, #12]
 800a7c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c6:	4298      	cmp	r0, r3
 800a7c8:	bfb8      	it	lt
 800a7ca:	4618      	movlt	r0, r3
 800a7cc:	e738      	b.n	800a640 <_printf_float+0xa0>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	464a      	mov	r2, r9
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	47b8      	blx	r7
 800a7d8:	3001      	adds	r0, #1
 800a7da:	f43f af2f 	beq.w	800a63c <_printf_float+0x9c>
 800a7de:	f108 0801 	add.w	r8, r8, #1
 800a7e2:	e7e6      	b.n	800a7b2 <_printf_float+0x212>
 800a7e4:	9b07      	ldr	r3, [sp, #28]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	dc3c      	bgt.n	800a864 <_printf_float+0x2c4>
 800a7ea:	4a1d      	ldr	r2, [pc, #116]	; (800a860 <_printf_float+0x2c0>)
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	4631      	mov	r1, r6
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	47b8      	blx	r7
 800a7f4:	3001      	adds	r0, #1
 800a7f6:	f43f af21 	beq.w	800a63c <_printf_float+0x9c>
 800a7fa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	d102      	bne.n	800a808 <_printf_float+0x268>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	07d9      	lsls	r1, r3, #31
 800a806:	d5d8      	bpl.n	800a7ba <_printf_float+0x21a>
 800a808:	4653      	mov	r3, sl
 800a80a:	465a      	mov	r2, fp
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	47b8      	blx	r7
 800a812:	3001      	adds	r0, #1
 800a814:	f43f af12 	beq.w	800a63c <_printf_float+0x9c>
 800a818:	f04f 0900 	mov.w	r9, #0
 800a81c:	f104 0a1a 	add.w	sl, r4, #26
 800a820:	9b07      	ldr	r3, [sp, #28]
 800a822:	425b      	negs	r3, r3
 800a824:	454b      	cmp	r3, r9
 800a826:	dc01      	bgt.n	800a82c <_printf_float+0x28c>
 800a828:	9b08      	ldr	r3, [sp, #32]
 800a82a:	e795      	b.n	800a758 <_printf_float+0x1b8>
 800a82c:	2301      	movs	r3, #1
 800a82e:	4652      	mov	r2, sl
 800a830:	4631      	mov	r1, r6
 800a832:	4628      	mov	r0, r5
 800a834:	47b8      	blx	r7
 800a836:	3001      	adds	r0, #1
 800a838:	f43f af00 	beq.w	800a63c <_printf_float+0x9c>
 800a83c:	f109 0901 	add.w	r9, r9, #1
 800a840:	e7ee      	b.n	800a820 <_printf_float+0x280>
 800a842:	bf00      	nop
 800a844:	f3af 8000 	nop.w
 800a848:	ffffffff 	.word	0xffffffff
 800a84c:	7fefffff 	.word	0x7fefffff
 800a850:	0800d174 	.word	0x0800d174
 800a854:	0800d178 	.word	0x0800d178
 800a858:	0800d180 	.word	0x0800d180
 800a85c:	0800d17c 	.word	0x0800d17c
 800a860:	0800d184 	.word	0x0800d184
 800a864:	9a08      	ldr	r2, [sp, #32]
 800a866:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a868:	429a      	cmp	r2, r3
 800a86a:	bfa8      	it	ge
 800a86c:	461a      	movge	r2, r3
 800a86e:	2a00      	cmp	r2, #0
 800a870:	4691      	mov	r9, r2
 800a872:	dc38      	bgt.n	800a8e6 <_printf_float+0x346>
 800a874:	2300      	movs	r3, #0
 800a876:	9305      	str	r3, [sp, #20]
 800a878:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a87c:	f104 021a 	add.w	r2, r4, #26
 800a880:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a882:	9905      	ldr	r1, [sp, #20]
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	eba3 0309 	sub.w	r3, r3, r9
 800a88a:	428b      	cmp	r3, r1
 800a88c:	dc33      	bgt.n	800a8f6 <_printf_float+0x356>
 800a88e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a892:	429a      	cmp	r2, r3
 800a894:	db3c      	blt.n	800a910 <_printf_float+0x370>
 800a896:	6823      	ldr	r3, [r4, #0]
 800a898:	07da      	lsls	r2, r3, #31
 800a89a:	d439      	bmi.n	800a910 <_printf_float+0x370>
 800a89c:	9b08      	ldr	r3, [sp, #32]
 800a89e:	9a04      	ldr	r2, [sp, #16]
 800a8a0:	9907      	ldr	r1, [sp, #28]
 800a8a2:	1a9a      	subs	r2, r3, r2
 800a8a4:	eba3 0901 	sub.w	r9, r3, r1
 800a8a8:	4591      	cmp	r9, r2
 800a8aa:	bfa8      	it	ge
 800a8ac:	4691      	movge	r9, r2
 800a8ae:	f1b9 0f00 	cmp.w	r9, #0
 800a8b2:	dc35      	bgt.n	800a920 <_printf_float+0x380>
 800a8b4:	f04f 0800 	mov.w	r8, #0
 800a8b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8bc:	f104 0a1a 	add.w	sl, r4, #26
 800a8c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a8c4:	1a9b      	subs	r3, r3, r2
 800a8c6:	eba3 0309 	sub.w	r3, r3, r9
 800a8ca:	4543      	cmp	r3, r8
 800a8cc:	f77f af75 	ble.w	800a7ba <_printf_float+0x21a>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4652      	mov	r2, sl
 800a8d4:	4631      	mov	r1, r6
 800a8d6:	4628      	mov	r0, r5
 800a8d8:	47b8      	blx	r7
 800a8da:	3001      	adds	r0, #1
 800a8dc:	f43f aeae 	beq.w	800a63c <_printf_float+0x9c>
 800a8e0:	f108 0801 	add.w	r8, r8, #1
 800a8e4:	e7ec      	b.n	800a8c0 <_printf_float+0x320>
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	4631      	mov	r1, r6
 800a8ea:	4642      	mov	r2, r8
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	47b8      	blx	r7
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d1bf      	bne.n	800a874 <_printf_float+0x2d4>
 800a8f4:	e6a2      	b.n	800a63c <_printf_float+0x9c>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	9204      	str	r2, [sp, #16]
 800a8fe:	47b8      	blx	r7
 800a900:	3001      	adds	r0, #1
 800a902:	f43f ae9b 	beq.w	800a63c <_printf_float+0x9c>
 800a906:	9b05      	ldr	r3, [sp, #20]
 800a908:	9a04      	ldr	r2, [sp, #16]
 800a90a:	3301      	adds	r3, #1
 800a90c:	9305      	str	r3, [sp, #20]
 800a90e:	e7b7      	b.n	800a880 <_printf_float+0x2e0>
 800a910:	4653      	mov	r3, sl
 800a912:	465a      	mov	r2, fp
 800a914:	4631      	mov	r1, r6
 800a916:	4628      	mov	r0, r5
 800a918:	47b8      	blx	r7
 800a91a:	3001      	adds	r0, #1
 800a91c:	d1be      	bne.n	800a89c <_printf_float+0x2fc>
 800a91e:	e68d      	b.n	800a63c <_printf_float+0x9c>
 800a920:	9a04      	ldr	r2, [sp, #16]
 800a922:	464b      	mov	r3, r9
 800a924:	4442      	add	r2, r8
 800a926:	4631      	mov	r1, r6
 800a928:	4628      	mov	r0, r5
 800a92a:	47b8      	blx	r7
 800a92c:	3001      	adds	r0, #1
 800a92e:	d1c1      	bne.n	800a8b4 <_printf_float+0x314>
 800a930:	e684      	b.n	800a63c <_printf_float+0x9c>
 800a932:	9a08      	ldr	r2, [sp, #32]
 800a934:	2a01      	cmp	r2, #1
 800a936:	dc01      	bgt.n	800a93c <_printf_float+0x39c>
 800a938:	07db      	lsls	r3, r3, #31
 800a93a:	d537      	bpl.n	800a9ac <_printf_float+0x40c>
 800a93c:	2301      	movs	r3, #1
 800a93e:	4642      	mov	r2, r8
 800a940:	4631      	mov	r1, r6
 800a942:	4628      	mov	r0, r5
 800a944:	47b8      	blx	r7
 800a946:	3001      	adds	r0, #1
 800a948:	f43f ae78 	beq.w	800a63c <_printf_float+0x9c>
 800a94c:	4653      	mov	r3, sl
 800a94e:	465a      	mov	r2, fp
 800a950:	4631      	mov	r1, r6
 800a952:	4628      	mov	r0, r5
 800a954:	47b8      	blx	r7
 800a956:	3001      	adds	r0, #1
 800a958:	f43f ae70 	beq.w	800a63c <_printf_float+0x9c>
 800a95c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a960:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a968:	d01b      	beq.n	800a9a2 <_printf_float+0x402>
 800a96a:	9b08      	ldr	r3, [sp, #32]
 800a96c:	f108 0201 	add.w	r2, r8, #1
 800a970:	3b01      	subs	r3, #1
 800a972:	4631      	mov	r1, r6
 800a974:	4628      	mov	r0, r5
 800a976:	47b8      	blx	r7
 800a978:	3001      	adds	r0, #1
 800a97a:	d10e      	bne.n	800a99a <_printf_float+0x3fa>
 800a97c:	e65e      	b.n	800a63c <_printf_float+0x9c>
 800a97e:	2301      	movs	r3, #1
 800a980:	464a      	mov	r2, r9
 800a982:	4631      	mov	r1, r6
 800a984:	4628      	mov	r0, r5
 800a986:	47b8      	blx	r7
 800a988:	3001      	adds	r0, #1
 800a98a:	f43f ae57 	beq.w	800a63c <_printf_float+0x9c>
 800a98e:	f108 0801 	add.w	r8, r8, #1
 800a992:	9b08      	ldr	r3, [sp, #32]
 800a994:	3b01      	subs	r3, #1
 800a996:	4543      	cmp	r3, r8
 800a998:	dcf1      	bgt.n	800a97e <_printf_float+0x3de>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9a0:	e6db      	b.n	800a75a <_printf_float+0x1ba>
 800a9a2:	f04f 0800 	mov.w	r8, #0
 800a9a6:	f104 091a 	add.w	r9, r4, #26
 800a9aa:	e7f2      	b.n	800a992 <_printf_float+0x3f2>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	4642      	mov	r2, r8
 800a9b0:	e7df      	b.n	800a972 <_printf_float+0x3d2>
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	464a      	mov	r2, r9
 800a9b6:	4631      	mov	r1, r6
 800a9b8:	4628      	mov	r0, r5
 800a9ba:	47b8      	blx	r7
 800a9bc:	3001      	adds	r0, #1
 800a9be:	f43f ae3d 	beq.w	800a63c <_printf_float+0x9c>
 800a9c2:	f108 0801 	add.w	r8, r8, #1
 800a9c6:	68e3      	ldr	r3, [r4, #12]
 800a9c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a9ca:	1a5b      	subs	r3, r3, r1
 800a9cc:	4543      	cmp	r3, r8
 800a9ce:	dcf0      	bgt.n	800a9b2 <_printf_float+0x412>
 800a9d0:	e6f7      	b.n	800a7c2 <_printf_float+0x222>
 800a9d2:	f04f 0800 	mov.w	r8, #0
 800a9d6:	f104 0919 	add.w	r9, r4, #25
 800a9da:	e7f4      	b.n	800a9c6 <_printf_float+0x426>

0800a9dc <_printf_common>:
 800a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	4616      	mov	r6, r2
 800a9e2:	4699      	mov	r9, r3
 800a9e4:	688a      	ldr	r2, [r1, #8]
 800a9e6:	690b      	ldr	r3, [r1, #16]
 800a9e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	bfb8      	it	lt
 800a9f0:	4613      	movlt	r3, r2
 800a9f2:	6033      	str	r3, [r6, #0]
 800a9f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a9f8:	4607      	mov	r7, r0
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	b10a      	cbz	r2, 800aa02 <_printf_common+0x26>
 800a9fe:	3301      	adds	r3, #1
 800aa00:	6033      	str	r3, [r6, #0]
 800aa02:	6823      	ldr	r3, [r4, #0]
 800aa04:	0699      	lsls	r1, r3, #26
 800aa06:	bf42      	ittt	mi
 800aa08:	6833      	ldrmi	r3, [r6, #0]
 800aa0a:	3302      	addmi	r3, #2
 800aa0c:	6033      	strmi	r3, [r6, #0]
 800aa0e:	6825      	ldr	r5, [r4, #0]
 800aa10:	f015 0506 	ands.w	r5, r5, #6
 800aa14:	d106      	bne.n	800aa24 <_printf_common+0x48>
 800aa16:	f104 0a19 	add.w	sl, r4, #25
 800aa1a:	68e3      	ldr	r3, [r4, #12]
 800aa1c:	6832      	ldr	r2, [r6, #0]
 800aa1e:	1a9b      	subs	r3, r3, r2
 800aa20:	42ab      	cmp	r3, r5
 800aa22:	dc26      	bgt.n	800aa72 <_printf_common+0x96>
 800aa24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa28:	1e13      	subs	r3, r2, #0
 800aa2a:	6822      	ldr	r2, [r4, #0]
 800aa2c:	bf18      	it	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	0692      	lsls	r2, r2, #26
 800aa32:	d42b      	bmi.n	800aa8c <_printf_common+0xb0>
 800aa34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa38:	4649      	mov	r1, r9
 800aa3a:	4638      	mov	r0, r7
 800aa3c:	47c0      	blx	r8
 800aa3e:	3001      	adds	r0, #1
 800aa40:	d01e      	beq.n	800aa80 <_printf_common+0xa4>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	68e5      	ldr	r5, [r4, #12]
 800aa46:	6832      	ldr	r2, [r6, #0]
 800aa48:	f003 0306 	and.w	r3, r3, #6
 800aa4c:	2b04      	cmp	r3, #4
 800aa4e:	bf08      	it	eq
 800aa50:	1aad      	subeq	r5, r5, r2
 800aa52:	68a3      	ldr	r3, [r4, #8]
 800aa54:	6922      	ldr	r2, [r4, #16]
 800aa56:	bf0c      	ite	eq
 800aa58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa5c:	2500      	movne	r5, #0
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	bfc4      	itt	gt
 800aa62:	1a9b      	subgt	r3, r3, r2
 800aa64:	18ed      	addgt	r5, r5, r3
 800aa66:	2600      	movs	r6, #0
 800aa68:	341a      	adds	r4, #26
 800aa6a:	42b5      	cmp	r5, r6
 800aa6c:	d11a      	bne.n	800aaa4 <_printf_common+0xc8>
 800aa6e:	2000      	movs	r0, #0
 800aa70:	e008      	b.n	800aa84 <_printf_common+0xa8>
 800aa72:	2301      	movs	r3, #1
 800aa74:	4652      	mov	r2, sl
 800aa76:	4649      	mov	r1, r9
 800aa78:	4638      	mov	r0, r7
 800aa7a:	47c0      	blx	r8
 800aa7c:	3001      	adds	r0, #1
 800aa7e:	d103      	bne.n	800aa88 <_printf_common+0xac>
 800aa80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa88:	3501      	adds	r5, #1
 800aa8a:	e7c6      	b.n	800aa1a <_printf_common+0x3e>
 800aa8c:	18e1      	adds	r1, r4, r3
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	2030      	movs	r0, #48	; 0x30
 800aa92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa96:	4422      	add	r2, r4
 800aa98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaa0:	3302      	adds	r3, #2
 800aaa2:	e7c7      	b.n	800aa34 <_printf_common+0x58>
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	4649      	mov	r1, r9
 800aaaa:	4638      	mov	r0, r7
 800aaac:	47c0      	blx	r8
 800aaae:	3001      	adds	r0, #1
 800aab0:	d0e6      	beq.n	800aa80 <_printf_common+0xa4>
 800aab2:	3601      	adds	r6, #1
 800aab4:	e7d9      	b.n	800aa6a <_printf_common+0x8e>
	...

0800aab8 <_printf_i>:
 800aab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aabc:	7e0f      	ldrb	r7, [r1, #24]
 800aabe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aac0:	2f78      	cmp	r7, #120	; 0x78
 800aac2:	4691      	mov	r9, r2
 800aac4:	4680      	mov	r8, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	469a      	mov	sl, r3
 800aaca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aace:	d807      	bhi.n	800aae0 <_printf_i+0x28>
 800aad0:	2f62      	cmp	r7, #98	; 0x62
 800aad2:	d80a      	bhi.n	800aaea <_printf_i+0x32>
 800aad4:	2f00      	cmp	r7, #0
 800aad6:	f000 80d8 	beq.w	800ac8a <_printf_i+0x1d2>
 800aada:	2f58      	cmp	r7, #88	; 0x58
 800aadc:	f000 80a3 	beq.w	800ac26 <_printf_i+0x16e>
 800aae0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aae4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aae8:	e03a      	b.n	800ab60 <_printf_i+0xa8>
 800aaea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aaee:	2b15      	cmp	r3, #21
 800aaf0:	d8f6      	bhi.n	800aae0 <_printf_i+0x28>
 800aaf2:	a101      	add	r1, pc, #4	; (adr r1, 800aaf8 <_printf_i+0x40>)
 800aaf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aaf8:	0800ab51 	.word	0x0800ab51
 800aafc:	0800ab65 	.word	0x0800ab65
 800ab00:	0800aae1 	.word	0x0800aae1
 800ab04:	0800aae1 	.word	0x0800aae1
 800ab08:	0800aae1 	.word	0x0800aae1
 800ab0c:	0800aae1 	.word	0x0800aae1
 800ab10:	0800ab65 	.word	0x0800ab65
 800ab14:	0800aae1 	.word	0x0800aae1
 800ab18:	0800aae1 	.word	0x0800aae1
 800ab1c:	0800aae1 	.word	0x0800aae1
 800ab20:	0800aae1 	.word	0x0800aae1
 800ab24:	0800ac71 	.word	0x0800ac71
 800ab28:	0800ab95 	.word	0x0800ab95
 800ab2c:	0800ac53 	.word	0x0800ac53
 800ab30:	0800aae1 	.word	0x0800aae1
 800ab34:	0800aae1 	.word	0x0800aae1
 800ab38:	0800ac93 	.word	0x0800ac93
 800ab3c:	0800aae1 	.word	0x0800aae1
 800ab40:	0800ab95 	.word	0x0800ab95
 800ab44:	0800aae1 	.word	0x0800aae1
 800ab48:	0800aae1 	.word	0x0800aae1
 800ab4c:	0800ac5b 	.word	0x0800ac5b
 800ab50:	682b      	ldr	r3, [r5, #0]
 800ab52:	1d1a      	adds	r2, r3, #4
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	602a      	str	r2, [r5, #0]
 800ab58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab60:	2301      	movs	r3, #1
 800ab62:	e0a3      	b.n	800acac <_printf_i+0x1f4>
 800ab64:	6820      	ldr	r0, [r4, #0]
 800ab66:	6829      	ldr	r1, [r5, #0]
 800ab68:	0606      	lsls	r6, r0, #24
 800ab6a:	f101 0304 	add.w	r3, r1, #4
 800ab6e:	d50a      	bpl.n	800ab86 <_printf_i+0xce>
 800ab70:	680e      	ldr	r6, [r1, #0]
 800ab72:	602b      	str	r3, [r5, #0]
 800ab74:	2e00      	cmp	r6, #0
 800ab76:	da03      	bge.n	800ab80 <_printf_i+0xc8>
 800ab78:	232d      	movs	r3, #45	; 0x2d
 800ab7a:	4276      	negs	r6, r6
 800ab7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab80:	485e      	ldr	r0, [pc, #376]	; (800acfc <_printf_i+0x244>)
 800ab82:	230a      	movs	r3, #10
 800ab84:	e019      	b.n	800abba <_printf_i+0x102>
 800ab86:	680e      	ldr	r6, [r1, #0]
 800ab88:	602b      	str	r3, [r5, #0]
 800ab8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ab8e:	bf18      	it	ne
 800ab90:	b236      	sxthne	r6, r6
 800ab92:	e7ef      	b.n	800ab74 <_printf_i+0xbc>
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	6820      	ldr	r0, [r4, #0]
 800ab98:	1d19      	adds	r1, r3, #4
 800ab9a:	6029      	str	r1, [r5, #0]
 800ab9c:	0601      	lsls	r1, r0, #24
 800ab9e:	d501      	bpl.n	800aba4 <_printf_i+0xec>
 800aba0:	681e      	ldr	r6, [r3, #0]
 800aba2:	e002      	b.n	800abaa <_printf_i+0xf2>
 800aba4:	0646      	lsls	r6, r0, #25
 800aba6:	d5fb      	bpl.n	800aba0 <_printf_i+0xe8>
 800aba8:	881e      	ldrh	r6, [r3, #0]
 800abaa:	4854      	ldr	r0, [pc, #336]	; (800acfc <_printf_i+0x244>)
 800abac:	2f6f      	cmp	r7, #111	; 0x6f
 800abae:	bf0c      	ite	eq
 800abb0:	2308      	moveq	r3, #8
 800abb2:	230a      	movne	r3, #10
 800abb4:	2100      	movs	r1, #0
 800abb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abba:	6865      	ldr	r5, [r4, #4]
 800abbc:	60a5      	str	r5, [r4, #8]
 800abbe:	2d00      	cmp	r5, #0
 800abc0:	bfa2      	ittt	ge
 800abc2:	6821      	ldrge	r1, [r4, #0]
 800abc4:	f021 0104 	bicge.w	r1, r1, #4
 800abc8:	6021      	strge	r1, [r4, #0]
 800abca:	b90e      	cbnz	r6, 800abd0 <_printf_i+0x118>
 800abcc:	2d00      	cmp	r5, #0
 800abce:	d04d      	beq.n	800ac6c <_printf_i+0x1b4>
 800abd0:	4615      	mov	r5, r2
 800abd2:	fbb6 f1f3 	udiv	r1, r6, r3
 800abd6:	fb03 6711 	mls	r7, r3, r1, r6
 800abda:	5dc7      	ldrb	r7, [r0, r7]
 800abdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800abe0:	4637      	mov	r7, r6
 800abe2:	42bb      	cmp	r3, r7
 800abe4:	460e      	mov	r6, r1
 800abe6:	d9f4      	bls.n	800abd2 <_printf_i+0x11a>
 800abe8:	2b08      	cmp	r3, #8
 800abea:	d10b      	bne.n	800ac04 <_printf_i+0x14c>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	07de      	lsls	r6, r3, #31
 800abf0:	d508      	bpl.n	800ac04 <_printf_i+0x14c>
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	6861      	ldr	r1, [r4, #4]
 800abf6:	4299      	cmp	r1, r3
 800abf8:	bfde      	ittt	le
 800abfa:	2330      	movle	r3, #48	; 0x30
 800abfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac04:	1b52      	subs	r2, r2, r5
 800ac06:	6122      	str	r2, [r4, #16]
 800ac08:	f8cd a000 	str.w	sl, [sp]
 800ac0c:	464b      	mov	r3, r9
 800ac0e:	aa03      	add	r2, sp, #12
 800ac10:	4621      	mov	r1, r4
 800ac12:	4640      	mov	r0, r8
 800ac14:	f7ff fee2 	bl	800a9dc <_printf_common>
 800ac18:	3001      	adds	r0, #1
 800ac1a:	d14c      	bne.n	800acb6 <_printf_i+0x1fe>
 800ac1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac20:	b004      	add	sp, #16
 800ac22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac26:	4835      	ldr	r0, [pc, #212]	; (800acfc <_printf_i+0x244>)
 800ac28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ac2c:	6829      	ldr	r1, [r5, #0]
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac34:	6029      	str	r1, [r5, #0]
 800ac36:	061d      	lsls	r5, r3, #24
 800ac38:	d514      	bpl.n	800ac64 <_printf_i+0x1ac>
 800ac3a:	07df      	lsls	r7, r3, #31
 800ac3c:	bf44      	itt	mi
 800ac3e:	f043 0320 	orrmi.w	r3, r3, #32
 800ac42:	6023      	strmi	r3, [r4, #0]
 800ac44:	b91e      	cbnz	r6, 800ac4e <_printf_i+0x196>
 800ac46:	6823      	ldr	r3, [r4, #0]
 800ac48:	f023 0320 	bic.w	r3, r3, #32
 800ac4c:	6023      	str	r3, [r4, #0]
 800ac4e:	2310      	movs	r3, #16
 800ac50:	e7b0      	b.n	800abb4 <_printf_i+0xfc>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	f043 0320 	orr.w	r3, r3, #32
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	2378      	movs	r3, #120	; 0x78
 800ac5c:	4828      	ldr	r0, [pc, #160]	; (800ad00 <_printf_i+0x248>)
 800ac5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac62:	e7e3      	b.n	800ac2c <_printf_i+0x174>
 800ac64:	0659      	lsls	r1, r3, #25
 800ac66:	bf48      	it	mi
 800ac68:	b2b6      	uxthmi	r6, r6
 800ac6a:	e7e6      	b.n	800ac3a <_printf_i+0x182>
 800ac6c:	4615      	mov	r5, r2
 800ac6e:	e7bb      	b.n	800abe8 <_printf_i+0x130>
 800ac70:	682b      	ldr	r3, [r5, #0]
 800ac72:	6826      	ldr	r6, [r4, #0]
 800ac74:	6961      	ldr	r1, [r4, #20]
 800ac76:	1d18      	adds	r0, r3, #4
 800ac78:	6028      	str	r0, [r5, #0]
 800ac7a:	0635      	lsls	r5, r6, #24
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	d501      	bpl.n	800ac84 <_printf_i+0x1cc>
 800ac80:	6019      	str	r1, [r3, #0]
 800ac82:	e002      	b.n	800ac8a <_printf_i+0x1d2>
 800ac84:	0670      	lsls	r0, r6, #25
 800ac86:	d5fb      	bpl.n	800ac80 <_printf_i+0x1c8>
 800ac88:	8019      	strh	r1, [r3, #0]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	6123      	str	r3, [r4, #16]
 800ac8e:	4615      	mov	r5, r2
 800ac90:	e7ba      	b.n	800ac08 <_printf_i+0x150>
 800ac92:	682b      	ldr	r3, [r5, #0]
 800ac94:	1d1a      	adds	r2, r3, #4
 800ac96:	602a      	str	r2, [r5, #0]
 800ac98:	681d      	ldr	r5, [r3, #0]
 800ac9a:	6862      	ldr	r2, [r4, #4]
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f7f5 fb26 	bl	80002f0 <memchr>
 800aca4:	b108      	cbz	r0, 800acaa <_printf_i+0x1f2>
 800aca6:	1b40      	subs	r0, r0, r5
 800aca8:	6060      	str	r0, [r4, #4]
 800acaa:	6863      	ldr	r3, [r4, #4]
 800acac:	6123      	str	r3, [r4, #16]
 800acae:	2300      	movs	r3, #0
 800acb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acb4:	e7a8      	b.n	800ac08 <_printf_i+0x150>
 800acb6:	6923      	ldr	r3, [r4, #16]
 800acb8:	462a      	mov	r2, r5
 800acba:	4649      	mov	r1, r9
 800acbc:	4640      	mov	r0, r8
 800acbe:	47d0      	blx	sl
 800acc0:	3001      	adds	r0, #1
 800acc2:	d0ab      	beq.n	800ac1c <_printf_i+0x164>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	079b      	lsls	r3, r3, #30
 800acc8:	d413      	bmi.n	800acf2 <_printf_i+0x23a>
 800acca:	68e0      	ldr	r0, [r4, #12]
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	4298      	cmp	r0, r3
 800acd0:	bfb8      	it	lt
 800acd2:	4618      	movlt	r0, r3
 800acd4:	e7a4      	b.n	800ac20 <_printf_i+0x168>
 800acd6:	2301      	movs	r3, #1
 800acd8:	4632      	mov	r2, r6
 800acda:	4649      	mov	r1, r9
 800acdc:	4640      	mov	r0, r8
 800acde:	47d0      	blx	sl
 800ace0:	3001      	adds	r0, #1
 800ace2:	d09b      	beq.n	800ac1c <_printf_i+0x164>
 800ace4:	3501      	adds	r5, #1
 800ace6:	68e3      	ldr	r3, [r4, #12]
 800ace8:	9903      	ldr	r1, [sp, #12]
 800acea:	1a5b      	subs	r3, r3, r1
 800acec:	42ab      	cmp	r3, r5
 800acee:	dcf2      	bgt.n	800acd6 <_printf_i+0x21e>
 800acf0:	e7eb      	b.n	800acca <_printf_i+0x212>
 800acf2:	2500      	movs	r5, #0
 800acf4:	f104 0619 	add.w	r6, r4, #25
 800acf8:	e7f5      	b.n	800ace6 <_printf_i+0x22e>
 800acfa:	bf00      	nop
 800acfc:	0800d186 	.word	0x0800d186
 800ad00:	0800d197 	.word	0x0800d197

0800ad04 <siprintf>:
 800ad04:	b40e      	push	{r1, r2, r3}
 800ad06:	b500      	push	{lr}
 800ad08:	b09c      	sub	sp, #112	; 0x70
 800ad0a:	ab1d      	add	r3, sp, #116	; 0x74
 800ad0c:	9002      	str	r0, [sp, #8]
 800ad0e:	9006      	str	r0, [sp, #24]
 800ad10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad14:	4809      	ldr	r0, [pc, #36]	; (800ad3c <siprintf+0x38>)
 800ad16:	9107      	str	r1, [sp, #28]
 800ad18:	9104      	str	r1, [sp, #16]
 800ad1a:	4909      	ldr	r1, [pc, #36]	; (800ad40 <siprintf+0x3c>)
 800ad1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad20:	9105      	str	r1, [sp, #20]
 800ad22:	6800      	ldr	r0, [r0, #0]
 800ad24:	9301      	str	r3, [sp, #4]
 800ad26:	a902      	add	r1, sp, #8
 800ad28:	f001 faf8 	bl	800c31c <_svfiprintf_r>
 800ad2c:	9b02      	ldr	r3, [sp, #8]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]
 800ad32:	b01c      	add	sp, #112	; 0x70
 800ad34:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad38:	b003      	add	sp, #12
 800ad3a:	4770      	bx	lr
 800ad3c:	24000010 	.word	0x24000010
 800ad40:	ffff0208 	.word	0xffff0208

0800ad44 <quorem>:
 800ad44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	6903      	ldr	r3, [r0, #16]
 800ad4a:	690c      	ldr	r4, [r1, #16]
 800ad4c:	42a3      	cmp	r3, r4
 800ad4e:	4607      	mov	r7, r0
 800ad50:	f2c0 8081 	blt.w	800ae56 <quorem+0x112>
 800ad54:	3c01      	subs	r4, #1
 800ad56:	f101 0814 	add.w	r8, r1, #20
 800ad5a:	f100 0514 	add.w	r5, r0, #20
 800ad5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad62:	9301      	str	r3, [sp, #4]
 800ad64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad78:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad7c:	d331      	bcc.n	800ade2 <quorem+0x9e>
 800ad7e:	f04f 0e00 	mov.w	lr, #0
 800ad82:	4640      	mov	r0, r8
 800ad84:	46ac      	mov	ip, r5
 800ad86:	46f2      	mov	sl, lr
 800ad88:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad8c:	b293      	uxth	r3, r2
 800ad8e:	fb06 e303 	mla	r3, r6, r3, lr
 800ad92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	ebaa 0303 	sub.w	r3, sl, r3
 800ad9c:	f8dc a000 	ldr.w	sl, [ip]
 800ada0:	0c12      	lsrs	r2, r2, #16
 800ada2:	fa13 f38a 	uxtah	r3, r3, sl
 800ada6:	fb06 e202 	mla	r2, r6, r2, lr
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	9b00      	ldr	r3, [sp, #0]
 800adae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adb2:	b292      	uxth	r2, r2
 800adb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800adb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adbc:	f8bd 3000 	ldrh.w	r3, [sp]
 800adc0:	4581      	cmp	r9, r0
 800adc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adc6:	f84c 3b04 	str.w	r3, [ip], #4
 800adca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adce:	d2db      	bcs.n	800ad88 <quorem+0x44>
 800add0:	f855 300b 	ldr.w	r3, [r5, fp]
 800add4:	b92b      	cbnz	r3, 800ade2 <quorem+0x9e>
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	3b04      	subs	r3, #4
 800adda:	429d      	cmp	r5, r3
 800addc:	461a      	mov	r2, r3
 800adde:	d32e      	bcc.n	800ae3e <quorem+0xfa>
 800ade0:	613c      	str	r4, [r7, #16]
 800ade2:	4638      	mov	r0, r7
 800ade4:	f001 f846 	bl	800be74 <__mcmp>
 800ade8:	2800      	cmp	r0, #0
 800adea:	db24      	blt.n	800ae36 <quorem+0xf2>
 800adec:	3601      	adds	r6, #1
 800adee:	4628      	mov	r0, r5
 800adf0:	f04f 0c00 	mov.w	ip, #0
 800adf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800adf8:	f8d0 e000 	ldr.w	lr, [r0]
 800adfc:	b293      	uxth	r3, r2
 800adfe:	ebac 0303 	sub.w	r3, ip, r3
 800ae02:	0c12      	lsrs	r2, r2, #16
 800ae04:	fa13 f38e 	uxtah	r3, r3, lr
 800ae08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae16:	45c1      	cmp	r9, r8
 800ae18:	f840 3b04 	str.w	r3, [r0], #4
 800ae1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae20:	d2e8      	bcs.n	800adf4 <quorem+0xb0>
 800ae22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae2a:	b922      	cbnz	r2, 800ae36 <quorem+0xf2>
 800ae2c:	3b04      	subs	r3, #4
 800ae2e:	429d      	cmp	r5, r3
 800ae30:	461a      	mov	r2, r3
 800ae32:	d30a      	bcc.n	800ae4a <quorem+0x106>
 800ae34:	613c      	str	r4, [r7, #16]
 800ae36:	4630      	mov	r0, r6
 800ae38:	b003      	add	sp, #12
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d1cc      	bne.n	800ade0 <quorem+0x9c>
 800ae46:	3c01      	subs	r4, #1
 800ae48:	e7c7      	b.n	800adda <quorem+0x96>
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	d1f0      	bne.n	800ae34 <quorem+0xf0>
 800ae52:	3c01      	subs	r4, #1
 800ae54:	e7eb      	b.n	800ae2e <quorem+0xea>
 800ae56:	2000      	movs	r0, #0
 800ae58:	e7ee      	b.n	800ae38 <quorem+0xf4>
 800ae5a:	0000      	movs	r0, r0
 800ae5c:	0000      	movs	r0, r0
	...

0800ae60 <_dtoa_r>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	ed2d 8b02 	vpush	{d8}
 800ae68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae6a:	b091      	sub	sp, #68	; 0x44
 800ae6c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae70:	ec59 8b10 	vmov	r8, r9, d0
 800ae74:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800ae76:	9106      	str	r1, [sp, #24]
 800ae78:	4606      	mov	r6, r0
 800ae7a:	9208      	str	r2, [sp, #32]
 800ae7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ae7e:	b975      	cbnz	r5, 800ae9e <_dtoa_r+0x3e>
 800ae80:	2010      	movs	r0, #16
 800ae82:	f000 fd5f 	bl	800b944 <malloc>
 800ae86:	4602      	mov	r2, r0
 800ae88:	6270      	str	r0, [r6, #36]	; 0x24
 800ae8a:	b920      	cbnz	r0, 800ae96 <_dtoa_r+0x36>
 800ae8c:	4baa      	ldr	r3, [pc, #680]	; (800b138 <_dtoa_r+0x2d8>)
 800ae8e:	21ea      	movs	r1, #234	; 0xea
 800ae90:	48aa      	ldr	r0, [pc, #680]	; (800b13c <_dtoa_r+0x2dc>)
 800ae92:	f001 fb53 	bl	800c53c <__assert_func>
 800ae96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae9a:	6005      	str	r5, [r0, #0]
 800ae9c:	60c5      	str	r5, [r0, #12]
 800ae9e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aea0:	6819      	ldr	r1, [r3, #0]
 800aea2:	b151      	cbz	r1, 800aeba <_dtoa_r+0x5a>
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	604a      	str	r2, [r1, #4]
 800aea8:	2301      	movs	r3, #1
 800aeaa:	4093      	lsls	r3, r2
 800aeac:	608b      	str	r3, [r1, #8]
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f000 fd9e 	bl	800b9f0 <_Bfree>
 800aeb4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
 800aeba:	f1b9 0300 	subs.w	r3, r9, #0
 800aebe:	bfbb      	ittet	lt
 800aec0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aec4:	9303      	strlt	r3, [sp, #12]
 800aec6:	2300      	movge	r3, #0
 800aec8:	2201      	movlt	r2, #1
 800aeca:	bfac      	ite	ge
 800aecc:	6023      	strge	r3, [r4, #0]
 800aece:	6022      	strlt	r2, [r4, #0]
 800aed0:	4b9b      	ldr	r3, [pc, #620]	; (800b140 <_dtoa_r+0x2e0>)
 800aed2:	9c03      	ldr	r4, [sp, #12]
 800aed4:	43a3      	bics	r3, r4
 800aed6:	d11c      	bne.n	800af12 <_dtoa_r+0xb2>
 800aed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aeda:	f242 730f 	movw	r3, #9999	; 0x270f
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800aee4:	ea53 0308 	orrs.w	r3, r3, r8
 800aee8:	f000 84fd 	beq.w	800b8e6 <_dtoa_r+0xa86>
 800aeec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aeee:	b963      	cbnz	r3, 800af0a <_dtoa_r+0xaa>
 800aef0:	4b94      	ldr	r3, [pc, #592]	; (800b144 <_dtoa_r+0x2e4>)
 800aef2:	e01f      	b.n	800af34 <_dtoa_r+0xd4>
 800aef4:	4b94      	ldr	r3, [pc, #592]	; (800b148 <_dtoa_r+0x2e8>)
 800aef6:	9301      	str	r3, [sp, #4]
 800aef8:	3308      	adds	r3, #8
 800aefa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	9801      	ldr	r0, [sp, #4]
 800af00:	b011      	add	sp, #68	; 0x44
 800af02:	ecbd 8b02 	vpop	{d8}
 800af06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0a:	4b8e      	ldr	r3, [pc, #568]	; (800b144 <_dtoa_r+0x2e4>)
 800af0c:	9301      	str	r3, [sp, #4]
 800af0e:	3303      	adds	r3, #3
 800af10:	e7f3      	b.n	800aefa <_dtoa_r+0x9a>
 800af12:	ed9d 8b02 	vldr	d8, [sp, #8]
 800af16:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1e:	d10b      	bne.n	800af38 <_dtoa_r+0xd8>
 800af20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af22:	2301      	movs	r3, #1
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 84d9 	beq.w	800b8e0 <_dtoa_r+0xa80>
 800af2e:	4887      	ldr	r0, [pc, #540]	; (800b14c <_dtoa_r+0x2ec>)
 800af30:	6018      	str	r0, [r3, #0]
 800af32:	1e43      	subs	r3, r0, #1
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	e7e2      	b.n	800aefe <_dtoa_r+0x9e>
 800af38:	a90f      	add	r1, sp, #60	; 0x3c
 800af3a:	aa0e      	add	r2, sp, #56	; 0x38
 800af3c:	4630      	mov	r0, r6
 800af3e:	eeb0 0b48 	vmov.f64	d0, d8
 800af42:	f001 f83d 	bl	800bfc0 <__d2b>
 800af46:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800af4a:	4605      	mov	r5, r0
 800af4c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af4e:	2900      	cmp	r1, #0
 800af50:	d046      	beq.n	800afe0 <_dtoa_r+0x180>
 800af52:	ee18 4a90 	vmov	r4, s17
 800af56:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800af5a:	ec53 2b18 	vmov	r2, r3, d8
 800af5e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800af62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800af6a:	2400      	movs	r4, #0
 800af6c:	ec43 2b16 	vmov	d6, r2, r3
 800af70:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800af74:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b120 <_dtoa_r+0x2c0>
 800af78:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af7c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b128 <_dtoa_r+0x2c8>
 800af80:	eea7 6b05 	vfma.f64	d6, d7, d5
 800af84:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b130 <_dtoa_r+0x2d0>
 800af88:	ee07 1a90 	vmov	s15, r1
 800af8c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800af90:	eeb0 7b46 	vmov.f64	d7, d6
 800af94:	eea4 7b05 	vfma.f64	d7, d4, d5
 800af98:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800af9c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800afa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afa4:	ee16 ba90 	vmov	fp, s13
 800afa8:	940a      	str	r4, [sp, #40]	; 0x28
 800afaa:	d508      	bpl.n	800afbe <_dtoa_r+0x15e>
 800afac:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800afb0:	eeb4 6b47 	vcmp.f64	d6, d7
 800afb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb8:	bf18      	it	ne
 800afba:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 800afbe:	f1bb 0f16 	cmp.w	fp, #22
 800afc2:	d82f      	bhi.n	800b024 <_dtoa_r+0x1c4>
 800afc4:	4b62      	ldr	r3, [pc, #392]	; (800b150 <_dtoa_r+0x2f0>)
 800afc6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800afca:	ed93 7b00 	vldr	d7, [r3]
 800afce:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800afd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afd6:	d501      	bpl.n	800afdc <_dtoa_r+0x17c>
 800afd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afdc:	2300      	movs	r3, #0
 800afde:	e022      	b.n	800b026 <_dtoa_r+0x1c6>
 800afe0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800afe2:	4401      	add	r1, r0
 800afe4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800afe8:	2b20      	cmp	r3, #32
 800afea:	bfc1      	itttt	gt
 800afec:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aff0:	fa04 f303 	lslgt.w	r3, r4, r3
 800aff4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800aff8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800affc:	bfd6      	itet	le
 800affe:	f1c3 0320 	rsble	r3, r3, #32
 800b002:	ea43 0808 	orrgt.w	r8, r3, r8
 800b006:	fa08 f803 	lslle.w	r8, r8, r3
 800b00a:	ee07 8a90 	vmov	s15, r8
 800b00e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b012:	3901      	subs	r1, #1
 800b014:	ee17 4a90 	vmov	r4, s15
 800b018:	ec53 2b17 	vmov	r2, r3, d7
 800b01c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b020:	2401      	movs	r4, #1
 800b022:	e7a3      	b.n	800af6c <_dtoa_r+0x10c>
 800b024:	2301      	movs	r3, #1
 800b026:	930b      	str	r3, [sp, #44]	; 0x2c
 800b028:	1a43      	subs	r3, r0, r1
 800b02a:	1e5a      	subs	r2, r3, #1
 800b02c:	bf45      	ittet	mi
 800b02e:	f1c3 0301 	rsbmi	r3, r3, #1
 800b032:	9304      	strmi	r3, [sp, #16]
 800b034:	2300      	movpl	r3, #0
 800b036:	2300      	movmi	r3, #0
 800b038:	9205      	str	r2, [sp, #20]
 800b03a:	bf54      	ite	pl
 800b03c:	9304      	strpl	r3, [sp, #16]
 800b03e:	9305      	strmi	r3, [sp, #20]
 800b040:	f1bb 0f00 	cmp.w	fp, #0
 800b044:	db18      	blt.n	800b078 <_dtoa_r+0x218>
 800b046:	9b05      	ldr	r3, [sp, #20]
 800b048:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b04c:	445b      	add	r3, fp
 800b04e:	9305      	str	r3, [sp, #20]
 800b050:	2300      	movs	r3, #0
 800b052:	9a06      	ldr	r2, [sp, #24]
 800b054:	2a09      	cmp	r2, #9
 800b056:	d849      	bhi.n	800b0ec <_dtoa_r+0x28c>
 800b058:	2a05      	cmp	r2, #5
 800b05a:	bfc4      	itt	gt
 800b05c:	3a04      	subgt	r2, #4
 800b05e:	9206      	strgt	r2, [sp, #24]
 800b060:	9a06      	ldr	r2, [sp, #24]
 800b062:	f1a2 0202 	sub.w	r2, r2, #2
 800b066:	bfcc      	ite	gt
 800b068:	2400      	movgt	r4, #0
 800b06a:	2401      	movle	r4, #1
 800b06c:	2a03      	cmp	r2, #3
 800b06e:	d848      	bhi.n	800b102 <_dtoa_r+0x2a2>
 800b070:	e8df f002 	tbb	[pc, r2]
 800b074:	3a2c2e0b 	.word	0x3a2c2e0b
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	2200      	movs	r2, #0
 800b07c:	eba3 030b 	sub.w	r3, r3, fp
 800b080:	9304      	str	r3, [sp, #16]
 800b082:	9209      	str	r2, [sp, #36]	; 0x24
 800b084:	f1cb 0300 	rsb	r3, fp, #0
 800b088:	e7e3      	b.n	800b052 <_dtoa_r+0x1f2>
 800b08a:	2200      	movs	r2, #0
 800b08c:	9207      	str	r2, [sp, #28]
 800b08e:	9a08      	ldr	r2, [sp, #32]
 800b090:	2a00      	cmp	r2, #0
 800b092:	dc39      	bgt.n	800b108 <_dtoa_r+0x2a8>
 800b094:	f04f 0a01 	mov.w	sl, #1
 800b098:	46d1      	mov	r9, sl
 800b09a:	4652      	mov	r2, sl
 800b09c:	f8cd a020 	str.w	sl, [sp, #32]
 800b0a0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	6079      	str	r1, [r7, #4]
 800b0a6:	2004      	movs	r0, #4
 800b0a8:	f100 0c14 	add.w	ip, r0, #20
 800b0ac:	4594      	cmp	ip, r2
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	d92f      	bls.n	800b112 <_dtoa_r+0x2b2>
 800b0b2:	4630      	mov	r0, r6
 800b0b4:	930d      	str	r3, [sp, #52]	; 0x34
 800b0b6:	f000 fc5b 	bl	800b970 <_Balloc>
 800b0ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0bc:	9001      	str	r0, [sp, #4]
 800b0be:	4602      	mov	r2, r0
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d149      	bne.n	800b158 <_dtoa_r+0x2f8>
 800b0c4:	4b23      	ldr	r3, [pc, #140]	; (800b154 <_dtoa_r+0x2f4>)
 800b0c6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0ca:	e6e1      	b.n	800ae90 <_dtoa_r+0x30>
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	e7dd      	b.n	800b08c <_dtoa_r+0x22c>
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	9207      	str	r2, [sp, #28]
 800b0d4:	9a08      	ldr	r2, [sp, #32]
 800b0d6:	eb0b 0a02 	add.w	sl, fp, r2
 800b0da:	f10a 0901 	add.w	r9, sl, #1
 800b0de:	464a      	mov	r2, r9
 800b0e0:	2a01      	cmp	r2, #1
 800b0e2:	bfb8      	it	lt
 800b0e4:	2201      	movlt	r2, #1
 800b0e6:	e7db      	b.n	800b0a0 <_dtoa_r+0x240>
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	e7f2      	b.n	800b0d2 <_dtoa_r+0x272>
 800b0ec:	2401      	movs	r4, #1
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b0f4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	46d1      	mov	r9, sl
 800b0fc:	2212      	movs	r2, #18
 800b0fe:	9108      	str	r1, [sp, #32]
 800b100:	e7ce      	b.n	800b0a0 <_dtoa_r+0x240>
 800b102:	2201      	movs	r2, #1
 800b104:	9207      	str	r2, [sp, #28]
 800b106:	e7f5      	b.n	800b0f4 <_dtoa_r+0x294>
 800b108:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b10c:	46d1      	mov	r9, sl
 800b10e:	4652      	mov	r2, sl
 800b110:	e7c6      	b.n	800b0a0 <_dtoa_r+0x240>
 800b112:	3101      	adds	r1, #1
 800b114:	6079      	str	r1, [r7, #4]
 800b116:	0040      	lsls	r0, r0, #1
 800b118:	e7c6      	b.n	800b0a8 <_dtoa_r+0x248>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	636f4361 	.word	0x636f4361
 800b124:	3fd287a7 	.word	0x3fd287a7
 800b128:	8b60c8b3 	.word	0x8b60c8b3
 800b12c:	3fc68a28 	.word	0x3fc68a28
 800b130:	509f79fb 	.word	0x509f79fb
 800b134:	3fd34413 	.word	0x3fd34413
 800b138:	0800d1b5 	.word	0x0800d1b5
 800b13c:	0800d1cc 	.word	0x0800d1cc
 800b140:	7ff00000 	.word	0x7ff00000
 800b144:	0800d1b1 	.word	0x0800d1b1
 800b148:	0800d1a8 	.word	0x0800d1a8
 800b14c:	0800d185 	.word	0x0800d185
 800b150:	0800d2c0 	.word	0x0800d2c0
 800b154:	0800d227 	.word	0x0800d227
 800b158:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b15a:	9901      	ldr	r1, [sp, #4]
 800b15c:	6011      	str	r1, [r2, #0]
 800b15e:	f1b9 0f0e 	cmp.w	r9, #14
 800b162:	d86c      	bhi.n	800b23e <_dtoa_r+0x3de>
 800b164:	2c00      	cmp	r4, #0
 800b166:	d06a      	beq.n	800b23e <_dtoa_r+0x3de>
 800b168:	f1bb 0f00 	cmp.w	fp, #0
 800b16c:	f340 80a0 	ble.w	800b2b0 <_dtoa_r+0x450>
 800b170:	49c1      	ldr	r1, [pc, #772]	; (800b478 <_dtoa_r+0x618>)
 800b172:	f00b 020f 	and.w	r2, fp, #15
 800b176:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b17a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b17e:	ed92 7b00 	vldr	d7, [r2]
 800b182:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b186:	f000 8087 	beq.w	800b298 <_dtoa_r+0x438>
 800b18a:	4abc      	ldr	r2, [pc, #752]	; (800b47c <_dtoa_r+0x61c>)
 800b18c:	ed92 6b08 	vldr	d6, [r2, #32]
 800b190:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b194:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b198:	f001 010f 	and.w	r1, r1, #15
 800b19c:	2203      	movs	r2, #3
 800b19e:	48b7      	ldr	r0, [pc, #732]	; (800b47c <_dtoa_r+0x61c>)
 800b1a0:	2900      	cmp	r1, #0
 800b1a2:	d17b      	bne.n	800b29c <_dtoa_r+0x43c>
 800b1a4:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b1a8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b1ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b1b2:	2900      	cmp	r1, #0
 800b1b4:	f000 80a2 	beq.w	800b2fc <_dtoa_r+0x49c>
 800b1b8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b1bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c8:	f140 8098 	bpl.w	800b2fc <_dtoa_r+0x49c>
 800b1cc:	f1b9 0f00 	cmp.w	r9, #0
 800b1d0:	f000 8094 	beq.w	800b2fc <_dtoa_r+0x49c>
 800b1d4:	f1ba 0f00 	cmp.w	sl, #0
 800b1d8:	dd2f      	ble.n	800b23a <_dtoa_r+0x3da>
 800b1da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b1de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b1e2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b1e6:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b1ea:	3201      	adds	r2, #1
 800b1ec:	4650      	mov	r0, sl
 800b1ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b1f2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b1f6:	ee07 2a90 	vmov	s15, r2
 800b1fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b1fe:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b202:	ee15 4a90 	vmov	r4, s11
 800b206:	ec52 1b15 	vmov	r1, r2, d5
 800b20a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b20e:	2800      	cmp	r0, #0
 800b210:	d177      	bne.n	800b302 <_dtoa_r+0x4a2>
 800b212:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b216:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b21a:	ec42 1b17 	vmov	d7, r1, r2
 800b21e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b226:	f300 8263 	bgt.w	800b6f0 <_dtoa_r+0x890>
 800b22a:	eeb1 7b47 	vneg.f64	d7, d7
 800b22e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b236:	f100 8258 	bmi.w	800b6ea <_dtoa_r+0x88a>
 800b23a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b23e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b240:	2a00      	cmp	r2, #0
 800b242:	f2c0 811d 	blt.w	800b480 <_dtoa_r+0x620>
 800b246:	f1bb 0f0e 	cmp.w	fp, #14
 800b24a:	f300 8119 	bgt.w	800b480 <_dtoa_r+0x620>
 800b24e:	4b8a      	ldr	r3, [pc, #552]	; (800b478 <_dtoa_r+0x618>)
 800b250:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b254:	ed93 6b00 	vldr	d6, [r3]
 800b258:	9b08      	ldr	r3, [sp, #32]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	f280 80b7 	bge.w	800b3ce <_dtoa_r+0x56e>
 800b260:	f1b9 0f00 	cmp.w	r9, #0
 800b264:	f300 80b3 	bgt.w	800b3ce <_dtoa_r+0x56e>
 800b268:	f040 823f 	bne.w	800b6ea <_dtoa_r+0x88a>
 800b26c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b270:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b274:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b278:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b280:	464c      	mov	r4, r9
 800b282:	464f      	mov	r7, r9
 800b284:	f280 8215 	bge.w	800b6b2 <_dtoa_r+0x852>
 800b288:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b28c:	2331      	movs	r3, #49	; 0x31
 800b28e:	f808 3b01 	strb.w	r3, [r8], #1
 800b292:	f10b 0b01 	add.w	fp, fp, #1
 800b296:	e211      	b.n	800b6bc <_dtoa_r+0x85c>
 800b298:	2202      	movs	r2, #2
 800b29a:	e780      	b.n	800b19e <_dtoa_r+0x33e>
 800b29c:	07cc      	lsls	r4, r1, #31
 800b29e:	d504      	bpl.n	800b2aa <_dtoa_r+0x44a>
 800b2a0:	ed90 6b00 	vldr	d6, [r0]
 800b2a4:	3201      	adds	r2, #1
 800b2a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2aa:	1049      	asrs	r1, r1, #1
 800b2ac:	3008      	adds	r0, #8
 800b2ae:	e777      	b.n	800b1a0 <_dtoa_r+0x340>
 800b2b0:	d022      	beq.n	800b2f8 <_dtoa_r+0x498>
 800b2b2:	f1cb 0100 	rsb	r1, fp, #0
 800b2b6:	4a70      	ldr	r2, [pc, #448]	; (800b478 <_dtoa_r+0x618>)
 800b2b8:	f001 000f 	and.w	r0, r1, #15
 800b2bc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b2c0:	ed92 7b00 	vldr	d7, [r2]
 800b2c4:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b2c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2cc:	486b      	ldr	r0, [pc, #428]	; (800b47c <_dtoa_r+0x61c>)
 800b2ce:	1109      	asrs	r1, r1, #4
 800b2d0:	2400      	movs	r4, #0
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	b929      	cbnz	r1, 800b2e2 <_dtoa_r+0x482>
 800b2d6:	2c00      	cmp	r4, #0
 800b2d8:	f43f af6a 	beq.w	800b1b0 <_dtoa_r+0x350>
 800b2dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b2e0:	e766      	b.n	800b1b0 <_dtoa_r+0x350>
 800b2e2:	07cf      	lsls	r7, r1, #31
 800b2e4:	d505      	bpl.n	800b2f2 <_dtoa_r+0x492>
 800b2e6:	ed90 6b00 	vldr	d6, [r0]
 800b2ea:	3201      	adds	r2, #1
 800b2ec:	2401      	movs	r4, #1
 800b2ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b2f2:	1049      	asrs	r1, r1, #1
 800b2f4:	3008      	adds	r0, #8
 800b2f6:	e7ed      	b.n	800b2d4 <_dtoa_r+0x474>
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	e759      	b.n	800b1b0 <_dtoa_r+0x350>
 800b2fc:	465f      	mov	r7, fp
 800b2fe:	4648      	mov	r0, r9
 800b300:	e775      	b.n	800b1ee <_dtoa_r+0x38e>
 800b302:	ec42 1b17 	vmov	d7, r1, r2
 800b306:	4a5c      	ldr	r2, [pc, #368]	; (800b478 <_dtoa_r+0x618>)
 800b308:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b30c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b310:	9a01      	ldr	r2, [sp, #4]
 800b312:	1814      	adds	r4, r2, r0
 800b314:	9a07      	ldr	r2, [sp, #28]
 800b316:	b352      	cbz	r2, 800b36e <_dtoa_r+0x50e>
 800b318:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b31c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b320:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b324:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b328:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b32c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b330:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b334:	ee14 2a90 	vmov	r2, s9
 800b338:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b33c:	3230      	adds	r2, #48	; 0x30
 800b33e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b342:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34a:	f808 2b01 	strb.w	r2, [r8], #1
 800b34e:	d439      	bmi.n	800b3c4 <_dtoa_r+0x564>
 800b350:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b354:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35c:	d472      	bmi.n	800b444 <_dtoa_r+0x5e4>
 800b35e:	45a0      	cmp	r8, r4
 800b360:	f43f af6b 	beq.w	800b23a <_dtoa_r+0x3da>
 800b364:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b368:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b36c:	e7e0      	b.n	800b330 <_dtoa_r+0x4d0>
 800b36e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b372:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b376:	4621      	mov	r1, r4
 800b378:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b37c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b380:	ee14 2a90 	vmov	r2, s9
 800b384:	3230      	adds	r2, #48	; 0x30
 800b386:	f808 2b01 	strb.w	r2, [r8], #1
 800b38a:	45a0      	cmp	r8, r4
 800b38c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b390:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b394:	d118      	bne.n	800b3c8 <_dtoa_r+0x568>
 800b396:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b39a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b39e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3a6:	dc4d      	bgt.n	800b444 <_dtoa_r+0x5e4>
 800b3a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b3ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b4:	f57f af41 	bpl.w	800b23a <_dtoa_r+0x3da>
 800b3b8:	4688      	mov	r8, r1
 800b3ba:	3901      	subs	r1, #1
 800b3bc:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b3c0:	2b30      	cmp	r3, #48	; 0x30
 800b3c2:	d0f9      	beq.n	800b3b8 <_dtoa_r+0x558>
 800b3c4:	46bb      	mov	fp, r7
 800b3c6:	e02a      	b.n	800b41e <_dtoa_r+0x5be>
 800b3c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b3cc:	e7d6      	b.n	800b37c <_dtoa_r+0x51c>
 800b3ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b3d2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b3d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b3da:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b3de:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b3e2:	ee15 3a10 	vmov	r3, s10
 800b3e6:	3330      	adds	r3, #48	; 0x30
 800b3e8:	f808 3b01 	strb.w	r3, [r8], #1
 800b3ec:	9b01      	ldr	r3, [sp, #4]
 800b3ee:	eba8 0303 	sub.w	r3, r8, r3
 800b3f2:	4599      	cmp	r9, r3
 800b3f4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b3f8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b3fc:	d133      	bne.n	800b466 <_dtoa_r+0x606>
 800b3fe:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b402:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40a:	dc1a      	bgt.n	800b442 <_dtoa_r+0x5e2>
 800b40c:	eeb4 7b46 	vcmp.f64	d7, d6
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	d103      	bne.n	800b41e <_dtoa_r+0x5be>
 800b416:	ee15 3a10 	vmov	r3, s10
 800b41a:	07d9      	lsls	r1, r3, #31
 800b41c:	d411      	bmi.n	800b442 <_dtoa_r+0x5e2>
 800b41e:	4629      	mov	r1, r5
 800b420:	4630      	mov	r0, r6
 800b422:	f000 fae5 	bl	800b9f0 <_Bfree>
 800b426:	2300      	movs	r3, #0
 800b428:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b42a:	f888 3000 	strb.w	r3, [r8]
 800b42e:	f10b 0301 	add.w	r3, fp, #1
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b436:	2b00      	cmp	r3, #0
 800b438:	f43f ad61 	beq.w	800aefe <_dtoa_r+0x9e>
 800b43c:	f8c3 8000 	str.w	r8, [r3]
 800b440:	e55d      	b.n	800aefe <_dtoa_r+0x9e>
 800b442:	465f      	mov	r7, fp
 800b444:	4643      	mov	r3, r8
 800b446:	4698      	mov	r8, r3
 800b448:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b44c:	2a39      	cmp	r2, #57	; 0x39
 800b44e:	d106      	bne.n	800b45e <_dtoa_r+0x5fe>
 800b450:	9a01      	ldr	r2, [sp, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d1f7      	bne.n	800b446 <_dtoa_r+0x5e6>
 800b456:	9901      	ldr	r1, [sp, #4]
 800b458:	2230      	movs	r2, #48	; 0x30
 800b45a:	3701      	adds	r7, #1
 800b45c:	700a      	strb	r2, [r1, #0]
 800b45e:	781a      	ldrb	r2, [r3, #0]
 800b460:	3201      	adds	r2, #1
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	e7ae      	b.n	800b3c4 <_dtoa_r+0x564>
 800b466:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b46a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b472:	d1b2      	bne.n	800b3da <_dtoa_r+0x57a>
 800b474:	e7d3      	b.n	800b41e <_dtoa_r+0x5be>
 800b476:	bf00      	nop
 800b478:	0800d2c0 	.word	0x0800d2c0
 800b47c:	0800d298 	.word	0x0800d298
 800b480:	9907      	ldr	r1, [sp, #28]
 800b482:	2900      	cmp	r1, #0
 800b484:	f000 80d0 	beq.w	800b628 <_dtoa_r+0x7c8>
 800b488:	9906      	ldr	r1, [sp, #24]
 800b48a:	2901      	cmp	r1, #1
 800b48c:	f300 80b4 	bgt.w	800b5f8 <_dtoa_r+0x798>
 800b490:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b492:	2900      	cmp	r1, #0
 800b494:	f000 80ac 	beq.w	800b5f0 <_dtoa_r+0x790>
 800b498:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b49c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b4a0:	461c      	mov	r4, r3
 800b4a2:	930a      	str	r3, [sp, #40]	; 0x28
 800b4a4:	9b04      	ldr	r3, [sp, #16]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	9304      	str	r3, [sp, #16]
 800b4aa:	9b05      	ldr	r3, [sp, #20]
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	4413      	add	r3, r2
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	9305      	str	r3, [sp, #20]
 800b4b4:	f000 fb54 	bl	800bb60 <__i2b>
 800b4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	f1b8 0f00 	cmp.w	r8, #0
 800b4c0:	dd0d      	ble.n	800b4de <_dtoa_r+0x67e>
 800b4c2:	9a05      	ldr	r2, [sp, #20]
 800b4c4:	2a00      	cmp	r2, #0
 800b4c6:	dd0a      	ble.n	800b4de <_dtoa_r+0x67e>
 800b4c8:	4542      	cmp	r2, r8
 800b4ca:	9904      	ldr	r1, [sp, #16]
 800b4cc:	bfa8      	it	ge
 800b4ce:	4642      	movge	r2, r8
 800b4d0:	1a89      	subs	r1, r1, r2
 800b4d2:	9104      	str	r1, [sp, #16]
 800b4d4:	9905      	ldr	r1, [sp, #20]
 800b4d6:	eba8 0802 	sub.w	r8, r8, r2
 800b4da:	1a8a      	subs	r2, r1, r2
 800b4dc:	9205      	str	r2, [sp, #20]
 800b4de:	b303      	cbz	r3, 800b522 <_dtoa_r+0x6c2>
 800b4e0:	9a07      	ldr	r2, [sp, #28]
 800b4e2:	2a00      	cmp	r2, #0
 800b4e4:	f000 80a5 	beq.w	800b632 <_dtoa_r+0x7d2>
 800b4e8:	2c00      	cmp	r4, #0
 800b4ea:	dd13      	ble.n	800b514 <_dtoa_r+0x6b4>
 800b4ec:	4639      	mov	r1, r7
 800b4ee:	4622      	mov	r2, r4
 800b4f0:	4630      	mov	r0, r6
 800b4f2:	930d      	str	r3, [sp, #52]	; 0x34
 800b4f4:	f000 fbf4 	bl	800bce0 <__pow5mult>
 800b4f8:	462a      	mov	r2, r5
 800b4fa:	4601      	mov	r1, r0
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	4630      	mov	r0, r6
 800b500:	f000 fb44 	bl	800bb8c <__multiply>
 800b504:	4629      	mov	r1, r5
 800b506:	900a      	str	r0, [sp, #40]	; 0x28
 800b508:	4630      	mov	r0, r6
 800b50a:	f000 fa71 	bl	800b9f0 <_Bfree>
 800b50e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b510:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b512:	4615      	mov	r5, r2
 800b514:	1b1a      	subs	r2, r3, r4
 800b516:	d004      	beq.n	800b522 <_dtoa_r+0x6c2>
 800b518:	4629      	mov	r1, r5
 800b51a:	4630      	mov	r0, r6
 800b51c:	f000 fbe0 	bl	800bce0 <__pow5mult>
 800b520:	4605      	mov	r5, r0
 800b522:	2101      	movs	r1, #1
 800b524:	4630      	mov	r0, r6
 800b526:	f000 fb1b 	bl	800bb60 <__i2b>
 800b52a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	4604      	mov	r4, r0
 800b530:	f340 8081 	ble.w	800b636 <_dtoa_r+0x7d6>
 800b534:	461a      	mov	r2, r3
 800b536:	4601      	mov	r1, r0
 800b538:	4630      	mov	r0, r6
 800b53a:	f000 fbd1 	bl	800bce0 <__pow5mult>
 800b53e:	9b06      	ldr	r3, [sp, #24]
 800b540:	2b01      	cmp	r3, #1
 800b542:	4604      	mov	r4, r0
 800b544:	dd7a      	ble.n	800b63c <_dtoa_r+0x7dc>
 800b546:	2300      	movs	r3, #0
 800b548:	930a      	str	r3, [sp, #40]	; 0x28
 800b54a:	6922      	ldr	r2, [r4, #16]
 800b54c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b550:	6910      	ldr	r0, [r2, #16]
 800b552:	f000 fab5 	bl	800bac0 <__hi0bits>
 800b556:	f1c0 0020 	rsb	r0, r0, #32
 800b55a:	9b05      	ldr	r3, [sp, #20]
 800b55c:	4418      	add	r0, r3
 800b55e:	f010 001f 	ands.w	r0, r0, #31
 800b562:	f000 808c 	beq.w	800b67e <_dtoa_r+0x81e>
 800b566:	f1c0 0220 	rsb	r2, r0, #32
 800b56a:	2a04      	cmp	r2, #4
 800b56c:	f340 8085 	ble.w	800b67a <_dtoa_r+0x81a>
 800b570:	f1c0 001c 	rsb	r0, r0, #28
 800b574:	9b04      	ldr	r3, [sp, #16]
 800b576:	4403      	add	r3, r0
 800b578:	9304      	str	r3, [sp, #16]
 800b57a:	9b05      	ldr	r3, [sp, #20]
 800b57c:	4403      	add	r3, r0
 800b57e:	4480      	add	r8, r0
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	dd05      	ble.n	800b594 <_dtoa_r+0x734>
 800b588:	4629      	mov	r1, r5
 800b58a:	461a      	mov	r2, r3
 800b58c:	4630      	mov	r0, r6
 800b58e:	f000 fc01 	bl	800bd94 <__lshift>
 800b592:	4605      	mov	r5, r0
 800b594:	9b05      	ldr	r3, [sp, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	dd05      	ble.n	800b5a6 <_dtoa_r+0x746>
 800b59a:	4621      	mov	r1, r4
 800b59c:	461a      	mov	r2, r3
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f000 fbf8 	bl	800bd94 <__lshift>
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d06a      	beq.n	800b682 <_dtoa_r+0x822>
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	4628      	mov	r0, r5
 800b5b0:	f000 fc60 	bl	800be74 <__mcmp>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	da64      	bge.n	800b682 <_dtoa_r+0x822>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	220a      	movs	r2, #10
 800b5be:	4630      	mov	r0, r6
 800b5c0:	f000 fa38 	bl	800ba34 <__multadd>
 800b5c4:	9b07      	ldr	r3, [sp, #28]
 800b5c6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8191 	beq.w	800b8f4 <_dtoa_r+0xa94>
 800b5d2:	4639      	mov	r1, r7
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	220a      	movs	r2, #10
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f000 fa2b 	bl	800ba34 <__multadd>
 800b5de:	f1ba 0f00 	cmp.w	sl, #0
 800b5e2:	4607      	mov	r7, r0
 800b5e4:	f300 808d 	bgt.w	800b702 <_dtoa_r+0x8a2>
 800b5e8:	9b06      	ldr	r3, [sp, #24]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	dc50      	bgt.n	800b690 <_dtoa_r+0x830>
 800b5ee:	e088      	b.n	800b702 <_dtoa_r+0x8a2>
 800b5f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b5f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5f6:	e751      	b.n	800b49c <_dtoa_r+0x63c>
 800b5f8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	bfbf      	itttt	lt
 800b600:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800b602:	1ae3      	sublt	r3, r4, r3
 800b604:	18d2      	addlt	r2, r2, r3
 800b606:	9209      	strlt	r2, [sp, #36]	; 0x24
 800b608:	bfb6      	itet	lt
 800b60a:	4623      	movlt	r3, r4
 800b60c:	1b1c      	subge	r4, r3, r4
 800b60e:	2400      	movlt	r4, #0
 800b610:	f1b9 0f00 	cmp.w	r9, #0
 800b614:	bfb5      	itete	lt
 800b616:	9a04      	ldrlt	r2, [sp, #16]
 800b618:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b61c:	eba2 0809 	sublt.w	r8, r2, r9
 800b620:	464a      	movge	r2, r9
 800b622:	bfb8      	it	lt
 800b624:	2200      	movlt	r2, #0
 800b626:	e73c      	b.n	800b4a2 <_dtoa_r+0x642>
 800b628:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b62c:	9f07      	ldr	r7, [sp, #28]
 800b62e:	461c      	mov	r4, r3
 800b630:	e744      	b.n	800b4bc <_dtoa_r+0x65c>
 800b632:	461a      	mov	r2, r3
 800b634:	e770      	b.n	800b518 <_dtoa_r+0x6b8>
 800b636:	9b06      	ldr	r3, [sp, #24]
 800b638:	2b01      	cmp	r3, #1
 800b63a:	dc18      	bgt.n	800b66e <_dtoa_r+0x80e>
 800b63c:	9b02      	ldr	r3, [sp, #8]
 800b63e:	b9b3      	cbnz	r3, 800b66e <_dtoa_r+0x80e>
 800b640:	9b03      	ldr	r3, [sp, #12]
 800b642:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b646:	b9a2      	cbnz	r2, 800b672 <_dtoa_r+0x812>
 800b648:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b64c:	0d12      	lsrs	r2, r2, #20
 800b64e:	0512      	lsls	r2, r2, #20
 800b650:	b18a      	cbz	r2, 800b676 <_dtoa_r+0x816>
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	3301      	adds	r3, #1
 800b656:	9304      	str	r3, [sp, #16]
 800b658:	9b05      	ldr	r3, [sp, #20]
 800b65a:	3301      	adds	r3, #1
 800b65c:	9305      	str	r3, [sp, #20]
 800b65e:	2301      	movs	r3, #1
 800b660:	930a      	str	r3, [sp, #40]	; 0x28
 800b662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	f47f af70 	bne.w	800b54a <_dtoa_r+0x6ea>
 800b66a:	2001      	movs	r0, #1
 800b66c:	e775      	b.n	800b55a <_dtoa_r+0x6fa>
 800b66e:	2300      	movs	r3, #0
 800b670:	e7f6      	b.n	800b660 <_dtoa_r+0x800>
 800b672:	9b02      	ldr	r3, [sp, #8]
 800b674:	e7f4      	b.n	800b660 <_dtoa_r+0x800>
 800b676:	920a      	str	r2, [sp, #40]	; 0x28
 800b678:	e7f3      	b.n	800b662 <_dtoa_r+0x802>
 800b67a:	d082      	beq.n	800b582 <_dtoa_r+0x722>
 800b67c:	4610      	mov	r0, r2
 800b67e:	301c      	adds	r0, #28
 800b680:	e778      	b.n	800b574 <_dtoa_r+0x714>
 800b682:	f1b9 0f00 	cmp.w	r9, #0
 800b686:	dc37      	bgt.n	800b6f8 <_dtoa_r+0x898>
 800b688:	9b06      	ldr	r3, [sp, #24]
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	dd34      	ble.n	800b6f8 <_dtoa_r+0x898>
 800b68e:	46ca      	mov	sl, r9
 800b690:	f1ba 0f00 	cmp.w	sl, #0
 800b694:	d10d      	bne.n	800b6b2 <_dtoa_r+0x852>
 800b696:	4621      	mov	r1, r4
 800b698:	4653      	mov	r3, sl
 800b69a:	2205      	movs	r2, #5
 800b69c:	4630      	mov	r0, r6
 800b69e:	f000 f9c9 	bl	800ba34 <__multadd>
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	4604      	mov	r4, r0
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	f000 fbe4 	bl	800be74 <__mcmp>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	f73f adeb 	bgt.w	800b288 <_dtoa_r+0x428>
 800b6b2:	9b08      	ldr	r3, [sp, #32]
 800b6b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b6b8:	ea6f 0b03 	mvn.w	fp, r3
 800b6bc:	f04f 0900 	mov.w	r9, #0
 800b6c0:	4621      	mov	r1, r4
 800b6c2:	4630      	mov	r0, r6
 800b6c4:	f000 f994 	bl	800b9f0 <_Bfree>
 800b6c8:	2f00      	cmp	r7, #0
 800b6ca:	f43f aea8 	beq.w	800b41e <_dtoa_r+0x5be>
 800b6ce:	f1b9 0f00 	cmp.w	r9, #0
 800b6d2:	d005      	beq.n	800b6e0 <_dtoa_r+0x880>
 800b6d4:	45b9      	cmp	r9, r7
 800b6d6:	d003      	beq.n	800b6e0 <_dtoa_r+0x880>
 800b6d8:	4649      	mov	r1, r9
 800b6da:	4630      	mov	r0, r6
 800b6dc:	f000 f988 	bl	800b9f0 <_Bfree>
 800b6e0:	4639      	mov	r1, r7
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	f000 f984 	bl	800b9f0 <_Bfree>
 800b6e8:	e699      	b.n	800b41e <_dtoa_r+0x5be>
 800b6ea:	2400      	movs	r4, #0
 800b6ec:	4627      	mov	r7, r4
 800b6ee:	e7e0      	b.n	800b6b2 <_dtoa_r+0x852>
 800b6f0:	46bb      	mov	fp, r7
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	e5c7      	b.n	800b288 <_dtoa_r+0x428>
 800b6f8:	9b07      	ldr	r3, [sp, #28]
 800b6fa:	46ca      	mov	sl, r9
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	f000 8100 	beq.w	800b902 <_dtoa_r+0xaa2>
 800b702:	f1b8 0f00 	cmp.w	r8, #0
 800b706:	dd05      	ble.n	800b714 <_dtoa_r+0x8b4>
 800b708:	4639      	mov	r1, r7
 800b70a:	4642      	mov	r2, r8
 800b70c:	4630      	mov	r0, r6
 800b70e:	f000 fb41 	bl	800bd94 <__lshift>
 800b712:	4607      	mov	r7, r0
 800b714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b716:	2b00      	cmp	r3, #0
 800b718:	d05d      	beq.n	800b7d6 <_dtoa_r+0x976>
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	4630      	mov	r0, r6
 800b71e:	f000 f927 	bl	800b970 <_Balloc>
 800b722:	4680      	mov	r8, r0
 800b724:	b928      	cbnz	r0, 800b732 <_dtoa_r+0x8d2>
 800b726:	4b82      	ldr	r3, [pc, #520]	; (800b930 <_dtoa_r+0xad0>)
 800b728:	4602      	mov	r2, r0
 800b72a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b72e:	f7ff bbaf 	b.w	800ae90 <_dtoa_r+0x30>
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	3202      	adds	r2, #2
 800b736:	0092      	lsls	r2, r2, #2
 800b738:	f107 010c 	add.w	r1, r7, #12
 800b73c:	300c      	adds	r0, #12
 800b73e:	f000 f909 	bl	800b954 <memcpy>
 800b742:	2201      	movs	r2, #1
 800b744:	4641      	mov	r1, r8
 800b746:	4630      	mov	r0, r6
 800b748:	f000 fb24 	bl	800bd94 <__lshift>
 800b74c:	9b01      	ldr	r3, [sp, #4]
 800b74e:	3301      	adds	r3, #1
 800b750:	9304      	str	r3, [sp, #16]
 800b752:	9b01      	ldr	r3, [sp, #4]
 800b754:	4453      	add	r3, sl
 800b756:	9308      	str	r3, [sp, #32]
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	46b9      	mov	r9, r7
 800b760:	9307      	str	r3, [sp, #28]
 800b762:	4607      	mov	r7, r0
 800b764:	9b04      	ldr	r3, [sp, #16]
 800b766:	4621      	mov	r1, r4
 800b768:	3b01      	subs	r3, #1
 800b76a:	4628      	mov	r0, r5
 800b76c:	9302      	str	r3, [sp, #8]
 800b76e:	f7ff fae9 	bl	800ad44 <quorem>
 800b772:	4603      	mov	r3, r0
 800b774:	3330      	adds	r3, #48	; 0x30
 800b776:	9005      	str	r0, [sp, #20]
 800b778:	4649      	mov	r1, r9
 800b77a:	4628      	mov	r0, r5
 800b77c:	9309      	str	r3, [sp, #36]	; 0x24
 800b77e:	f000 fb79 	bl	800be74 <__mcmp>
 800b782:	463a      	mov	r2, r7
 800b784:	4682      	mov	sl, r0
 800b786:	4621      	mov	r1, r4
 800b788:	4630      	mov	r0, r6
 800b78a:	f000 fb8f 	bl	800beac <__mdiff>
 800b78e:	68c2      	ldr	r2, [r0, #12]
 800b790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b792:	4680      	mov	r8, r0
 800b794:	bb0a      	cbnz	r2, 800b7da <_dtoa_r+0x97a>
 800b796:	4601      	mov	r1, r0
 800b798:	4628      	mov	r0, r5
 800b79a:	f000 fb6b 	bl	800be74 <__mcmp>
 800b79e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	4641      	mov	r1, r8
 800b7a4:	4630      	mov	r0, r6
 800b7a6:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b7aa:	f000 f921 	bl	800b9f0 <_Bfree>
 800b7ae:	9b06      	ldr	r3, [sp, #24]
 800b7b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7b2:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b7b6:	ea43 0102 	orr.w	r1, r3, r2
 800b7ba:	9b07      	ldr	r3, [sp, #28]
 800b7bc:	430b      	orrs	r3, r1
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	d10d      	bne.n	800b7de <_dtoa_r+0x97e>
 800b7c2:	2b39      	cmp	r3, #57	; 0x39
 800b7c4:	d029      	beq.n	800b81a <_dtoa_r+0x9ba>
 800b7c6:	f1ba 0f00 	cmp.w	sl, #0
 800b7ca:	dd01      	ble.n	800b7d0 <_dtoa_r+0x970>
 800b7cc:	9b05      	ldr	r3, [sp, #20]
 800b7ce:	3331      	adds	r3, #49	; 0x31
 800b7d0:	9a02      	ldr	r2, [sp, #8]
 800b7d2:	7013      	strb	r3, [r2, #0]
 800b7d4:	e774      	b.n	800b6c0 <_dtoa_r+0x860>
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	e7b8      	b.n	800b74c <_dtoa_r+0x8ec>
 800b7da:	2201      	movs	r2, #1
 800b7dc:	e7e1      	b.n	800b7a2 <_dtoa_r+0x942>
 800b7de:	f1ba 0f00 	cmp.w	sl, #0
 800b7e2:	db06      	blt.n	800b7f2 <_dtoa_r+0x992>
 800b7e4:	9906      	ldr	r1, [sp, #24]
 800b7e6:	ea41 0a0a 	orr.w	sl, r1, sl
 800b7ea:	9907      	ldr	r1, [sp, #28]
 800b7ec:	ea5a 0101 	orrs.w	r1, sl, r1
 800b7f0:	d120      	bne.n	800b834 <_dtoa_r+0x9d4>
 800b7f2:	2a00      	cmp	r2, #0
 800b7f4:	ddec      	ble.n	800b7d0 <_dtoa_r+0x970>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	f000 fac9 	bl	800bd94 <__lshift>
 800b802:	4621      	mov	r1, r4
 800b804:	4605      	mov	r5, r0
 800b806:	f000 fb35 	bl	800be74 <__mcmp>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	9b04      	ldr	r3, [sp, #16]
 800b80e:	dc02      	bgt.n	800b816 <_dtoa_r+0x9b6>
 800b810:	d1de      	bne.n	800b7d0 <_dtoa_r+0x970>
 800b812:	07da      	lsls	r2, r3, #31
 800b814:	d5dc      	bpl.n	800b7d0 <_dtoa_r+0x970>
 800b816:	2b39      	cmp	r3, #57	; 0x39
 800b818:	d1d8      	bne.n	800b7cc <_dtoa_r+0x96c>
 800b81a:	9a02      	ldr	r2, [sp, #8]
 800b81c:	2339      	movs	r3, #57	; 0x39
 800b81e:	7013      	strb	r3, [r2, #0]
 800b820:	4643      	mov	r3, r8
 800b822:	4698      	mov	r8, r3
 800b824:	3b01      	subs	r3, #1
 800b826:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b82a:	2a39      	cmp	r2, #57	; 0x39
 800b82c:	d051      	beq.n	800b8d2 <_dtoa_r+0xa72>
 800b82e:	3201      	adds	r2, #1
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	e745      	b.n	800b6c0 <_dtoa_r+0x860>
 800b834:	2a00      	cmp	r2, #0
 800b836:	dd03      	ble.n	800b840 <_dtoa_r+0x9e0>
 800b838:	2b39      	cmp	r3, #57	; 0x39
 800b83a:	d0ee      	beq.n	800b81a <_dtoa_r+0x9ba>
 800b83c:	3301      	adds	r3, #1
 800b83e:	e7c7      	b.n	800b7d0 <_dtoa_r+0x970>
 800b840:	9a04      	ldr	r2, [sp, #16]
 800b842:	9908      	ldr	r1, [sp, #32]
 800b844:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b848:	428a      	cmp	r2, r1
 800b84a:	d02b      	beq.n	800b8a4 <_dtoa_r+0xa44>
 800b84c:	4629      	mov	r1, r5
 800b84e:	2300      	movs	r3, #0
 800b850:	220a      	movs	r2, #10
 800b852:	4630      	mov	r0, r6
 800b854:	f000 f8ee 	bl	800ba34 <__multadd>
 800b858:	45b9      	cmp	r9, r7
 800b85a:	4605      	mov	r5, r0
 800b85c:	f04f 0300 	mov.w	r3, #0
 800b860:	f04f 020a 	mov.w	r2, #10
 800b864:	4649      	mov	r1, r9
 800b866:	4630      	mov	r0, r6
 800b868:	d107      	bne.n	800b87a <_dtoa_r+0xa1a>
 800b86a:	f000 f8e3 	bl	800ba34 <__multadd>
 800b86e:	4681      	mov	r9, r0
 800b870:	4607      	mov	r7, r0
 800b872:	9b04      	ldr	r3, [sp, #16]
 800b874:	3301      	adds	r3, #1
 800b876:	9304      	str	r3, [sp, #16]
 800b878:	e774      	b.n	800b764 <_dtoa_r+0x904>
 800b87a:	f000 f8db 	bl	800ba34 <__multadd>
 800b87e:	4639      	mov	r1, r7
 800b880:	4681      	mov	r9, r0
 800b882:	2300      	movs	r3, #0
 800b884:	220a      	movs	r2, #10
 800b886:	4630      	mov	r0, r6
 800b888:	f000 f8d4 	bl	800ba34 <__multadd>
 800b88c:	4607      	mov	r7, r0
 800b88e:	e7f0      	b.n	800b872 <_dtoa_r+0xa12>
 800b890:	f1ba 0f00 	cmp.w	sl, #0
 800b894:	9a01      	ldr	r2, [sp, #4]
 800b896:	bfcc      	ite	gt
 800b898:	46d0      	movgt	r8, sl
 800b89a:	f04f 0801 	movle.w	r8, #1
 800b89e:	4490      	add	r8, r2
 800b8a0:	f04f 0900 	mov.w	r9, #0
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	9302      	str	r3, [sp, #8]
 800b8ac:	f000 fa72 	bl	800bd94 <__lshift>
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	f000 fade 	bl	800be74 <__mcmp>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	dcb1      	bgt.n	800b820 <_dtoa_r+0x9c0>
 800b8bc:	d102      	bne.n	800b8c4 <_dtoa_r+0xa64>
 800b8be:	9b02      	ldr	r3, [sp, #8]
 800b8c0:	07db      	lsls	r3, r3, #31
 800b8c2:	d4ad      	bmi.n	800b820 <_dtoa_r+0x9c0>
 800b8c4:	4643      	mov	r3, r8
 800b8c6:	4698      	mov	r8, r3
 800b8c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8cc:	2a30      	cmp	r2, #48	; 0x30
 800b8ce:	d0fa      	beq.n	800b8c6 <_dtoa_r+0xa66>
 800b8d0:	e6f6      	b.n	800b6c0 <_dtoa_r+0x860>
 800b8d2:	9a01      	ldr	r2, [sp, #4]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d1a4      	bne.n	800b822 <_dtoa_r+0x9c2>
 800b8d8:	f10b 0b01 	add.w	fp, fp, #1
 800b8dc:	2331      	movs	r3, #49	; 0x31
 800b8de:	e778      	b.n	800b7d2 <_dtoa_r+0x972>
 800b8e0:	4b14      	ldr	r3, [pc, #80]	; (800b934 <_dtoa_r+0xad4>)
 800b8e2:	f7ff bb27 	b.w	800af34 <_dtoa_r+0xd4>
 800b8e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f47f ab03 	bne.w	800aef4 <_dtoa_r+0x94>
 800b8ee:	4b12      	ldr	r3, [pc, #72]	; (800b938 <_dtoa_r+0xad8>)
 800b8f0:	f7ff bb20 	b.w	800af34 <_dtoa_r+0xd4>
 800b8f4:	f1ba 0f00 	cmp.w	sl, #0
 800b8f8:	dc03      	bgt.n	800b902 <_dtoa_r+0xaa2>
 800b8fa:	9b06      	ldr	r3, [sp, #24]
 800b8fc:	2b02      	cmp	r3, #2
 800b8fe:	f73f aec7 	bgt.w	800b690 <_dtoa_r+0x830>
 800b902:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b906:	4621      	mov	r1, r4
 800b908:	4628      	mov	r0, r5
 800b90a:	f7ff fa1b 	bl	800ad44 <quorem>
 800b90e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b912:	f808 3b01 	strb.w	r3, [r8], #1
 800b916:	9a01      	ldr	r2, [sp, #4]
 800b918:	eba8 0202 	sub.w	r2, r8, r2
 800b91c:	4592      	cmp	sl, r2
 800b91e:	ddb7      	ble.n	800b890 <_dtoa_r+0xa30>
 800b920:	4629      	mov	r1, r5
 800b922:	2300      	movs	r3, #0
 800b924:	220a      	movs	r2, #10
 800b926:	4630      	mov	r0, r6
 800b928:	f000 f884 	bl	800ba34 <__multadd>
 800b92c:	4605      	mov	r5, r0
 800b92e:	e7ea      	b.n	800b906 <_dtoa_r+0xaa6>
 800b930:	0800d227 	.word	0x0800d227
 800b934:	0800d184 	.word	0x0800d184
 800b938:	0800d1a8 	.word	0x0800d1a8

0800b93c <_localeconv_r>:
 800b93c:	4800      	ldr	r0, [pc, #0]	; (800b940 <_localeconv_r+0x4>)
 800b93e:	4770      	bx	lr
 800b940:	24000164 	.word	0x24000164

0800b944 <malloc>:
 800b944:	4b02      	ldr	r3, [pc, #8]	; (800b950 <malloc+0xc>)
 800b946:	4601      	mov	r1, r0
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	f000 bc17 	b.w	800c17c <_malloc_r>
 800b94e:	bf00      	nop
 800b950:	24000010 	.word	0x24000010

0800b954 <memcpy>:
 800b954:	440a      	add	r2, r1
 800b956:	4291      	cmp	r1, r2
 800b958:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b95c:	d100      	bne.n	800b960 <memcpy+0xc>
 800b95e:	4770      	bx	lr
 800b960:	b510      	push	{r4, lr}
 800b962:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b966:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b96a:	4291      	cmp	r1, r2
 800b96c:	d1f9      	bne.n	800b962 <memcpy+0xe>
 800b96e:	bd10      	pop	{r4, pc}

0800b970 <_Balloc>:
 800b970:	b570      	push	{r4, r5, r6, lr}
 800b972:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b974:	4604      	mov	r4, r0
 800b976:	460d      	mov	r5, r1
 800b978:	b976      	cbnz	r6, 800b998 <_Balloc+0x28>
 800b97a:	2010      	movs	r0, #16
 800b97c:	f7ff ffe2 	bl	800b944 <malloc>
 800b980:	4602      	mov	r2, r0
 800b982:	6260      	str	r0, [r4, #36]	; 0x24
 800b984:	b920      	cbnz	r0, 800b990 <_Balloc+0x20>
 800b986:	4b18      	ldr	r3, [pc, #96]	; (800b9e8 <_Balloc+0x78>)
 800b988:	4818      	ldr	r0, [pc, #96]	; (800b9ec <_Balloc+0x7c>)
 800b98a:	2166      	movs	r1, #102	; 0x66
 800b98c:	f000 fdd6 	bl	800c53c <__assert_func>
 800b990:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b994:	6006      	str	r6, [r0, #0]
 800b996:	60c6      	str	r6, [r0, #12]
 800b998:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b99a:	68f3      	ldr	r3, [r6, #12]
 800b99c:	b183      	cbz	r3, 800b9c0 <_Balloc+0x50>
 800b99e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9a6:	b9b8      	cbnz	r0, 800b9d8 <_Balloc+0x68>
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b9ae:	1d72      	adds	r2, r6, #5
 800b9b0:	0092      	lsls	r2, r2, #2
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 fb60 	bl	800c078 <_calloc_r>
 800b9b8:	b160      	cbz	r0, 800b9d4 <_Balloc+0x64>
 800b9ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9be:	e00e      	b.n	800b9de <_Balloc+0x6e>
 800b9c0:	2221      	movs	r2, #33	; 0x21
 800b9c2:	2104      	movs	r1, #4
 800b9c4:	4620      	mov	r0, r4
 800b9c6:	f000 fb57 	bl	800c078 <_calloc_r>
 800b9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9cc:	60f0      	str	r0, [r6, #12]
 800b9ce:	68db      	ldr	r3, [r3, #12]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d1e4      	bne.n	800b99e <_Balloc+0x2e>
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	bd70      	pop	{r4, r5, r6, pc}
 800b9d8:	6802      	ldr	r2, [r0, #0]
 800b9da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b9e4:	e7f7      	b.n	800b9d6 <_Balloc+0x66>
 800b9e6:	bf00      	nop
 800b9e8:	0800d1b5 	.word	0x0800d1b5
 800b9ec:	0800d238 	.word	0x0800d238

0800b9f0 <_Bfree>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	b976      	cbnz	r6, 800ba18 <_Bfree+0x28>
 800b9fa:	2010      	movs	r0, #16
 800b9fc:	f7ff ffa2 	bl	800b944 <malloc>
 800ba00:	4602      	mov	r2, r0
 800ba02:	6268      	str	r0, [r5, #36]	; 0x24
 800ba04:	b920      	cbnz	r0, 800ba10 <_Bfree+0x20>
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <_Bfree+0x3c>)
 800ba08:	4809      	ldr	r0, [pc, #36]	; (800ba30 <_Bfree+0x40>)
 800ba0a:	218a      	movs	r1, #138	; 0x8a
 800ba0c:	f000 fd96 	bl	800c53c <__assert_func>
 800ba10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba14:	6006      	str	r6, [r0, #0]
 800ba16:	60c6      	str	r6, [r0, #12]
 800ba18:	b13c      	cbz	r4, 800ba2a <_Bfree+0x3a>
 800ba1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba1c:	6862      	ldr	r2, [r4, #4]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba24:	6021      	str	r1, [r4, #0]
 800ba26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	0800d1b5 	.word	0x0800d1b5
 800ba30:	0800d238 	.word	0x0800d238

0800ba34 <__multadd>:
 800ba34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba38:	690d      	ldr	r5, [r1, #16]
 800ba3a:	4607      	mov	r7, r0
 800ba3c:	460c      	mov	r4, r1
 800ba3e:	461e      	mov	r6, r3
 800ba40:	f101 0c14 	add.w	ip, r1, #20
 800ba44:	2000      	movs	r0, #0
 800ba46:	f8dc 3000 	ldr.w	r3, [ip]
 800ba4a:	b299      	uxth	r1, r3
 800ba4c:	fb02 6101 	mla	r1, r2, r1, r6
 800ba50:	0c1e      	lsrs	r6, r3, #16
 800ba52:	0c0b      	lsrs	r3, r1, #16
 800ba54:	fb02 3306 	mla	r3, r2, r6, r3
 800ba58:	b289      	uxth	r1, r1
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ba60:	4285      	cmp	r5, r0
 800ba62:	f84c 1b04 	str.w	r1, [ip], #4
 800ba66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ba6a:	dcec      	bgt.n	800ba46 <__multadd+0x12>
 800ba6c:	b30e      	cbz	r6, 800bab2 <__multadd+0x7e>
 800ba6e:	68a3      	ldr	r3, [r4, #8]
 800ba70:	42ab      	cmp	r3, r5
 800ba72:	dc19      	bgt.n	800baa8 <__multadd+0x74>
 800ba74:	6861      	ldr	r1, [r4, #4]
 800ba76:	4638      	mov	r0, r7
 800ba78:	3101      	adds	r1, #1
 800ba7a:	f7ff ff79 	bl	800b970 <_Balloc>
 800ba7e:	4680      	mov	r8, r0
 800ba80:	b928      	cbnz	r0, 800ba8e <__multadd+0x5a>
 800ba82:	4602      	mov	r2, r0
 800ba84:	4b0c      	ldr	r3, [pc, #48]	; (800bab8 <__multadd+0x84>)
 800ba86:	480d      	ldr	r0, [pc, #52]	; (800babc <__multadd+0x88>)
 800ba88:	21b5      	movs	r1, #181	; 0xb5
 800ba8a:	f000 fd57 	bl	800c53c <__assert_func>
 800ba8e:	6922      	ldr	r2, [r4, #16]
 800ba90:	3202      	adds	r2, #2
 800ba92:	f104 010c 	add.w	r1, r4, #12
 800ba96:	0092      	lsls	r2, r2, #2
 800ba98:	300c      	adds	r0, #12
 800ba9a:	f7ff ff5b 	bl	800b954 <memcpy>
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4638      	mov	r0, r7
 800baa2:	f7ff ffa5 	bl	800b9f0 <_Bfree>
 800baa6:	4644      	mov	r4, r8
 800baa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800baac:	3501      	adds	r5, #1
 800baae:	615e      	str	r6, [r3, #20]
 800bab0:	6125      	str	r5, [r4, #16]
 800bab2:	4620      	mov	r0, r4
 800bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab8:	0800d227 	.word	0x0800d227
 800babc:	0800d238 	.word	0x0800d238

0800bac0 <__hi0bits>:
 800bac0:	0c03      	lsrs	r3, r0, #16
 800bac2:	041b      	lsls	r3, r3, #16
 800bac4:	b9d3      	cbnz	r3, 800bafc <__hi0bits+0x3c>
 800bac6:	0400      	lsls	r0, r0, #16
 800bac8:	2310      	movs	r3, #16
 800baca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bace:	bf04      	itt	eq
 800bad0:	0200      	lsleq	r0, r0, #8
 800bad2:	3308      	addeq	r3, #8
 800bad4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bad8:	bf04      	itt	eq
 800bada:	0100      	lsleq	r0, r0, #4
 800badc:	3304      	addeq	r3, #4
 800bade:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bae2:	bf04      	itt	eq
 800bae4:	0080      	lsleq	r0, r0, #2
 800bae6:	3302      	addeq	r3, #2
 800bae8:	2800      	cmp	r0, #0
 800baea:	db05      	blt.n	800baf8 <__hi0bits+0x38>
 800baec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800baf0:	f103 0301 	add.w	r3, r3, #1
 800baf4:	bf08      	it	eq
 800baf6:	2320      	moveq	r3, #32
 800baf8:	4618      	mov	r0, r3
 800bafa:	4770      	bx	lr
 800bafc:	2300      	movs	r3, #0
 800bafe:	e7e4      	b.n	800baca <__hi0bits+0xa>

0800bb00 <__lo0bits>:
 800bb00:	6803      	ldr	r3, [r0, #0]
 800bb02:	f013 0207 	ands.w	r2, r3, #7
 800bb06:	4601      	mov	r1, r0
 800bb08:	d00b      	beq.n	800bb22 <__lo0bits+0x22>
 800bb0a:	07da      	lsls	r2, r3, #31
 800bb0c:	d423      	bmi.n	800bb56 <__lo0bits+0x56>
 800bb0e:	0798      	lsls	r0, r3, #30
 800bb10:	bf49      	itett	mi
 800bb12:	085b      	lsrmi	r3, r3, #1
 800bb14:	089b      	lsrpl	r3, r3, #2
 800bb16:	2001      	movmi	r0, #1
 800bb18:	600b      	strmi	r3, [r1, #0]
 800bb1a:	bf5c      	itt	pl
 800bb1c:	600b      	strpl	r3, [r1, #0]
 800bb1e:	2002      	movpl	r0, #2
 800bb20:	4770      	bx	lr
 800bb22:	b298      	uxth	r0, r3
 800bb24:	b9a8      	cbnz	r0, 800bb52 <__lo0bits+0x52>
 800bb26:	0c1b      	lsrs	r3, r3, #16
 800bb28:	2010      	movs	r0, #16
 800bb2a:	b2da      	uxtb	r2, r3
 800bb2c:	b90a      	cbnz	r2, 800bb32 <__lo0bits+0x32>
 800bb2e:	3008      	adds	r0, #8
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	071a      	lsls	r2, r3, #28
 800bb34:	bf04      	itt	eq
 800bb36:	091b      	lsreq	r3, r3, #4
 800bb38:	3004      	addeq	r0, #4
 800bb3a:	079a      	lsls	r2, r3, #30
 800bb3c:	bf04      	itt	eq
 800bb3e:	089b      	lsreq	r3, r3, #2
 800bb40:	3002      	addeq	r0, #2
 800bb42:	07da      	lsls	r2, r3, #31
 800bb44:	d403      	bmi.n	800bb4e <__lo0bits+0x4e>
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	f100 0001 	add.w	r0, r0, #1
 800bb4c:	d005      	beq.n	800bb5a <__lo0bits+0x5a>
 800bb4e:	600b      	str	r3, [r1, #0]
 800bb50:	4770      	bx	lr
 800bb52:	4610      	mov	r0, r2
 800bb54:	e7e9      	b.n	800bb2a <__lo0bits+0x2a>
 800bb56:	2000      	movs	r0, #0
 800bb58:	4770      	bx	lr
 800bb5a:	2020      	movs	r0, #32
 800bb5c:	4770      	bx	lr
	...

0800bb60 <__i2b>:
 800bb60:	b510      	push	{r4, lr}
 800bb62:	460c      	mov	r4, r1
 800bb64:	2101      	movs	r1, #1
 800bb66:	f7ff ff03 	bl	800b970 <_Balloc>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	b928      	cbnz	r0, 800bb7a <__i2b+0x1a>
 800bb6e:	4b05      	ldr	r3, [pc, #20]	; (800bb84 <__i2b+0x24>)
 800bb70:	4805      	ldr	r0, [pc, #20]	; (800bb88 <__i2b+0x28>)
 800bb72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb76:	f000 fce1 	bl	800c53c <__assert_func>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	6144      	str	r4, [r0, #20]
 800bb7e:	6103      	str	r3, [r0, #16]
 800bb80:	bd10      	pop	{r4, pc}
 800bb82:	bf00      	nop
 800bb84:	0800d227 	.word	0x0800d227
 800bb88:	0800d238 	.word	0x0800d238

0800bb8c <__multiply>:
 800bb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb90:	4691      	mov	r9, r2
 800bb92:	690a      	ldr	r2, [r1, #16]
 800bb94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	bfb8      	it	lt
 800bb9c:	460b      	movlt	r3, r1
 800bb9e:	460c      	mov	r4, r1
 800bba0:	bfbc      	itt	lt
 800bba2:	464c      	movlt	r4, r9
 800bba4:	4699      	movlt	r9, r3
 800bba6:	6927      	ldr	r7, [r4, #16]
 800bba8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	6861      	ldr	r1, [r4, #4]
 800bbb0:	eb07 060a 	add.w	r6, r7, sl
 800bbb4:	42b3      	cmp	r3, r6
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	bfb8      	it	lt
 800bbba:	3101      	addlt	r1, #1
 800bbbc:	f7ff fed8 	bl	800b970 <_Balloc>
 800bbc0:	b930      	cbnz	r0, 800bbd0 <__multiply+0x44>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	4b44      	ldr	r3, [pc, #272]	; (800bcd8 <__multiply+0x14c>)
 800bbc6:	4845      	ldr	r0, [pc, #276]	; (800bcdc <__multiply+0x150>)
 800bbc8:	f240 115d 	movw	r1, #349	; 0x15d
 800bbcc:	f000 fcb6 	bl	800c53c <__assert_func>
 800bbd0:	f100 0514 	add.w	r5, r0, #20
 800bbd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bbd8:	462b      	mov	r3, r5
 800bbda:	2200      	movs	r2, #0
 800bbdc:	4543      	cmp	r3, r8
 800bbde:	d321      	bcc.n	800bc24 <__multiply+0x98>
 800bbe0:	f104 0314 	add.w	r3, r4, #20
 800bbe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bbe8:	f109 0314 	add.w	r3, r9, #20
 800bbec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bbf0:	9202      	str	r2, [sp, #8]
 800bbf2:	1b3a      	subs	r2, r7, r4
 800bbf4:	3a15      	subs	r2, #21
 800bbf6:	f022 0203 	bic.w	r2, r2, #3
 800bbfa:	3204      	adds	r2, #4
 800bbfc:	f104 0115 	add.w	r1, r4, #21
 800bc00:	428f      	cmp	r7, r1
 800bc02:	bf38      	it	cc
 800bc04:	2204      	movcc	r2, #4
 800bc06:	9201      	str	r2, [sp, #4]
 800bc08:	9a02      	ldr	r2, [sp, #8]
 800bc0a:	9303      	str	r3, [sp, #12]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d80c      	bhi.n	800bc2a <__multiply+0x9e>
 800bc10:	2e00      	cmp	r6, #0
 800bc12:	dd03      	ble.n	800bc1c <__multiply+0x90>
 800bc14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d05a      	beq.n	800bcd2 <__multiply+0x146>
 800bc1c:	6106      	str	r6, [r0, #16]
 800bc1e:	b005      	add	sp, #20
 800bc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc24:	f843 2b04 	str.w	r2, [r3], #4
 800bc28:	e7d8      	b.n	800bbdc <__multiply+0x50>
 800bc2a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc2e:	f1ba 0f00 	cmp.w	sl, #0
 800bc32:	d024      	beq.n	800bc7e <__multiply+0xf2>
 800bc34:	f104 0e14 	add.w	lr, r4, #20
 800bc38:	46a9      	mov	r9, r5
 800bc3a:	f04f 0c00 	mov.w	ip, #0
 800bc3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bc42:	f8d9 1000 	ldr.w	r1, [r9]
 800bc46:	fa1f fb82 	uxth.w	fp, r2
 800bc4a:	b289      	uxth	r1, r1
 800bc4c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bc50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bc54:	f8d9 2000 	ldr.w	r2, [r9]
 800bc58:	4461      	add	r1, ip
 800bc5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc5e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bc62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bc66:	b289      	uxth	r1, r1
 800bc68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bc6c:	4577      	cmp	r7, lr
 800bc6e:	f849 1b04 	str.w	r1, [r9], #4
 800bc72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bc76:	d8e2      	bhi.n	800bc3e <__multiply+0xb2>
 800bc78:	9a01      	ldr	r2, [sp, #4]
 800bc7a:	f845 c002 	str.w	ip, [r5, r2]
 800bc7e:	9a03      	ldr	r2, [sp, #12]
 800bc80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc84:	3304      	adds	r3, #4
 800bc86:	f1b9 0f00 	cmp.w	r9, #0
 800bc8a:	d020      	beq.n	800bcce <__multiply+0x142>
 800bc8c:	6829      	ldr	r1, [r5, #0]
 800bc8e:	f104 0c14 	add.w	ip, r4, #20
 800bc92:	46ae      	mov	lr, r5
 800bc94:	f04f 0a00 	mov.w	sl, #0
 800bc98:	f8bc b000 	ldrh.w	fp, [ip]
 800bc9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bca0:	fb09 220b 	mla	r2, r9, fp, r2
 800bca4:	4492      	add	sl, r2
 800bca6:	b289      	uxth	r1, r1
 800bca8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bcac:	f84e 1b04 	str.w	r1, [lr], #4
 800bcb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bcb4:	f8be 1000 	ldrh.w	r1, [lr]
 800bcb8:	0c12      	lsrs	r2, r2, #16
 800bcba:	fb09 1102 	mla	r1, r9, r2, r1
 800bcbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bcc2:	4567      	cmp	r7, ip
 800bcc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bcc8:	d8e6      	bhi.n	800bc98 <__multiply+0x10c>
 800bcca:	9a01      	ldr	r2, [sp, #4]
 800bccc:	50a9      	str	r1, [r5, r2]
 800bcce:	3504      	adds	r5, #4
 800bcd0:	e79a      	b.n	800bc08 <__multiply+0x7c>
 800bcd2:	3e01      	subs	r6, #1
 800bcd4:	e79c      	b.n	800bc10 <__multiply+0x84>
 800bcd6:	bf00      	nop
 800bcd8:	0800d227 	.word	0x0800d227
 800bcdc:	0800d238 	.word	0x0800d238

0800bce0 <__pow5mult>:
 800bce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bce4:	4615      	mov	r5, r2
 800bce6:	f012 0203 	ands.w	r2, r2, #3
 800bcea:	4606      	mov	r6, r0
 800bcec:	460f      	mov	r7, r1
 800bcee:	d007      	beq.n	800bd00 <__pow5mult+0x20>
 800bcf0:	4c25      	ldr	r4, [pc, #148]	; (800bd88 <__pow5mult+0xa8>)
 800bcf2:	3a01      	subs	r2, #1
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bcfa:	f7ff fe9b 	bl	800ba34 <__multadd>
 800bcfe:	4607      	mov	r7, r0
 800bd00:	10ad      	asrs	r5, r5, #2
 800bd02:	d03d      	beq.n	800bd80 <__pow5mult+0xa0>
 800bd04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd06:	b97c      	cbnz	r4, 800bd28 <__pow5mult+0x48>
 800bd08:	2010      	movs	r0, #16
 800bd0a:	f7ff fe1b 	bl	800b944 <malloc>
 800bd0e:	4602      	mov	r2, r0
 800bd10:	6270      	str	r0, [r6, #36]	; 0x24
 800bd12:	b928      	cbnz	r0, 800bd20 <__pow5mult+0x40>
 800bd14:	4b1d      	ldr	r3, [pc, #116]	; (800bd8c <__pow5mult+0xac>)
 800bd16:	481e      	ldr	r0, [pc, #120]	; (800bd90 <__pow5mult+0xb0>)
 800bd18:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd1c:	f000 fc0e 	bl	800c53c <__assert_func>
 800bd20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd24:	6004      	str	r4, [r0, #0]
 800bd26:	60c4      	str	r4, [r0, #12]
 800bd28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd30:	b94c      	cbnz	r4, 800bd46 <__pow5mult+0x66>
 800bd32:	f240 2171 	movw	r1, #625	; 0x271
 800bd36:	4630      	mov	r0, r6
 800bd38:	f7ff ff12 	bl	800bb60 <__i2b>
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd42:	4604      	mov	r4, r0
 800bd44:	6003      	str	r3, [r0, #0]
 800bd46:	f04f 0900 	mov.w	r9, #0
 800bd4a:	07eb      	lsls	r3, r5, #31
 800bd4c:	d50a      	bpl.n	800bd64 <__pow5mult+0x84>
 800bd4e:	4639      	mov	r1, r7
 800bd50:	4622      	mov	r2, r4
 800bd52:	4630      	mov	r0, r6
 800bd54:	f7ff ff1a 	bl	800bb8c <__multiply>
 800bd58:	4639      	mov	r1, r7
 800bd5a:	4680      	mov	r8, r0
 800bd5c:	4630      	mov	r0, r6
 800bd5e:	f7ff fe47 	bl	800b9f0 <_Bfree>
 800bd62:	4647      	mov	r7, r8
 800bd64:	106d      	asrs	r5, r5, #1
 800bd66:	d00b      	beq.n	800bd80 <__pow5mult+0xa0>
 800bd68:	6820      	ldr	r0, [r4, #0]
 800bd6a:	b938      	cbnz	r0, 800bd7c <__pow5mult+0x9c>
 800bd6c:	4622      	mov	r2, r4
 800bd6e:	4621      	mov	r1, r4
 800bd70:	4630      	mov	r0, r6
 800bd72:	f7ff ff0b 	bl	800bb8c <__multiply>
 800bd76:	6020      	str	r0, [r4, #0]
 800bd78:	f8c0 9000 	str.w	r9, [r0]
 800bd7c:	4604      	mov	r4, r0
 800bd7e:	e7e4      	b.n	800bd4a <__pow5mult+0x6a>
 800bd80:	4638      	mov	r0, r7
 800bd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd86:	bf00      	nop
 800bd88:	0800d388 	.word	0x0800d388
 800bd8c:	0800d1b5 	.word	0x0800d1b5
 800bd90:	0800d238 	.word	0x0800d238

0800bd94 <__lshift>:
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	6849      	ldr	r1, [r1, #4]
 800bd9c:	6923      	ldr	r3, [r4, #16]
 800bd9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bda2:	68a3      	ldr	r3, [r4, #8]
 800bda4:	4607      	mov	r7, r0
 800bda6:	4691      	mov	r9, r2
 800bda8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdac:	f108 0601 	add.w	r6, r8, #1
 800bdb0:	42b3      	cmp	r3, r6
 800bdb2:	db0b      	blt.n	800bdcc <__lshift+0x38>
 800bdb4:	4638      	mov	r0, r7
 800bdb6:	f7ff fddb 	bl	800b970 <_Balloc>
 800bdba:	4605      	mov	r5, r0
 800bdbc:	b948      	cbnz	r0, 800bdd2 <__lshift+0x3e>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	4b2a      	ldr	r3, [pc, #168]	; (800be6c <__lshift+0xd8>)
 800bdc2:	482b      	ldr	r0, [pc, #172]	; (800be70 <__lshift+0xdc>)
 800bdc4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bdc8:	f000 fbb8 	bl	800c53c <__assert_func>
 800bdcc:	3101      	adds	r1, #1
 800bdce:	005b      	lsls	r3, r3, #1
 800bdd0:	e7ee      	b.n	800bdb0 <__lshift+0x1c>
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	f100 0114 	add.w	r1, r0, #20
 800bdd8:	f100 0210 	add.w	r2, r0, #16
 800bddc:	4618      	mov	r0, r3
 800bdde:	4553      	cmp	r3, sl
 800bde0:	db37      	blt.n	800be52 <__lshift+0xbe>
 800bde2:	6920      	ldr	r0, [r4, #16]
 800bde4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bde8:	f104 0314 	add.w	r3, r4, #20
 800bdec:	f019 091f 	ands.w	r9, r9, #31
 800bdf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bdf4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bdf8:	d02f      	beq.n	800be5a <__lshift+0xc6>
 800bdfa:	f1c9 0e20 	rsb	lr, r9, #32
 800bdfe:	468a      	mov	sl, r1
 800be00:	f04f 0c00 	mov.w	ip, #0
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	fa02 f209 	lsl.w	r2, r2, r9
 800be0a:	ea42 020c 	orr.w	r2, r2, ip
 800be0e:	f84a 2b04 	str.w	r2, [sl], #4
 800be12:	f853 2b04 	ldr.w	r2, [r3], #4
 800be16:	4298      	cmp	r0, r3
 800be18:	fa22 fc0e 	lsr.w	ip, r2, lr
 800be1c:	d8f2      	bhi.n	800be04 <__lshift+0x70>
 800be1e:	1b03      	subs	r3, r0, r4
 800be20:	3b15      	subs	r3, #21
 800be22:	f023 0303 	bic.w	r3, r3, #3
 800be26:	3304      	adds	r3, #4
 800be28:	f104 0215 	add.w	r2, r4, #21
 800be2c:	4290      	cmp	r0, r2
 800be2e:	bf38      	it	cc
 800be30:	2304      	movcc	r3, #4
 800be32:	f841 c003 	str.w	ip, [r1, r3]
 800be36:	f1bc 0f00 	cmp.w	ip, #0
 800be3a:	d001      	beq.n	800be40 <__lshift+0xac>
 800be3c:	f108 0602 	add.w	r6, r8, #2
 800be40:	3e01      	subs	r6, #1
 800be42:	4638      	mov	r0, r7
 800be44:	612e      	str	r6, [r5, #16]
 800be46:	4621      	mov	r1, r4
 800be48:	f7ff fdd2 	bl	800b9f0 <_Bfree>
 800be4c:	4628      	mov	r0, r5
 800be4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be52:	f842 0f04 	str.w	r0, [r2, #4]!
 800be56:	3301      	adds	r3, #1
 800be58:	e7c1      	b.n	800bdde <__lshift+0x4a>
 800be5a:	3904      	subs	r1, #4
 800be5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800be60:	f841 2f04 	str.w	r2, [r1, #4]!
 800be64:	4298      	cmp	r0, r3
 800be66:	d8f9      	bhi.n	800be5c <__lshift+0xc8>
 800be68:	e7ea      	b.n	800be40 <__lshift+0xac>
 800be6a:	bf00      	nop
 800be6c:	0800d227 	.word	0x0800d227
 800be70:	0800d238 	.word	0x0800d238

0800be74 <__mcmp>:
 800be74:	b530      	push	{r4, r5, lr}
 800be76:	6902      	ldr	r2, [r0, #16]
 800be78:	690c      	ldr	r4, [r1, #16]
 800be7a:	1b12      	subs	r2, r2, r4
 800be7c:	d10e      	bne.n	800be9c <__mcmp+0x28>
 800be7e:	f100 0314 	add.w	r3, r0, #20
 800be82:	3114      	adds	r1, #20
 800be84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800be88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800be8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800be90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800be94:	42a5      	cmp	r5, r4
 800be96:	d003      	beq.n	800bea0 <__mcmp+0x2c>
 800be98:	d305      	bcc.n	800bea6 <__mcmp+0x32>
 800be9a:	2201      	movs	r2, #1
 800be9c:	4610      	mov	r0, r2
 800be9e:	bd30      	pop	{r4, r5, pc}
 800bea0:	4283      	cmp	r3, r0
 800bea2:	d3f3      	bcc.n	800be8c <__mcmp+0x18>
 800bea4:	e7fa      	b.n	800be9c <__mcmp+0x28>
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beaa:	e7f7      	b.n	800be9c <__mcmp+0x28>

0800beac <__mdiff>:
 800beac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb0:	460c      	mov	r4, r1
 800beb2:	4606      	mov	r6, r0
 800beb4:	4611      	mov	r1, r2
 800beb6:	4620      	mov	r0, r4
 800beb8:	4690      	mov	r8, r2
 800beba:	f7ff ffdb 	bl	800be74 <__mcmp>
 800bebe:	1e05      	subs	r5, r0, #0
 800bec0:	d110      	bne.n	800bee4 <__mdiff+0x38>
 800bec2:	4629      	mov	r1, r5
 800bec4:	4630      	mov	r0, r6
 800bec6:	f7ff fd53 	bl	800b970 <_Balloc>
 800beca:	b930      	cbnz	r0, 800beda <__mdiff+0x2e>
 800becc:	4b3a      	ldr	r3, [pc, #232]	; (800bfb8 <__mdiff+0x10c>)
 800bece:	4602      	mov	r2, r0
 800bed0:	f240 2132 	movw	r1, #562	; 0x232
 800bed4:	4839      	ldr	r0, [pc, #228]	; (800bfbc <__mdiff+0x110>)
 800bed6:	f000 fb31 	bl	800c53c <__assert_func>
 800beda:	2301      	movs	r3, #1
 800bedc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee4:	bfa4      	itt	ge
 800bee6:	4643      	movge	r3, r8
 800bee8:	46a0      	movge	r8, r4
 800beea:	4630      	mov	r0, r6
 800beec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bef0:	bfa6      	itte	ge
 800bef2:	461c      	movge	r4, r3
 800bef4:	2500      	movge	r5, #0
 800bef6:	2501      	movlt	r5, #1
 800bef8:	f7ff fd3a 	bl	800b970 <_Balloc>
 800befc:	b920      	cbnz	r0, 800bf08 <__mdiff+0x5c>
 800befe:	4b2e      	ldr	r3, [pc, #184]	; (800bfb8 <__mdiff+0x10c>)
 800bf00:	4602      	mov	r2, r0
 800bf02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf06:	e7e5      	b.n	800bed4 <__mdiff+0x28>
 800bf08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bf0c:	6926      	ldr	r6, [r4, #16]
 800bf0e:	60c5      	str	r5, [r0, #12]
 800bf10:	f104 0914 	add.w	r9, r4, #20
 800bf14:	f108 0514 	add.w	r5, r8, #20
 800bf18:	f100 0e14 	add.w	lr, r0, #20
 800bf1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bf20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bf24:	f108 0210 	add.w	r2, r8, #16
 800bf28:	46f2      	mov	sl, lr
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf34:	fa1f f883 	uxth.w	r8, r3
 800bf38:	fa11 f18b 	uxtah	r1, r1, fp
 800bf3c:	0c1b      	lsrs	r3, r3, #16
 800bf3e:	eba1 0808 	sub.w	r8, r1, r8
 800bf42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf4a:	fa1f f888 	uxth.w	r8, r8
 800bf4e:	1419      	asrs	r1, r3, #16
 800bf50:	454e      	cmp	r6, r9
 800bf52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf56:	f84a 3b04 	str.w	r3, [sl], #4
 800bf5a:	d8e7      	bhi.n	800bf2c <__mdiff+0x80>
 800bf5c:	1b33      	subs	r3, r6, r4
 800bf5e:	3b15      	subs	r3, #21
 800bf60:	f023 0303 	bic.w	r3, r3, #3
 800bf64:	3304      	adds	r3, #4
 800bf66:	3415      	adds	r4, #21
 800bf68:	42a6      	cmp	r6, r4
 800bf6a:	bf38      	it	cc
 800bf6c:	2304      	movcc	r3, #4
 800bf6e:	441d      	add	r5, r3
 800bf70:	4473      	add	r3, lr
 800bf72:	469e      	mov	lr, r3
 800bf74:	462e      	mov	r6, r5
 800bf76:	4566      	cmp	r6, ip
 800bf78:	d30e      	bcc.n	800bf98 <__mdiff+0xec>
 800bf7a:	f10c 0203 	add.w	r2, ip, #3
 800bf7e:	1b52      	subs	r2, r2, r5
 800bf80:	f022 0203 	bic.w	r2, r2, #3
 800bf84:	3d03      	subs	r5, #3
 800bf86:	45ac      	cmp	ip, r5
 800bf88:	bf38      	it	cc
 800bf8a:	2200      	movcc	r2, #0
 800bf8c:	441a      	add	r2, r3
 800bf8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bf92:	b17b      	cbz	r3, 800bfb4 <__mdiff+0x108>
 800bf94:	6107      	str	r7, [r0, #16]
 800bf96:	e7a3      	b.n	800bee0 <__mdiff+0x34>
 800bf98:	f856 8b04 	ldr.w	r8, [r6], #4
 800bf9c:	fa11 f288 	uxtah	r2, r1, r8
 800bfa0:	1414      	asrs	r4, r2, #16
 800bfa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bfa6:	b292      	uxth	r2, r2
 800bfa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bfac:	f84e 2b04 	str.w	r2, [lr], #4
 800bfb0:	1421      	asrs	r1, r4, #16
 800bfb2:	e7e0      	b.n	800bf76 <__mdiff+0xca>
 800bfb4:	3f01      	subs	r7, #1
 800bfb6:	e7ea      	b.n	800bf8e <__mdiff+0xe2>
 800bfb8:	0800d227 	.word	0x0800d227
 800bfbc:	0800d238 	.word	0x0800d238

0800bfc0 <__d2b>:
 800bfc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfc4:	4689      	mov	r9, r1
 800bfc6:	2101      	movs	r1, #1
 800bfc8:	ec57 6b10 	vmov	r6, r7, d0
 800bfcc:	4690      	mov	r8, r2
 800bfce:	f7ff fccf 	bl	800b970 <_Balloc>
 800bfd2:	4604      	mov	r4, r0
 800bfd4:	b930      	cbnz	r0, 800bfe4 <__d2b+0x24>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	4b25      	ldr	r3, [pc, #148]	; (800c070 <__d2b+0xb0>)
 800bfda:	4826      	ldr	r0, [pc, #152]	; (800c074 <__d2b+0xb4>)
 800bfdc:	f240 310a 	movw	r1, #778	; 0x30a
 800bfe0:	f000 faac 	bl	800c53c <__assert_func>
 800bfe4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bfe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bfec:	bb35      	cbnz	r5, 800c03c <__d2b+0x7c>
 800bfee:	2e00      	cmp	r6, #0
 800bff0:	9301      	str	r3, [sp, #4]
 800bff2:	d028      	beq.n	800c046 <__d2b+0x86>
 800bff4:	4668      	mov	r0, sp
 800bff6:	9600      	str	r6, [sp, #0]
 800bff8:	f7ff fd82 	bl	800bb00 <__lo0bits>
 800bffc:	9900      	ldr	r1, [sp, #0]
 800bffe:	b300      	cbz	r0, 800c042 <__d2b+0x82>
 800c000:	9a01      	ldr	r2, [sp, #4]
 800c002:	f1c0 0320 	rsb	r3, r0, #32
 800c006:	fa02 f303 	lsl.w	r3, r2, r3
 800c00a:	430b      	orrs	r3, r1
 800c00c:	40c2      	lsrs	r2, r0
 800c00e:	6163      	str	r3, [r4, #20]
 800c010:	9201      	str	r2, [sp, #4]
 800c012:	9b01      	ldr	r3, [sp, #4]
 800c014:	61a3      	str	r3, [r4, #24]
 800c016:	2b00      	cmp	r3, #0
 800c018:	bf14      	ite	ne
 800c01a:	2202      	movne	r2, #2
 800c01c:	2201      	moveq	r2, #1
 800c01e:	6122      	str	r2, [r4, #16]
 800c020:	b1d5      	cbz	r5, 800c058 <__d2b+0x98>
 800c022:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c026:	4405      	add	r5, r0
 800c028:	f8c9 5000 	str.w	r5, [r9]
 800c02c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c030:	f8c8 0000 	str.w	r0, [r8]
 800c034:	4620      	mov	r0, r4
 800c036:	b003      	add	sp, #12
 800c038:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c03c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c040:	e7d5      	b.n	800bfee <__d2b+0x2e>
 800c042:	6161      	str	r1, [r4, #20]
 800c044:	e7e5      	b.n	800c012 <__d2b+0x52>
 800c046:	a801      	add	r0, sp, #4
 800c048:	f7ff fd5a 	bl	800bb00 <__lo0bits>
 800c04c:	9b01      	ldr	r3, [sp, #4]
 800c04e:	6163      	str	r3, [r4, #20]
 800c050:	2201      	movs	r2, #1
 800c052:	6122      	str	r2, [r4, #16]
 800c054:	3020      	adds	r0, #32
 800c056:	e7e3      	b.n	800c020 <__d2b+0x60>
 800c058:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c05c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c060:	f8c9 0000 	str.w	r0, [r9]
 800c064:	6918      	ldr	r0, [r3, #16]
 800c066:	f7ff fd2b 	bl	800bac0 <__hi0bits>
 800c06a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c06e:	e7df      	b.n	800c030 <__d2b+0x70>
 800c070:	0800d227 	.word	0x0800d227
 800c074:	0800d238 	.word	0x0800d238

0800c078 <_calloc_r>:
 800c078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c07a:	fba1 2402 	umull	r2, r4, r1, r2
 800c07e:	b94c      	cbnz	r4, 800c094 <_calloc_r+0x1c>
 800c080:	4611      	mov	r1, r2
 800c082:	9201      	str	r2, [sp, #4]
 800c084:	f000 f87a 	bl	800c17c <_malloc_r>
 800c088:	9a01      	ldr	r2, [sp, #4]
 800c08a:	4605      	mov	r5, r0
 800c08c:	b930      	cbnz	r0, 800c09c <_calloc_r+0x24>
 800c08e:	4628      	mov	r0, r5
 800c090:	b003      	add	sp, #12
 800c092:	bd30      	pop	{r4, r5, pc}
 800c094:	220c      	movs	r2, #12
 800c096:	6002      	str	r2, [r0, #0]
 800c098:	2500      	movs	r5, #0
 800c09a:	e7f8      	b.n	800c08e <_calloc_r+0x16>
 800c09c:	4621      	mov	r1, r4
 800c09e:	f7fe f9e5 	bl	800a46c <memset>
 800c0a2:	e7f4      	b.n	800c08e <_calloc_r+0x16>

0800c0a4 <_free_r>:
 800c0a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	d044      	beq.n	800c134 <_free_r+0x90>
 800c0aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ae:	9001      	str	r0, [sp, #4]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	f1a1 0404 	sub.w	r4, r1, #4
 800c0b6:	bfb8      	it	lt
 800c0b8:	18e4      	addlt	r4, r4, r3
 800c0ba:	f000 fa9b 	bl	800c5f4 <__malloc_lock>
 800c0be:	4a1e      	ldr	r2, [pc, #120]	; (800c138 <_free_r+0x94>)
 800c0c0:	9801      	ldr	r0, [sp, #4]
 800c0c2:	6813      	ldr	r3, [r2, #0]
 800c0c4:	b933      	cbnz	r3, 800c0d4 <_free_r+0x30>
 800c0c6:	6063      	str	r3, [r4, #4]
 800c0c8:	6014      	str	r4, [r2, #0]
 800c0ca:	b003      	add	sp, #12
 800c0cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0d0:	f000 ba96 	b.w	800c600 <__malloc_unlock>
 800c0d4:	42a3      	cmp	r3, r4
 800c0d6:	d908      	bls.n	800c0ea <_free_r+0x46>
 800c0d8:	6825      	ldr	r5, [r4, #0]
 800c0da:	1961      	adds	r1, r4, r5
 800c0dc:	428b      	cmp	r3, r1
 800c0de:	bf01      	itttt	eq
 800c0e0:	6819      	ldreq	r1, [r3, #0]
 800c0e2:	685b      	ldreq	r3, [r3, #4]
 800c0e4:	1949      	addeq	r1, r1, r5
 800c0e6:	6021      	streq	r1, [r4, #0]
 800c0e8:	e7ed      	b.n	800c0c6 <_free_r+0x22>
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	b10b      	cbz	r3, 800c0f4 <_free_r+0x50>
 800c0f0:	42a3      	cmp	r3, r4
 800c0f2:	d9fa      	bls.n	800c0ea <_free_r+0x46>
 800c0f4:	6811      	ldr	r1, [r2, #0]
 800c0f6:	1855      	adds	r5, r2, r1
 800c0f8:	42a5      	cmp	r5, r4
 800c0fa:	d10b      	bne.n	800c114 <_free_r+0x70>
 800c0fc:	6824      	ldr	r4, [r4, #0]
 800c0fe:	4421      	add	r1, r4
 800c100:	1854      	adds	r4, r2, r1
 800c102:	42a3      	cmp	r3, r4
 800c104:	6011      	str	r1, [r2, #0]
 800c106:	d1e0      	bne.n	800c0ca <_free_r+0x26>
 800c108:	681c      	ldr	r4, [r3, #0]
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	6053      	str	r3, [r2, #4]
 800c10e:	4421      	add	r1, r4
 800c110:	6011      	str	r1, [r2, #0]
 800c112:	e7da      	b.n	800c0ca <_free_r+0x26>
 800c114:	d902      	bls.n	800c11c <_free_r+0x78>
 800c116:	230c      	movs	r3, #12
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	e7d6      	b.n	800c0ca <_free_r+0x26>
 800c11c:	6825      	ldr	r5, [r4, #0]
 800c11e:	1961      	adds	r1, r4, r5
 800c120:	428b      	cmp	r3, r1
 800c122:	bf04      	itt	eq
 800c124:	6819      	ldreq	r1, [r3, #0]
 800c126:	685b      	ldreq	r3, [r3, #4]
 800c128:	6063      	str	r3, [r4, #4]
 800c12a:	bf04      	itt	eq
 800c12c:	1949      	addeq	r1, r1, r5
 800c12e:	6021      	streq	r1, [r4, #0]
 800c130:	6054      	str	r4, [r2, #4]
 800c132:	e7ca      	b.n	800c0ca <_free_r+0x26>
 800c134:	b003      	add	sp, #12
 800c136:	bd30      	pop	{r4, r5, pc}
 800c138:	24000ab8 	.word	0x24000ab8

0800c13c <sbrk_aligned>:
 800c13c:	b570      	push	{r4, r5, r6, lr}
 800c13e:	4e0e      	ldr	r6, [pc, #56]	; (800c178 <sbrk_aligned+0x3c>)
 800c140:	460c      	mov	r4, r1
 800c142:	6831      	ldr	r1, [r6, #0]
 800c144:	4605      	mov	r5, r0
 800c146:	b911      	cbnz	r1, 800c14e <sbrk_aligned+0x12>
 800c148:	f000 f9e8 	bl	800c51c <_sbrk_r>
 800c14c:	6030      	str	r0, [r6, #0]
 800c14e:	4621      	mov	r1, r4
 800c150:	4628      	mov	r0, r5
 800c152:	f000 f9e3 	bl	800c51c <_sbrk_r>
 800c156:	1c43      	adds	r3, r0, #1
 800c158:	d00a      	beq.n	800c170 <sbrk_aligned+0x34>
 800c15a:	1cc4      	adds	r4, r0, #3
 800c15c:	f024 0403 	bic.w	r4, r4, #3
 800c160:	42a0      	cmp	r0, r4
 800c162:	d007      	beq.n	800c174 <sbrk_aligned+0x38>
 800c164:	1a21      	subs	r1, r4, r0
 800c166:	4628      	mov	r0, r5
 800c168:	f000 f9d8 	bl	800c51c <_sbrk_r>
 800c16c:	3001      	adds	r0, #1
 800c16e:	d101      	bne.n	800c174 <sbrk_aligned+0x38>
 800c170:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c174:	4620      	mov	r0, r4
 800c176:	bd70      	pop	{r4, r5, r6, pc}
 800c178:	24000abc 	.word	0x24000abc

0800c17c <_malloc_r>:
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c180:	1ccd      	adds	r5, r1, #3
 800c182:	f025 0503 	bic.w	r5, r5, #3
 800c186:	3508      	adds	r5, #8
 800c188:	2d0c      	cmp	r5, #12
 800c18a:	bf38      	it	cc
 800c18c:	250c      	movcc	r5, #12
 800c18e:	2d00      	cmp	r5, #0
 800c190:	4607      	mov	r7, r0
 800c192:	db01      	blt.n	800c198 <_malloc_r+0x1c>
 800c194:	42a9      	cmp	r1, r5
 800c196:	d905      	bls.n	800c1a4 <_malloc_r+0x28>
 800c198:	230c      	movs	r3, #12
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	2600      	movs	r6, #0
 800c19e:	4630      	mov	r0, r6
 800c1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a4:	4e2e      	ldr	r6, [pc, #184]	; (800c260 <_malloc_r+0xe4>)
 800c1a6:	f000 fa25 	bl	800c5f4 <__malloc_lock>
 800c1aa:	6833      	ldr	r3, [r6, #0]
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	bb34      	cbnz	r4, 800c1fe <_malloc_r+0x82>
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	4638      	mov	r0, r7
 800c1b4:	f7ff ffc2 	bl	800c13c <sbrk_aligned>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	d14d      	bne.n	800c25a <_malloc_r+0xde>
 800c1be:	6834      	ldr	r4, [r6, #0]
 800c1c0:	4626      	mov	r6, r4
 800c1c2:	2e00      	cmp	r6, #0
 800c1c4:	d140      	bne.n	800c248 <_malloc_r+0xcc>
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	eb04 0803 	add.w	r8, r4, r3
 800c1d0:	f000 f9a4 	bl	800c51c <_sbrk_r>
 800c1d4:	4580      	cmp	r8, r0
 800c1d6:	d13a      	bne.n	800c24e <_malloc_r+0xd2>
 800c1d8:	6821      	ldr	r1, [r4, #0]
 800c1da:	3503      	adds	r5, #3
 800c1dc:	1a6d      	subs	r5, r5, r1
 800c1de:	f025 0503 	bic.w	r5, r5, #3
 800c1e2:	3508      	adds	r5, #8
 800c1e4:	2d0c      	cmp	r5, #12
 800c1e6:	bf38      	it	cc
 800c1e8:	250c      	movcc	r5, #12
 800c1ea:	4629      	mov	r1, r5
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	f7ff ffa5 	bl	800c13c <sbrk_aligned>
 800c1f2:	3001      	adds	r0, #1
 800c1f4:	d02b      	beq.n	800c24e <_malloc_r+0xd2>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	442b      	add	r3, r5
 800c1fa:	6023      	str	r3, [r4, #0]
 800c1fc:	e00e      	b.n	800c21c <_malloc_r+0xa0>
 800c1fe:	6822      	ldr	r2, [r4, #0]
 800c200:	1b52      	subs	r2, r2, r5
 800c202:	d41e      	bmi.n	800c242 <_malloc_r+0xc6>
 800c204:	2a0b      	cmp	r2, #11
 800c206:	d916      	bls.n	800c236 <_malloc_r+0xba>
 800c208:	1961      	adds	r1, r4, r5
 800c20a:	42a3      	cmp	r3, r4
 800c20c:	6025      	str	r5, [r4, #0]
 800c20e:	bf18      	it	ne
 800c210:	6059      	strne	r1, [r3, #4]
 800c212:	6863      	ldr	r3, [r4, #4]
 800c214:	bf08      	it	eq
 800c216:	6031      	streq	r1, [r6, #0]
 800c218:	5162      	str	r2, [r4, r5]
 800c21a:	604b      	str	r3, [r1, #4]
 800c21c:	4638      	mov	r0, r7
 800c21e:	f104 060b 	add.w	r6, r4, #11
 800c222:	f000 f9ed 	bl	800c600 <__malloc_unlock>
 800c226:	f026 0607 	bic.w	r6, r6, #7
 800c22a:	1d23      	adds	r3, r4, #4
 800c22c:	1af2      	subs	r2, r6, r3
 800c22e:	d0b6      	beq.n	800c19e <_malloc_r+0x22>
 800c230:	1b9b      	subs	r3, r3, r6
 800c232:	50a3      	str	r3, [r4, r2]
 800c234:	e7b3      	b.n	800c19e <_malloc_r+0x22>
 800c236:	6862      	ldr	r2, [r4, #4]
 800c238:	42a3      	cmp	r3, r4
 800c23a:	bf0c      	ite	eq
 800c23c:	6032      	streq	r2, [r6, #0]
 800c23e:	605a      	strne	r2, [r3, #4]
 800c240:	e7ec      	b.n	800c21c <_malloc_r+0xa0>
 800c242:	4623      	mov	r3, r4
 800c244:	6864      	ldr	r4, [r4, #4]
 800c246:	e7b2      	b.n	800c1ae <_malloc_r+0x32>
 800c248:	4634      	mov	r4, r6
 800c24a:	6876      	ldr	r6, [r6, #4]
 800c24c:	e7b9      	b.n	800c1c2 <_malloc_r+0x46>
 800c24e:	230c      	movs	r3, #12
 800c250:	603b      	str	r3, [r7, #0]
 800c252:	4638      	mov	r0, r7
 800c254:	f000 f9d4 	bl	800c600 <__malloc_unlock>
 800c258:	e7a1      	b.n	800c19e <_malloc_r+0x22>
 800c25a:	6025      	str	r5, [r4, #0]
 800c25c:	e7de      	b.n	800c21c <_malloc_r+0xa0>
 800c25e:	bf00      	nop
 800c260:	24000ab8 	.word	0x24000ab8

0800c264 <__ssputs_r>:
 800c264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c268:	688e      	ldr	r6, [r1, #8]
 800c26a:	429e      	cmp	r6, r3
 800c26c:	4682      	mov	sl, r0
 800c26e:	460c      	mov	r4, r1
 800c270:	4690      	mov	r8, r2
 800c272:	461f      	mov	r7, r3
 800c274:	d838      	bhi.n	800c2e8 <__ssputs_r+0x84>
 800c276:	898a      	ldrh	r2, [r1, #12]
 800c278:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c27c:	d032      	beq.n	800c2e4 <__ssputs_r+0x80>
 800c27e:	6825      	ldr	r5, [r4, #0]
 800c280:	6909      	ldr	r1, [r1, #16]
 800c282:	eba5 0901 	sub.w	r9, r5, r1
 800c286:	6965      	ldr	r5, [r4, #20]
 800c288:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c28c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c290:	3301      	adds	r3, #1
 800c292:	444b      	add	r3, r9
 800c294:	106d      	asrs	r5, r5, #1
 800c296:	429d      	cmp	r5, r3
 800c298:	bf38      	it	cc
 800c29a:	461d      	movcc	r5, r3
 800c29c:	0553      	lsls	r3, r2, #21
 800c29e:	d531      	bpl.n	800c304 <__ssputs_r+0xa0>
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7ff ff6b 	bl	800c17c <_malloc_r>
 800c2a6:	4606      	mov	r6, r0
 800c2a8:	b950      	cbnz	r0, 800c2c0 <__ssputs_r+0x5c>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	f8ca 3000 	str.w	r3, [sl]
 800c2b0:	89a3      	ldrh	r3, [r4, #12]
 800c2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2c0:	6921      	ldr	r1, [r4, #16]
 800c2c2:	464a      	mov	r2, r9
 800c2c4:	f7ff fb46 	bl	800b954 <memcpy>
 800c2c8:	89a3      	ldrh	r3, [r4, #12]
 800c2ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2d2:	81a3      	strh	r3, [r4, #12]
 800c2d4:	6126      	str	r6, [r4, #16]
 800c2d6:	6165      	str	r5, [r4, #20]
 800c2d8:	444e      	add	r6, r9
 800c2da:	eba5 0509 	sub.w	r5, r5, r9
 800c2de:	6026      	str	r6, [r4, #0]
 800c2e0:	60a5      	str	r5, [r4, #8]
 800c2e2:	463e      	mov	r6, r7
 800c2e4:	42be      	cmp	r6, r7
 800c2e6:	d900      	bls.n	800c2ea <__ssputs_r+0x86>
 800c2e8:	463e      	mov	r6, r7
 800c2ea:	6820      	ldr	r0, [r4, #0]
 800c2ec:	4632      	mov	r2, r6
 800c2ee:	4641      	mov	r1, r8
 800c2f0:	f000 f966 	bl	800c5c0 <memmove>
 800c2f4:	68a3      	ldr	r3, [r4, #8]
 800c2f6:	1b9b      	subs	r3, r3, r6
 800c2f8:	60a3      	str	r3, [r4, #8]
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	4433      	add	r3, r6
 800c2fe:	6023      	str	r3, [r4, #0]
 800c300:	2000      	movs	r0, #0
 800c302:	e7db      	b.n	800c2bc <__ssputs_r+0x58>
 800c304:	462a      	mov	r2, r5
 800c306:	f000 f981 	bl	800c60c <_realloc_r>
 800c30a:	4606      	mov	r6, r0
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d1e1      	bne.n	800c2d4 <__ssputs_r+0x70>
 800c310:	6921      	ldr	r1, [r4, #16]
 800c312:	4650      	mov	r0, sl
 800c314:	f7ff fec6 	bl	800c0a4 <_free_r>
 800c318:	e7c7      	b.n	800c2aa <__ssputs_r+0x46>
	...

0800c31c <_svfiprintf_r>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	4698      	mov	r8, r3
 800c322:	898b      	ldrh	r3, [r1, #12]
 800c324:	061b      	lsls	r3, r3, #24
 800c326:	b09d      	sub	sp, #116	; 0x74
 800c328:	4607      	mov	r7, r0
 800c32a:	460d      	mov	r5, r1
 800c32c:	4614      	mov	r4, r2
 800c32e:	d50e      	bpl.n	800c34e <_svfiprintf_r+0x32>
 800c330:	690b      	ldr	r3, [r1, #16]
 800c332:	b963      	cbnz	r3, 800c34e <_svfiprintf_r+0x32>
 800c334:	2140      	movs	r1, #64	; 0x40
 800c336:	f7ff ff21 	bl	800c17c <_malloc_r>
 800c33a:	6028      	str	r0, [r5, #0]
 800c33c:	6128      	str	r0, [r5, #16]
 800c33e:	b920      	cbnz	r0, 800c34a <_svfiprintf_r+0x2e>
 800c340:	230c      	movs	r3, #12
 800c342:	603b      	str	r3, [r7, #0]
 800c344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c348:	e0d1      	b.n	800c4ee <_svfiprintf_r+0x1d2>
 800c34a:	2340      	movs	r3, #64	; 0x40
 800c34c:	616b      	str	r3, [r5, #20]
 800c34e:	2300      	movs	r3, #0
 800c350:	9309      	str	r3, [sp, #36]	; 0x24
 800c352:	2320      	movs	r3, #32
 800c354:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c358:	f8cd 800c 	str.w	r8, [sp, #12]
 800c35c:	2330      	movs	r3, #48	; 0x30
 800c35e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c508 <_svfiprintf_r+0x1ec>
 800c362:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c366:	f04f 0901 	mov.w	r9, #1
 800c36a:	4623      	mov	r3, r4
 800c36c:	469a      	mov	sl, r3
 800c36e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c372:	b10a      	cbz	r2, 800c378 <_svfiprintf_r+0x5c>
 800c374:	2a25      	cmp	r2, #37	; 0x25
 800c376:	d1f9      	bne.n	800c36c <_svfiprintf_r+0x50>
 800c378:	ebba 0b04 	subs.w	fp, sl, r4
 800c37c:	d00b      	beq.n	800c396 <_svfiprintf_r+0x7a>
 800c37e:	465b      	mov	r3, fp
 800c380:	4622      	mov	r2, r4
 800c382:	4629      	mov	r1, r5
 800c384:	4638      	mov	r0, r7
 800c386:	f7ff ff6d 	bl	800c264 <__ssputs_r>
 800c38a:	3001      	adds	r0, #1
 800c38c:	f000 80aa 	beq.w	800c4e4 <_svfiprintf_r+0x1c8>
 800c390:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c392:	445a      	add	r2, fp
 800c394:	9209      	str	r2, [sp, #36]	; 0x24
 800c396:	f89a 3000 	ldrb.w	r3, [sl]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 80a2 	beq.w	800c4e4 <_svfiprintf_r+0x1c8>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c3a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3aa:	f10a 0a01 	add.w	sl, sl, #1
 800c3ae:	9304      	str	r3, [sp, #16]
 800c3b0:	9307      	str	r3, [sp, #28]
 800c3b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3b6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3b8:	4654      	mov	r4, sl
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3c0:	4851      	ldr	r0, [pc, #324]	; (800c508 <_svfiprintf_r+0x1ec>)
 800c3c2:	f7f3 ff95 	bl	80002f0 <memchr>
 800c3c6:	9a04      	ldr	r2, [sp, #16]
 800c3c8:	b9d8      	cbnz	r0, 800c402 <_svfiprintf_r+0xe6>
 800c3ca:	06d0      	lsls	r0, r2, #27
 800c3cc:	bf44      	itt	mi
 800c3ce:	2320      	movmi	r3, #32
 800c3d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3d4:	0711      	lsls	r1, r2, #28
 800c3d6:	bf44      	itt	mi
 800c3d8:	232b      	movmi	r3, #43	; 0x2b
 800c3da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3de:	f89a 3000 	ldrb.w	r3, [sl]
 800c3e2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3e4:	d015      	beq.n	800c412 <_svfiprintf_r+0xf6>
 800c3e6:	9a07      	ldr	r2, [sp, #28]
 800c3e8:	4654      	mov	r4, sl
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	f04f 0c0a 	mov.w	ip, #10
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3f6:	3b30      	subs	r3, #48	; 0x30
 800c3f8:	2b09      	cmp	r3, #9
 800c3fa:	d94e      	bls.n	800c49a <_svfiprintf_r+0x17e>
 800c3fc:	b1b0      	cbz	r0, 800c42c <_svfiprintf_r+0x110>
 800c3fe:	9207      	str	r2, [sp, #28]
 800c400:	e014      	b.n	800c42c <_svfiprintf_r+0x110>
 800c402:	eba0 0308 	sub.w	r3, r0, r8
 800c406:	fa09 f303 	lsl.w	r3, r9, r3
 800c40a:	4313      	orrs	r3, r2
 800c40c:	9304      	str	r3, [sp, #16]
 800c40e:	46a2      	mov	sl, r4
 800c410:	e7d2      	b.n	800c3b8 <_svfiprintf_r+0x9c>
 800c412:	9b03      	ldr	r3, [sp, #12]
 800c414:	1d19      	adds	r1, r3, #4
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	9103      	str	r1, [sp, #12]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	bfbb      	ittet	lt
 800c41e:	425b      	neglt	r3, r3
 800c420:	f042 0202 	orrlt.w	r2, r2, #2
 800c424:	9307      	strge	r3, [sp, #28]
 800c426:	9307      	strlt	r3, [sp, #28]
 800c428:	bfb8      	it	lt
 800c42a:	9204      	strlt	r2, [sp, #16]
 800c42c:	7823      	ldrb	r3, [r4, #0]
 800c42e:	2b2e      	cmp	r3, #46	; 0x2e
 800c430:	d10c      	bne.n	800c44c <_svfiprintf_r+0x130>
 800c432:	7863      	ldrb	r3, [r4, #1]
 800c434:	2b2a      	cmp	r3, #42	; 0x2a
 800c436:	d135      	bne.n	800c4a4 <_svfiprintf_r+0x188>
 800c438:	9b03      	ldr	r3, [sp, #12]
 800c43a:	1d1a      	adds	r2, r3, #4
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	9203      	str	r2, [sp, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	bfb8      	it	lt
 800c444:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c448:	3402      	adds	r4, #2
 800c44a:	9305      	str	r3, [sp, #20]
 800c44c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c518 <_svfiprintf_r+0x1fc>
 800c450:	7821      	ldrb	r1, [r4, #0]
 800c452:	2203      	movs	r2, #3
 800c454:	4650      	mov	r0, sl
 800c456:	f7f3 ff4b 	bl	80002f0 <memchr>
 800c45a:	b140      	cbz	r0, 800c46e <_svfiprintf_r+0x152>
 800c45c:	2340      	movs	r3, #64	; 0x40
 800c45e:	eba0 000a 	sub.w	r0, r0, sl
 800c462:	fa03 f000 	lsl.w	r0, r3, r0
 800c466:	9b04      	ldr	r3, [sp, #16]
 800c468:	4303      	orrs	r3, r0
 800c46a:	3401      	adds	r4, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c472:	4826      	ldr	r0, [pc, #152]	; (800c50c <_svfiprintf_r+0x1f0>)
 800c474:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c478:	2206      	movs	r2, #6
 800c47a:	f7f3 ff39 	bl	80002f0 <memchr>
 800c47e:	2800      	cmp	r0, #0
 800c480:	d038      	beq.n	800c4f4 <_svfiprintf_r+0x1d8>
 800c482:	4b23      	ldr	r3, [pc, #140]	; (800c510 <_svfiprintf_r+0x1f4>)
 800c484:	bb1b      	cbnz	r3, 800c4ce <_svfiprintf_r+0x1b2>
 800c486:	9b03      	ldr	r3, [sp, #12]
 800c488:	3307      	adds	r3, #7
 800c48a:	f023 0307 	bic.w	r3, r3, #7
 800c48e:	3308      	adds	r3, #8
 800c490:	9303      	str	r3, [sp, #12]
 800c492:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c494:	4433      	add	r3, r6
 800c496:	9309      	str	r3, [sp, #36]	; 0x24
 800c498:	e767      	b.n	800c36a <_svfiprintf_r+0x4e>
 800c49a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c49e:	460c      	mov	r4, r1
 800c4a0:	2001      	movs	r0, #1
 800c4a2:	e7a5      	b.n	800c3f0 <_svfiprintf_r+0xd4>
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	3401      	adds	r4, #1
 800c4a8:	9305      	str	r3, [sp, #20]
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f04f 0c0a 	mov.w	ip, #10
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4b6:	3a30      	subs	r2, #48	; 0x30
 800c4b8:	2a09      	cmp	r2, #9
 800c4ba:	d903      	bls.n	800c4c4 <_svfiprintf_r+0x1a8>
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0c5      	beq.n	800c44c <_svfiprintf_r+0x130>
 800c4c0:	9105      	str	r1, [sp, #20]
 800c4c2:	e7c3      	b.n	800c44c <_svfiprintf_r+0x130>
 800c4c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e7f0      	b.n	800c4b0 <_svfiprintf_r+0x194>
 800c4ce:	ab03      	add	r3, sp, #12
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	462a      	mov	r2, r5
 800c4d4:	4b0f      	ldr	r3, [pc, #60]	; (800c514 <_svfiprintf_r+0x1f8>)
 800c4d6:	a904      	add	r1, sp, #16
 800c4d8:	4638      	mov	r0, r7
 800c4da:	f7fe f861 	bl	800a5a0 <_printf_float>
 800c4de:	1c42      	adds	r2, r0, #1
 800c4e0:	4606      	mov	r6, r0
 800c4e2:	d1d6      	bne.n	800c492 <_svfiprintf_r+0x176>
 800c4e4:	89ab      	ldrh	r3, [r5, #12]
 800c4e6:	065b      	lsls	r3, r3, #25
 800c4e8:	f53f af2c 	bmi.w	800c344 <_svfiprintf_r+0x28>
 800c4ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4ee:	b01d      	add	sp, #116	; 0x74
 800c4f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f4:	ab03      	add	r3, sp, #12
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	462a      	mov	r2, r5
 800c4fa:	4b06      	ldr	r3, [pc, #24]	; (800c514 <_svfiprintf_r+0x1f8>)
 800c4fc:	a904      	add	r1, sp, #16
 800c4fe:	4638      	mov	r0, r7
 800c500:	f7fe fada 	bl	800aab8 <_printf_i>
 800c504:	e7eb      	b.n	800c4de <_svfiprintf_r+0x1c2>
 800c506:	bf00      	nop
 800c508:	0800d394 	.word	0x0800d394
 800c50c:	0800d39e 	.word	0x0800d39e
 800c510:	0800a5a1 	.word	0x0800a5a1
 800c514:	0800c265 	.word	0x0800c265
 800c518:	0800d39a 	.word	0x0800d39a

0800c51c <_sbrk_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d06      	ldr	r5, [pc, #24]	; (800c538 <_sbrk_r+0x1c>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	f7f4 ff80 	bl	800142c <_sbrk>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_sbrk_r+0x1a>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_sbrk_r+0x1a>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	24000ac0 	.word	0x24000ac0

0800c53c <__assert_func>:
 800c53c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c53e:	4614      	mov	r4, r2
 800c540:	461a      	mov	r2, r3
 800c542:	4b09      	ldr	r3, [pc, #36]	; (800c568 <__assert_func+0x2c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4605      	mov	r5, r0
 800c548:	68d8      	ldr	r0, [r3, #12]
 800c54a:	b14c      	cbz	r4, 800c560 <__assert_func+0x24>
 800c54c:	4b07      	ldr	r3, [pc, #28]	; (800c56c <__assert_func+0x30>)
 800c54e:	9100      	str	r1, [sp, #0]
 800c550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c554:	4906      	ldr	r1, [pc, #24]	; (800c570 <__assert_func+0x34>)
 800c556:	462b      	mov	r3, r5
 800c558:	f000 f80e 	bl	800c578 <fiprintf>
 800c55c:	f000 faac 	bl	800cab8 <abort>
 800c560:	4b04      	ldr	r3, [pc, #16]	; (800c574 <__assert_func+0x38>)
 800c562:	461c      	mov	r4, r3
 800c564:	e7f3      	b.n	800c54e <__assert_func+0x12>
 800c566:	bf00      	nop
 800c568:	24000010 	.word	0x24000010
 800c56c:	0800d3a5 	.word	0x0800d3a5
 800c570:	0800d3b2 	.word	0x0800d3b2
 800c574:	0800d3e0 	.word	0x0800d3e0

0800c578 <fiprintf>:
 800c578:	b40e      	push	{r1, r2, r3}
 800c57a:	b503      	push	{r0, r1, lr}
 800c57c:	4601      	mov	r1, r0
 800c57e:	ab03      	add	r3, sp, #12
 800c580:	4805      	ldr	r0, [pc, #20]	; (800c598 <fiprintf+0x20>)
 800c582:	f853 2b04 	ldr.w	r2, [r3], #4
 800c586:	6800      	ldr	r0, [r0, #0]
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	f000 f897 	bl	800c6bc <_vfiprintf_r>
 800c58e:	b002      	add	sp, #8
 800c590:	f85d eb04 	ldr.w	lr, [sp], #4
 800c594:	b003      	add	sp, #12
 800c596:	4770      	bx	lr
 800c598:	24000010 	.word	0x24000010

0800c59c <__ascii_mbtowc>:
 800c59c:	b082      	sub	sp, #8
 800c59e:	b901      	cbnz	r1, 800c5a2 <__ascii_mbtowc+0x6>
 800c5a0:	a901      	add	r1, sp, #4
 800c5a2:	b142      	cbz	r2, 800c5b6 <__ascii_mbtowc+0x1a>
 800c5a4:	b14b      	cbz	r3, 800c5ba <__ascii_mbtowc+0x1e>
 800c5a6:	7813      	ldrb	r3, [r2, #0]
 800c5a8:	600b      	str	r3, [r1, #0]
 800c5aa:	7812      	ldrb	r2, [r2, #0]
 800c5ac:	1e10      	subs	r0, r2, #0
 800c5ae:	bf18      	it	ne
 800c5b0:	2001      	movne	r0, #1
 800c5b2:	b002      	add	sp, #8
 800c5b4:	4770      	bx	lr
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	e7fb      	b.n	800c5b2 <__ascii_mbtowc+0x16>
 800c5ba:	f06f 0001 	mvn.w	r0, #1
 800c5be:	e7f8      	b.n	800c5b2 <__ascii_mbtowc+0x16>

0800c5c0 <memmove>:
 800c5c0:	4288      	cmp	r0, r1
 800c5c2:	b510      	push	{r4, lr}
 800c5c4:	eb01 0402 	add.w	r4, r1, r2
 800c5c8:	d902      	bls.n	800c5d0 <memmove+0x10>
 800c5ca:	4284      	cmp	r4, r0
 800c5cc:	4623      	mov	r3, r4
 800c5ce:	d807      	bhi.n	800c5e0 <memmove+0x20>
 800c5d0:	1e43      	subs	r3, r0, #1
 800c5d2:	42a1      	cmp	r1, r4
 800c5d4:	d008      	beq.n	800c5e8 <memmove+0x28>
 800c5d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5de:	e7f8      	b.n	800c5d2 <memmove+0x12>
 800c5e0:	4402      	add	r2, r0
 800c5e2:	4601      	mov	r1, r0
 800c5e4:	428a      	cmp	r2, r1
 800c5e6:	d100      	bne.n	800c5ea <memmove+0x2a>
 800c5e8:	bd10      	pop	{r4, pc}
 800c5ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5f2:	e7f7      	b.n	800c5e4 <memmove+0x24>

0800c5f4 <__malloc_lock>:
 800c5f4:	4801      	ldr	r0, [pc, #4]	; (800c5fc <__malloc_lock+0x8>)
 800c5f6:	f000 bc1f 	b.w	800ce38 <__retarget_lock_acquire_recursive>
 800c5fa:	bf00      	nop
 800c5fc:	24000ac4 	.word	0x24000ac4

0800c600 <__malloc_unlock>:
 800c600:	4801      	ldr	r0, [pc, #4]	; (800c608 <__malloc_unlock+0x8>)
 800c602:	f000 bc1a 	b.w	800ce3a <__retarget_lock_release_recursive>
 800c606:	bf00      	nop
 800c608:	24000ac4 	.word	0x24000ac4

0800c60c <_realloc_r>:
 800c60c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c610:	4680      	mov	r8, r0
 800c612:	4614      	mov	r4, r2
 800c614:	460e      	mov	r6, r1
 800c616:	b921      	cbnz	r1, 800c622 <_realloc_r+0x16>
 800c618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c61c:	4611      	mov	r1, r2
 800c61e:	f7ff bdad 	b.w	800c17c <_malloc_r>
 800c622:	b92a      	cbnz	r2, 800c630 <_realloc_r+0x24>
 800c624:	f7ff fd3e 	bl	800c0a4 <_free_r>
 800c628:	4625      	mov	r5, r4
 800c62a:	4628      	mov	r0, r5
 800c62c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c630:	f000 fc6a 	bl	800cf08 <_malloc_usable_size_r>
 800c634:	4284      	cmp	r4, r0
 800c636:	4607      	mov	r7, r0
 800c638:	d802      	bhi.n	800c640 <_realloc_r+0x34>
 800c63a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c63e:	d812      	bhi.n	800c666 <_realloc_r+0x5a>
 800c640:	4621      	mov	r1, r4
 800c642:	4640      	mov	r0, r8
 800c644:	f7ff fd9a 	bl	800c17c <_malloc_r>
 800c648:	4605      	mov	r5, r0
 800c64a:	2800      	cmp	r0, #0
 800c64c:	d0ed      	beq.n	800c62a <_realloc_r+0x1e>
 800c64e:	42bc      	cmp	r4, r7
 800c650:	4622      	mov	r2, r4
 800c652:	4631      	mov	r1, r6
 800c654:	bf28      	it	cs
 800c656:	463a      	movcs	r2, r7
 800c658:	f7ff f97c 	bl	800b954 <memcpy>
 800c65c:	4631      	mov	r1, r6
 800c65e:	4640      	mov	r0, r8
 800c660:	f7ff fd20 	bl	800c0a4 <_free_r>
 800c664:	e7e1      	b.n	800c62a <_realloc_r+0x1e>
 800c666:	4635      	mov	r5, r6
 800c668:	e7df      	b.n	800c62a <_realloc_r+0x1e>

0800c66a <__sfputc_r>:
 800c66a:	6893      	ldr	r3, [r2, #8]
 800c66c:	3b01      	subs	r3, #1
 800c66e:	2b00      	cmp	r3, #0
 800c670:	b410      	push	{r4}
 800c672:	6093      	str	r3, [r2, #8]
 800c674:	da08      	bge.n	800c688 <__sfputc_r+0x1e>
 800c676:	6994      	ldr	r4, [r2, #24]
 800c678:	42a3      	cmp	r3, r4
 800c67a:	db01      	blt.n	800c680 <__sfputc_r+0x16>
 800c67c:	290a      	cmp	r1, #10
 800c67e:	d103      	bne.n	800c688 <__sfputc_r+0x1e>
 800c680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c684:	f000 b94a 	b.w	800c91c <__swbuf_r>
 800c688:	6813      	ldr	r3, [r2, #0]
 800c68a:	1c58      	adds	r0, r3, #1
 800c68c:	6010      	str	r0, [r2, #0]
 800c68e:	7019      	strb	r1, [r3, #0]
 800c690:	4608      	mov	r0, r1
 800c692:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <__sfputs_r>:
 800c698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c69a:	4606      	mov	r6, r0
 800c69c:	460f      	mov	r7, r1
 800c69e:	4614      	mov	r4, r2
 800c6a0:	18d5      	adds	r5, r2, r3
 800c6a2:	42ac      	cmp	r4, r5
 800c6a4:	d101      	bne.n	800c6aa <__sfputs_r+0x12>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e007      	b.n	800c6ba <__sfputs_r+0x22>
 800c6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ae:	463a      	mov	r2, r7
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	f7ff ffda 	bl	800c66a <__sfputc_r>
 800c6b6:	1c43      	adds	r3, r0, #1
 800c6b8:	d1f3      	bne.n	800c6a2 <__sfputs_r+0xa>
 800c6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c6bc <_vfiprintf_r>:
 800c6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	b09d      	sub	sp, #116	; 0x74
 800c6c4:	4614      	mov	r4, r2
 800c6c6:	4698      	mov	r8, r3
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	b118      	cbz	r0, 800c6d4 <_vfiprintf_r+0x18>
 800c6cc:	6983      	ldr	r3, [r0, #24]
 800c6ce:	b90b      	cbnz	r3, 800c6d4 <_vfiprintf_r+0x18>
 800c6d0:	f000 fb14 	bl	800ccfc <__sinit>
 800c6d4:	4b89      	ldr	r3, [pc, #548]	; (800c8fc <_vfiprintf_r+0x240>)
 800c6d6:	429d      	cmp	r5, r3
 800c6d8:	d11b      	bne.n	800c712 <_vfiprintf_r+0x56>
 800c6da:	6875      	ldr	r5, [r6, #4]
 800c6dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6de:	07d9      	lsls	r1, r3, #31
 800c6e0:	d405      	bmi.n	800c6ee <_vfiprintf_r+0x32>
 800c6e2:	89ab      	ldrh	r3, [r5, #12]
 800c6e4:	059a      	lsls	r2, r3, #22
 800c6e6:	d402      	bmi.n	800c6ee <_vfiprintf_r+0x32>
 800c6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ea:	f000 fba5 	bl	800ce38 <__retarget_lock_acquire_recursive>
 800c6ee:	89ab      	ldrh	r3, [r5, #12]
 800c6f0:	071b      	lsls	r3, r3, #28
 800c6f2:	d501      	bpl.n	800c6f8 <_vfiprintf_r+0x3c>
 800c6f4:	692b      	ldr	r3, [r5, #16]
 800c6f6:	b9eb      	cbnz	r3, 800c734 <_vfiprintf_r+0x78>
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f000 f96e 	bl	800c9dc <__swsetup_r>
 800c700:	b1c0      	cbz	r0, 800c734 <_vfiprintf_r+0x78>
 800c702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c704:	07dc      	lsls	r4, r3, #31
 800c706:	d50e      	bpl.n	800c726 <_vfiprintf_r+0x6a>
 800c708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c70c:	b01d      	add	sp, #116	; 0x74
 800c70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c712:	4b7b      	ldr	r3, [pc, #492]	; (800c900 <_vfiprintf_r+0x244>)
 800c714:	429d      	cmp	r5, r3
 800c716:	d101      	bne.n	800c71c <_vfiprintf_r+0x60>
 800c718:	68b5      	ldr	r5, [r6, #8]
 800c71a:	e7df      	b.n	800c6dc <_vfiprintf_r+0x20>
 800c71c:	4b79      	ldr	r3, [pc, #484]	; (800c904 <_vfiprintf_r+0x248>)
 800c71e:	429d      	cmp	r5, r3
 800c720:	bf08      	it	eq
 800c722:	68f5      	ldreq	r5, [r6, #12]
 800c724:	e7da      	b.n	800c6dc <_vfiprintf_r+0x20>
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	0598      	lsls	r0, r3, #22
 800c72a:	d4ed      	bmi.n	800c708 <_vfiprintf_r+0x4c>
 800c72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c72e:	f000 fb84 	bl	800ce3a <__retarget_lock_release_recursive>
 800c732:	e7e9      	b.n	800c708 <_vfiprintf_r+0x4c>
 800c734:	2300      	movs	r3, #0
 800c736:	9309      	str	r3, [sp, #36]	; 0x24
 800c738:	2320      	movs	r3, #32
 800c73a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c73e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c742:	2330      	movs	r3, #48	; 0x30
 800c744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c908 <_vfiprintf_r+0x24c>
 800c748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c74c:	f04f 0901 	mov.w	r9, #1
 800c750:	4623      	mov	r3, r4
 800c752:	469a      	mov	sl, r3
 800c754:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c758:	b10a      	cbz	r2, 800c75e <_vfiprintf_r+0xa2>
 800c75a:	2a25      	cmp	r2, #37	; 0x25
 800c75c:	d1f9      	bne.n	800c752 <_vfiprintf_r+0x96>
 800c75e:	ebba 0b04 	subs.w	fp, sl, r4
 800c762:	d00b      	beq.n	800c77c <_vfiprintf_r+0xc0>
 800c764:	465b      	mov	r3, fp
 800c766:	4622      	mov	r2, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7ff ff94 	bl	800c698 <__sfputs_r>
 800c770:	3001      	adds	r0, #1
 800c772:	f000 80aa 	beq.w	800c8ca <_vfiprintf_r+0x20e>
 800c776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c778:	445a      	add	r2, fp
 800c77a:	9209      	str	r2, [sp, #36]	; 0x24
 800c77c:	f89a 3000 	ldrb.w	r3, [sl]
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 80a2 	beq.w	800c8ca <_vfiprintf_r+0x20e>
 800c786:	2300      	movs	r3, #0
 800c788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c790:	f10a 0a01 	add.w	sl, sl, #1
 800c794:	9304      	str	r3, [sp, #16]
 800c796:	9307      	str	r3, [sp, #28]
 800c798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c79c:	931a      	str	r3, [sp, #104]	; 0x68
 800c79e:	4654      	mov	r4, sl
 800c7a0:	2205      	movs	r2, #5
 800c7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a6:	4858      	ldr	r0, [pc, #352]	; (800c908 <_vfiprintf_r+0x24c>)
 800c7a8:	f7f3 fda2 	bl	80002f0 <memchr>
 800c7ac:	9a04      	ldr	r2, [sp, #16]
 800c7ae:	b9d8      	cbnz	r0, 800c7e8 <_vfiprintf_r+0x12c>
 800c7b0:	06d1      	lsls	r1, r2, #27
 800c7b2:	bf44      	itt	mi
 800c7b4:	2320      	movmi	r3, #32
 800c7b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ba:	0713      	lsls	r3, r2, #28
 800c7bc:	bf44      	itt	mi
 800c7be:	232b      	movmi	r3, #43	; 0x2b
 800c7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ca:	d015      	beq.n	800c7f8 <_vfiprintf_r+0x13c>
 800c7cc:	9a07      	ldr	r2, [sp, #28]
 800c7ce:	4654      	mov	r4, sl
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	f04f 0c0a 	mov.w	ip, #10
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7dc:	3b30      	subs	r3, #48	; 0x30
 800c7de:	2b09      	cmp	r3, #9
 800c7e0:	d94e      	bls.n	800c880 <_vfiprintf_r+0x1c4>
 800c7e2:	b1b0      	cbz	r0, 800c812 <_vfiprintf_r+0x156>
 800c7e4:	9207      	str	r2, [sp, #28]
 800c7e6:	e014      	b.n	800c812 <_vfiprintf_r+0x156>
 800c7e8:	eba0 0308 	sub.w	r3, r0, r8
 800c7ec:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	9304      	str	r3, [sp, #16]
 800c7f4:	46a2      	mov	sl, r4
 800c7f6:	e7d2      	b.n	800c79e <_vfiprintf_r+0xe2>
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	1d19      	adds	r1, r3, #4
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	9103      	str	r1, [sp, #12]
 800c800:	2b00      	cmp	r3, #0
 800c802:	bfbb      	ittet	lt
 800c804:	425b      	neglt	r3, r3
 800c806:	f042 0202 	orrlt.w	r2, r2, #2
 800c80a:	9307      	strge	r3, [sp, #28]
 800c80c:	9307      	strlt	r3, [sp, #28]
 800c80e:	bfb8      	it	lt
 800c810:	9204      	strlt	r2, [sp, #16]
 800c812:	7823      	ldrb	r3, [r4, #0]
 800c814:	2b2e      	cmp	r3, #46	; 0x2e
 800c816:	d10c      	bne.n	800c832 <_vfiprintf_r+0x176>
 800c818:	7863      	ldrb	r3, [r4, #1]
 800c81a:	2b2a      	cmp	r3, #42	; 0x2a
 800c81c:	d135      	bne.n	800c88a <_vfiprintf_r+0x1ce>
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	1d1a      	adds	r2, r3, #4
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	9203      	str	r2, [sp, #12]
 800c826:	2b00      	cmp	r3, #0
 800c828:	bfb8      	it	lt
 800c82a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c82e:	3402      	adds	r4, #2
 800c830:	9305      	str	r3, [sp, #20]
 800c832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c918 <_vfiprintf_r+0x25c>
 800c836:	7821      	ldrb	r1, [r4, #0]
 800c838:	2203      	movs	r2, #3
 800c83a:	4650      	mov	r0, sl
 800c83c:	f7f3 fd58 	bl	80002f0 <memchr>
 800c840:	b140      	cbz	r0, 800c854 <_vfiprintf_r+0x198>
 800c842:	2340      	movs	r3, #64	; 0x40
 800c844:	eba0 000a 	sub.w	r0, r0, sl
 800c848:	fa03 f000 	lsl.w	r0, r3, r0
 800c84c:	9b04      	ldr	r3, [sp, #16]
 800c84e:	4303      	orrs	r3, r0
 800c850:	3401      	adds	r4, #1
 800c852:	9304      	str	r3, [sp, #16]
 800c854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c858:	482c      	ldr	r0, [pc, #176]	; (800c90c <_vfiprintf_r+0x250>)
 800c85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c85e:	2206      	movs	r2, #6
 800c860:	f7f3 fd46 	bl	80002f0 <memchr>
 800c864:	2800      	cmp	r0, #0
 800c866:	d03f      	beq.n	800c8e8 <_vfiprintf_r+0x22c>
 800c868:	4b29      	ldr	r3, [pc, #164]	; (800c910 <_vfiprintf_r+0x254>)
 800c86a:	bb1b      	cbnz	r3, 800c8b4 <_vfiprintf_r+0x1f8>
 800c86c:	9b03      	ldr	r3, [sp, #12]
 800c86e:	3307      	adds	r3, #7
 800c870:	f023 0307 	bic.w	r3, r3, #7
 800c874:	3308      	adds	r3, #8
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c87a:	443b      	add	r3, r7
 800c87c:	9309      	str	r3, [sp, #36]	; 0x24
 800c87e:	e767      	b.n	800c750 <_vfiprintf_r+0x94>
 800c880:	fb0c 3202 	mla	r2, ip, r2, r3
 800c884:	460c      	mov	r4, r1
 800c886:	2001      	movs	r0, #1
 800c888:	e7a5      	b.n	800c7d6 <_vfiprintf_r+0x11a>
 800c88a:	2300      	movs	r3, #0
 800c88c:	3401      	adds	r4, #1
 800c88e:	9305      	str	r3, [sp, #20]
 800c890:	4619      	mov	r1, r3
 800c892:	f04f 0c0a 	mov.w	ip, #10
 800c896:	4620      	mov	r0, r4
 800c898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c89c:	3a30      	subs	r2, #48	; 0x30
 800c89e:	2a09      	cmp	r2, #9
 800c8a0:	d903      	bls.n	800c8aa <_vfiprintf_r+0x1ee>
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0c5      	beq.n	800c832 <_vfiprintf_r+0x176>
 800c8a6:	9105      	str	r1, [sp, #20]
 800c8a8:	e7c3      	b.n	800c832 <_vfiprintf_r+0x176>
 800c8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ae:	4604      	mov	r4, r0
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e7f0      	b.n	800c896 <_vfiprintf_r+0x1da>
 800c8b4:	ab03      	add	r3, sp, #12
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	462a      	mov	r2, r5
 800c8ba:	4b16      	ldr	r3, [pc, #88]	; (800c914 <_vfiprintf_r+0x258>)
 800c8bc:	a904      	add	r1, sp, #16
 800c8be:	4630      	mov	r0, r6
 800c8c0:	f7fd fe6e 	bl	800a5a0 <_printf_float>
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	1c78      	adds	r0, r7, #1
 800c8c8:	d1d6      	bne.n	800c878 <_vfiprintf_r+0x1bc>
 800c8ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8cc:	07d9      	lsls	r1, r3, #31
 800c8ce:	d405      	bmi.n	800c8dc <_vfiprintf_r+0x220>
 800c8d0:	89ab      	ldrh	r3, [r5, #12]
 800c8d2:	059a      	lsls	r2, r3, #22
 800c8d4:	d402      	bmi.n	800c8dc <_vfiprintf_r+0x220>
 800c8d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8d8:	f000 faaf 	bl	800ce3a <__retarget_lock_release_recursive>
 800c8dc:	89ab      	ldrh	r3, [r5, #12]
 800c8de:	065b      	lsls	r3, r3, #25
 800c8e0:	f53f af12 	bmi.w	800c708 <_vfiprintf_r+0x4c>
 800c8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8e6:	e711      	b.n	800c70c <_vfiprintf_r+0x50>
 800c8e8:	ab03      	add	r3, sp, #12
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	4b09      	ldr	r3, [pc, #36]	; (800c914 <_vfiprintf_r+0x258>)
 800c8f0:	a904      	add	r1, sp, #16
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	f7fe f8e0 	bl	800aab8 <_printf_i>
 800c8f8:	e7e4      	b.n	800c8c4 <_vfiprintf_r+0x208>
 800c8fa:	bf00      	nop
 800c8fc:	0800d50c 	.word	0x0800d50c
 800c900:	0800d52c 	.word	0x0800d52c
 800c904:	0800d4ec 	.word	0x0800d4ec
 800c908:	0800d394 	.word	0x0800d394
 800c90c:	0800d39e 	.word	0x0800d39e
 800c910:	0800a5a1 	.word	0x0800a5a1
 800c914:	0800c699 	.word	0x0800c699
 800c918:	0800d39a 	.word	0x0800d39a

0800c91c <__swbuf_r>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	460e      	mov	r6, r1
 800c920:	4614      	mov	r4, r2
 800c922:	4605      	mov	r5, r0
 800c924:	b118      	cbz	r0, 800c92e <__swbuf_r+0x12>
 800c926:	6983      	ldr	r3, [r0, #24]
 800c928:	b90b      	cbnz	r3, 800c92e <__swbuf_r+0x12>
 800c92a:	f000 f9e7 	bl	800ccfc <__sinit>
 800c92e:	4b21      	ldr	r3, [pc, #132]	; (800c9b4 <__swbuf_r+0x98>)
 800c930:	429c      	cmp	r4, r3
 800c932:	d12b      	bne.n	800c98c <__swbuf_r+0x70>
 800c934:	686c      	ldr	r4, [r5, #4]
 800c936:	69a3      	ldr	r3, [r4, #24]
 800c938:	60a3      	str	r3, [r4, #8]
 800c93a:	89a3      	ldrh	r3, [r4, #12]
 800c93c:	071a      	lsls	r2, r3, #28
 800c93e:	d52f      	bpl.n	800c9a0 <__swbuf_r+0x84>
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	b36b      	cbz	r3, 800c9a0 <__swbuf_r+0x84>
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	6820      	ldr	r0, [r4, #0]
 800c948:	1ac0      	subs	r0, r0, r3
 800c94a:	6963      	ldr	r3, [r4, #20]
 800c94c:	b2f6      	uxtb	r6, r6
 800c94e:	4283      	cmp	r3, r0
 800c950:	4637      	mov	r7, r6
 800c952:	dc04      	bgt.n	800c95e <__swbuf_r+0x42>
 800c954:	4621      	mov	r1, r4
 800c956:	4628      	mov	r0, r5
 800c958:	f000 f93c 	bl	800cbd4 <_fflush_r>
 800c95c:	bb30      	cbnz	r0, 800c9ac <__swbuf_r+0x90>
 800c95e:	68a3      	ldr	r3, [r4, #8]
 800c960:	3b01      	subs	r3, #1
 800c962:	60a3      	str	r3, [r4, #8]
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	6022      	str	r2, [r4, #0]
 800c96a:	701e      	strb	r6, [r3, #0]
 800c96c:	6963      	ldr	r3, [r4, #20]
 800c96e:	3001      	adds	r0, #1
 800c970:	4283      	cmp	r3, r0
 800c972:	d004      	beq.n	800c97e <__swbuf_r+0x62>
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	07db      	lsls	r3, r3, #31
 800c978:	d506      	bpl.n	800c988 <__swbuf_r+0x6c>
 800c97a:	2e0a      	cmp	r6, #10
 800c97c:	d104      	bne.n	800c988 <__swbuf_r+0x6c>
 800c97e:	4621      	mov	r1, r4
 800c980:	4628      	mov	r0, r5
 800c982:	f000 f927 	bl	800cbd4 <_fflush_r>
 800c986:	b988      	cbnz	r0, 800c9ac <__swbuf_r+0x90>
 800c988:	4638      	mov	r0, r7
 800c98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c98c:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <__swbuf_r+0x9c>)
 800c98e:	429c      	cmp	r4, r3
 800c990:	d101      	bne.n	800c996 <__swbuf_r+0x7a>
 800c992:	68ac      	ldr	r4, [r5, #8]
 800c994:	e7cf      	b.n	800c936 <__swbuf_r+0x1a>
 800c996:	4b09      	ldr	r3, [pc, #36]	; (800c9bc <__swbuf_r+0xa0>)
 800c998:	429c      	cmp	r4, r3
 800c99a:	bf08      	it	eq
 800c99c:	68ec      	ldreq	r4, [r5, #12]
 800c99e:	e7ca      	b.n	800c936 <__swbuf_r+0x1a>
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	f000 f81a 	bl	800c9dc <__swsetup_r>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	d0cb      	beq.n	800c944 <__swbuf_r+0x28>
 800c9ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c9b0:	e7ea      	b.n	800c988 <__swbuf_r+0x6c>
 800c9b2:	bf00      	nop
 800c9b4:	0800d50c 	.word	0x0800d50c
 800c9b8:	0800d52c 	.word	0x0800d52c
 800c9bc:	0800d4ec 	.word	0x0800d4ec

0800c9c0 <__ascii_wctomb>:
 800c9c0:	b149      	cbz	r1, 800c9d6 <__ascii_wctomb+0x16>
 800c9c2:	2aff      	cmp	r2, #255	; 0xff
 800c9c4:	bf85      	ittet	hi
 800c9c6:	238a      	movhi	r3, #138	; 0x8a
 800c9c8:	6003      	strhi	r3, [r0, #0]
 800c9ca:	700a      	strbls	r2, [r1, #0]
 800c9cc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c9d0:	bf98      	it	ls
 800c9d2:	2001      	movls	r0, #1
 800c9d4:	4770      	bx	lr
 800c9d6:	4608      	mov	r0, r1
 800c9d8:	4770      	bx	lr
	...

0800c9dc <__swsetup_r>:
 800c9dc:	4b32      	ldr	r3, [pc, #200]	; (800caa8 <__swsetup_r+0xcc>)
 800c9de:	b570      	push	{r4, r5, r6, lr}
 800c9e0:	681d      	ldr	r5, [r3, #0]
 800c9e2:	4606      	mov	r6, r0
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	b125      	cbz	r5, 800c9f2 <__swsetup_r+0x16>
 800c9e8:	69ab      	ldr	r3, [r5, #24]
 800c9ea:	b913      	cbnz	r3, 800c9f2 <__swsetup_r+0x16>
 800c9ec:	4628      	mov	r0, r5
 800c9ee:	f000 f985 	bl	800ccfc <__sinit>
 800c9f2:	4b2e      	ldr	r3, [pc, #184]	; (800caac <__swsetup_r+0xd0>)
 800c9f4:	429c      	cmp	r4, r3
 800c9f6:	d10f      	bne.n	800ca18 <__swsetup_r+0x3c>
 800c9f8:	686c      	ldr	r4, [r5, #4]
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca00:	0719      	lsls	r1, r3, #28
 800ca02:	d42c      	bmi.n	800ca5e <__swsetup_r+0x82>
 800ca04:	06dd      	lsls	r5, r3, #27
 800ca06:	d411      	bmi.n	800ca2c <__swsetup_r+0x50>
 800ca08:	2309      	movs	r3, #9
 800ca0a:	6033      	str	r3, [r6, #0]
 800ca0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca16:	e03e      	b.n	800ca96 <__swsetup_r+0xba>
 800ca18:	4b25      	ldr	r3, [pc, #148]	; (800cab0 <__swsetup_r+0xd4>)
 800ca1a:	429c      	cmp	r4, r3
 800ca1c:	d101      	bne.n	800ca22 <__swsetup_r+0x46>
 800ca1e:	68ac      	ldr	r4, [r5, #8]
 800ca20:	e7eb      	b.n	800c9fa <__swsetup_r+0x1e>
 800ca22:	4b24      	ldr	r3, [pc, #144]	; (800cab4 <__swsetup_r+0xd8>)
 800ca24:	429c      	cmp	r4, r3
 800ca26:	bf08      	it	eq
 800ca28:	68ec      	ldreq	r4, [r5, #12]
 800ca2a:	e7e6      	b.n	800c9fa <__swsetup_r+0x1e>
 800ca2c:	0758      	lsls	r0, r3, #29
 800ca2e:	d512      	bpl.n	800ca56 <__swsetup_r+0x7a>
 800ca30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca32:	b141      	cbz	r1, 800ca46 <__swsetup_r+0x6a>
 800ca34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca38:	4299      	cmp	r1, r3
 800ca3a:	d002      	beq.n	800ca42 <__swsetup_r+0x66>
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	f7ff fb31 	bl	800c0a4 <_free_r>
 800ca42:	2300      	movs	r3, #0
 800ca44:	6363      	str	r3, [r4, #52]	; 0x34
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca4c:	81a3      	strh	r3, [r4, #12]
 800ca4e:	2300      	movs	r3, #0
 800ca50:	6063      	str	r3, [r4, #4]
 800ca52:	6923      	ldr	r3, [r4, #16]
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	89a3      	ldrh	r3, [r4, #12]
 800ca58:	f043 0308 	orr.w	r3, r3, #8
 800ca5c:	81a3      	strh	r3, [r4, #12]
 800ca5e:	6923      	ldr	r3, [r4, #16]
 800ca60:	b94b      	cbnz	r3, 800ca76 <__swsetup_r+0x9a>
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6c:	d003      	beq.n	800ca76 <__swsetup_r+0x9a>
 800ca6e:	4621      	mov	r1, r4
 800ca70:	4630      	mov	r0, r6
 800ca72:	f000 fa09 	bl	800ce88 <__smakebuf_r>
 800ca76:	89a0      	ldrh	r0, [r4, #12]
 800ca78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca7c:	f010 0301 	ands.w	r3, r0, #1
 800ca80:	d00a      	beq.n	800ca98 <__swsetup_r+0xbc>
 800ca82:	2300      	movs	r3, #0
 800ca84:	60a3      	str	r3, [r4, #8]
 800ca86:	6963      	ldr	r3, [r4, #20]
 800ca88:	425b      	negs	r3, r3
 800ca8a:	61a3      	str	r3, [r4, #24]
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	b943      	cbnz	r3, 800caa2 <__swsetup_r+0xc6>
 800ca90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca94:	d1ba      	bne.n	800ca0c <__swsetup_r+0x30>
 800ca96:	bd70      	pop	{r4, r5, r6, pc}
 800ca98:	0781      	lsls	r1, r0, #30
 800ca9a:	bf58      	it	pl
 800ca9c:	6963      	ldrpl	r3, [r4, #20]
 800ca9e:	60a3      	str	r3, [r4, #8]
 800caa0:	e7f4      	b.n	800ca8c <__swsetup_r+0xb0>
 800caa2:	2000      	movs	r0, #0
 800caa4:	e7f7      	b.n	800ca96 <__swsetup_r+0xba>
 800caa6:	bf00      	nop
 800caa8:	24000010 	.word	0x24000010
 800caac:	0800d50c 	.word	0x0800d50c
 800cab0:	0800d52c 	.word	0x0800d52c
 800cab4:	0800d4ec 	.word	0x0800d4ec

0800cab8 <abort>:
 800cab8:	b508      	push	{r3, lr}
 800caba:	2006      	movs	r0, #6
 800cabc:	f000 fa54 	bl	800cf68 <raise>
 800cac0:	2001      	movs	r0, #1
 800cac2:	f7f4 fc3b 	bl	800133c <_exit>
	...

0800cac8 <__sflush_r>:
 800cac8:	898a      	ldrh	r2, [r1, #12]
 800caca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cace:	4605      	mov	r5, r0
 800cad0:	0710      	lsls	r0, r2, #28
 800cad2:	460c      	mov	r4, r1
 800cad4:	d458      	bmi.n	800cb88 <__sflush_r+0xc0>
 800cad6:	684b      	ldr	r3, [r1, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dc05      	bgt.n	800cae8 <__sflush_r+0x20>
 800cadc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dc02      	bgt.n	800cae8 <__sflush_r+0x20>
 800cae2:	2000      	movs	r0, #0
 800cae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caea:	2e00      	cmp	r6, #0
 800caec:	d0f9      	beq.n	800cae2 <__sflush_r+0x1a>
 800caee:	2300      	movs	r3, #0
 800caf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caf4:	682f      	ldr	r7, [r5, #0]
 800caf6:	602b      	str	r3, [r5, #0]
 800caf8:	d032      	beq.n	800cb60 <__sflush_r+0x98>
 800cafa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cafc:	89a3      	ldrh	r3, [r4, #12]
 800cafe:	075a      	lsls	r2, r3, #29
 800cb00:	d505      	bpl.n	800cb0e <__sflush_r+0x46>
 800cb02:	6863      	ldr	r3, [r4, #4]
 800cb04:	1ac0      	subs	r0, r0, r3
 800cb06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb08:	b10b      	cbz	r3, 800cb0e <__sflush_r+0x46>
 800cb0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb0c:	1ac0      	subs	r0, r0, r3
 800cb0e:	2300      	movs	r3, #0
 800cb10:	4602      	mov	r2, r0
 800cb12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb14:	6a21      	ldr	r1, [r4, #32]
 800cb16:	4628      	mov	r0, r5
 800cb18:	47b0      	blx	r6
 800cb1a:	1c43      	adds	r3, r0, #1
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	d106      	bne.n	800cb2e <__sflush_r+0x66>
 800cb20:	6829      	ldr	r1, [r5, #0]
 800cb22:	291d      	cmp	r1, #29
 800cb24:	d82c      	bhi.n	800cb80 <__sflush_r+0xb8>
 800cb26:	4a2a      	ldr	r2, [pc, #168]	; (800cbd0 <__sflush_r+0x108>)
 800cb28:	40ca      	lsrs	r2, r1
 800cb2a:	07d6      	lsls	r6, r2, #31
 800cb2c:	d528      	bpl.n	800cb80 <__sflush_r+0xb8>
 800cb2e:	2200      	movs	r2, #0
 800cb30:	6062      	str	r2, [r4, #4]
 800cb32:	04d9      	lsls	r1, r3, #19
 800cb34:	6922      	ldr	r2, [r4, #16]
 800cb36:	6022      	str	r2, [r4, #0]
 800cb38:	d504      	bpl.n	800cb44 <__sflush_r+0x7c>
 800cb3a:	1c42      	adds	r2, r0, #1
 800cb3c:	d101      	bne.n	800cb42 <__sflush_r+0x7a>
 800cb3e:	682b      	ldr	r3, [r5, #0]
 800cb40:	b903      	cbnz	r3, 800cb44 <__sflush_r+0x7c>
 800cb42:	6560      	str	r0, [r4, #84]	; 0x54
 800cb44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb46:	602f      	str	r7, [r5, #0]
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	d0ca      	beq.n	800cae2 <__sflush_r+0x1a>
 800cb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb50:	4299      	cmp	r1, r3
 800cb52:	d002      	beq.n	800cb5a <__sflush_r+0x92>
 800cb54:	4628      	mov	r0, r5
 800cb56:	f7ff faa5 	bl	800c0a4 <_free_r>
 800cb5a:	2000      	movs	r0, #0
 800cb5c:	6360      	str	r0, [r4, #52]	; 0x34
 800cb5e:	e7c1      	b.n	800cae4 <__sflush_r+0x1c>
 800cb60:	6a21      	ldr	r1, [r4, #32]
 800cb62:	2301      	movs	r3, #1
 800cb64:	4628      	mov	r0, r5
 800cb66:	47b0      	blx	r6
 800cb68:	1c41      	adds	r1, r0, #1
 800cb6a:	d1c7      	bne.n	800cafc <__sflush_r+0x34>
 800cb6c:	682b      	ldr	r3, [r5, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d0c4      	beq.n	800cafc <__sflush_r+0x34>
 800cb72:	2b1d      	cmp	r3, #29
 800cb74:	d001      	beq.n	800cb7a <__sflush_r+0xb2>
 800cb76:	2b16      	cmp	r3, #22
 800cb78:	d101      	bne.n	800cb7e <__sflush_r+0xb6>
 800cb7a:	602f      	str	r7, [r5, #0]
 800cb7c:	e7b1      	b.n	800cae2 <__sflush_r+0x1a>
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	e7ad      	b.n	800cae4 <__sflush_r+0x1c>
 800cb88:	690f      	ldr	r7, [r1, #16]
 800cb8a:	2f00      	cmp	r7, #0
 800cb8c:	d0a9      	beq.n	800cae2 <__sflush_r+0x1a>
 800cb8e:	0793      	lsls	r3, r2, #30
 800cb90:	680e      	ldr	r6, [r1, #0]
 800cb92:	bf08      	it	eq
 800cb94:	694b      	ldreq	r3, [r1, #20]
 800cb96:	600f      	str	r7, [r1, #0]
 800cb98:	bf18      	it	ne
 800cb9a:	2300      	movne	r3, #0
 800cb9c:	eba6 0807 	sub.w	r8, r6, r7
 800cba0:	608b      	str	r3, [r1, #8]
 800cba2:	f1b8 0f00 	cmp.w	r8, #0
 800cba6:	dd9c      	ble.n	800cae2 <__sflush_r+0x1a>
 800cba8:	6a21      	ldr	r1, [r4, #32]
 800cbaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbac:	4643      	mov	r3, r8
 800cbae:	463a      	mov	r2, r7
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b0      	blx	r6
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	dc06      	bgt.n	800cbc6 <__sflush_r+0xfe>
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbbe:	81a3      	strh	r3, [r4, #12]
 800cbc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbc4:	e78e      	b.n	800cae4 <__sflush_r+0x1c>
 800cbc6:	4407      	add	r7, r0
 800cbc8:	eba8 0800 	sub.w	r8, r8, r0
 800cbcc:	e7e9      	b.n	800cba2 <__sflush_r+0xda>
 800cbce:	bf00      	nop
 800cbd0:	20400001 	.word	0x20400001

0800cbd4 <_fflush_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	690b      	ldr	r3, [r1, #16]
 800cbd8:	4605      	mov	r5, r0
 800cbda:	460c      	mov	r4, r1
 800cbdc:	b913      	cbnz	r3, 800cbe4 <_fflush_r+0x10>
 800cbde:	2500      	movs	r5, #0
 800cbe0:	4628      	mov	r0, r5
 800cbe2:	bd38      	pop	{r3, r4, r5, pc}
 800cbe4:	b118      	cbz	r0, 800cbee <_fflush_r+0x1a>
 800cbe6:	6983      	ldr	r3, [r0, #24]
 800cbe8:	b90b      	cbnz	r3, 800cbee <_fflush_r+0x1a>
 800cbea:	f000 f887 	bl	800ccfc <__sinit>
 800cbee:	4b14      	ldr	r3, [pc, #80]	; (800cc40 <_fflush_r+0x6c>)
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	d11b      	bne.n	800cc2c <_fflush_r+0x58>
 800cbf4:	686c      	ldr	r4, [r5, #4]
 800cbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0ef      	beq.n	800cbde <_fflush_r+0xa>
 800cbfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc00:	07d0      	lsls	r0, r2, #31
 800cc02:	d404      	bmi.n	800cc0e <_fflush_r+0x3a>
 800cc04:	0599      	lsls	r1, r3, #22
 800cc06:	d402      	bmi.n	800cc0e <_fflush_r+0x3a>
 800cc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc0a:	f000 f915 	bl	800ce38 <__retarget_lock_acquire_recursive>
 800cc0e:	4628      	mov	r0, r5
 800cc10:	4621      	mov	r1, r4
 800cc12:	f7ff ff59 	bl	800cac8 <__sflush_r>
 800cc16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc18:	07da      	lsls	r2, r3, #31
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	d4e0      	bmi.n	800cbe0 <_fflush_r+0xc>
 800cc1e:	89a3      	ldrh	r3, [r4, #12]
 800cc20:	059b      	lsls	r3, r3, #22
 800cc22:	d4dd      	bmi.n	800cbe0 <_fflush_r+0xc>
 800cc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc26:	f000 f908 	bl	800ce3a <__retarget_lock_release_recursive>
 800cc2a:	e7d9      	b.n	800cbe0 <_fflush_r+0xc>
 800cc2c:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <_fflush_r+0x70>)
 800cc2e:	429c      	cmp	r4, r3
 800cc30:	d101      	bne.n	800cc36 <_fflush_r+0x62>
 800cc32:	68ac      	ldr	r4, [r5, #8]
 800cc34:	e7df      	b.n	800cbf6 <_fflush_r+0x22>
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <_fflush_r+0x74>)
 800cc38:	429c      	cmp	r4, r3
 800cc3a:	bf08      	it	eq
 800cc3c:	68ec      	ldreq	r4, [r5, #12]
 800cc3e:	e7da      	b.n	800cbf6 <_fflush_r+0x22>
 800cc40:	0800d50c 	.word	0x0800d50c
 800cc44:	0800d52c 	.word	0x0800d52c
 800cc48:	0800d4ec 	.word	0x0800d4ec

0800cc4c <std>:
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	b510      	push	{r4, lr}
 800cc50:	4604      	mov	r4, r0
 800cc52:	e9c0 3300 	strd	r3, r3, [r0]
 800cc56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc5a:	6083      	str	r3, [r0, #8]
 800cc5c:	8181      	strh	r1, [r0, #12]
 800cc5e:	6643      	str	r3, [r0, #100]	; 0x64
 800cc60:	81c2      	strh	r2, [r0, #14]
 800cc62:	6183      	str	r3, [r0, #24]
 800cc64:	4619      	mov	r1, r3
 800cc66:	2208      	movs	r2, #8
 800cc68:	305c      	adds	r0, #92	; 0x5c
 800cc6a:	f7fd fbff 	bl	800a46c <memset>
 800cc6e:	4b05      	ldr	r3, [pc, #20]	; (800cc84 <std+0x38>)
 800cc70:	6263      	str	r3, [r4, #36]	; 0x24
 800cc72:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <std+0x3c>)
 800cc74:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc76:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <std+0x40>)
 800cc78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc7a:	4b05      	ldr	r3, [pc, #20]	; (800cc90 <std+0x44>)
 800cc7c:	6224      	str	r4, [r4, #32]
 800cc7e:	6323      	str	r3, [r4, #48]	; 0x30
 800cc80:	bd10      	pop	{r4, pc}
 800cc82:	bf00      	nop
 800cc84:	0800cfa1 	.word	0x0800cfa1
 800cc88:	0800cfc3 	.word	0x0800cfc3
 800cc8c:	0800cffb 	.word	0x0800cffb
 800cc90:	0800d01f 	.word	0x0800d01f

0800cc94 <_cleanup_r>:
 800cc94:	4901      	ldr	r1, [pc, #4]	; (800cc9c <_cleanup_r+0x8>)
 800cc96:	f000 b8af 	b.w	800cdf8 <_fwalk_reent>
 800cc9a:	bf00      	nop
 800cc9c:	0800cbd5 	.word	0x0800cbd5

0800cca0 <__sfmoreglue>:
 800cca0:	b570      	push	{r4, r5, r6, lr}
 800cca2:	2268      	movs	r2, #104	; 0x68
 800cca4:	1e4d      	subs	r5, r1, #1
 800cca6:	4355      	muls	r5, r2
 800cca8:	460e      	mov	r6, r1
 800ccaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ccae:	f7ff fa65 	bl	800c17c <_malloc_r>
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	b140      	cbz	r0, 800ccc8 <__sfmoreglue+0x28>
 800ccb6:	2100      	movs	r1, #0
 800ccb8:	e9c0 1600 	strd	r1, r6, [r0]
 800ccbc:	300c      	adds	r0, #12
 800ccbe:	60a0      	str	r0, [r4, #8]
 800ccc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ccc4:	f7fd fbd2 	bl	800a46c <memset>
 800ccc8:	4620      	mov	r0, r4
 800ccca:	bd70      	pop	{r4, r5, r6, pc}

0800cccc <__sfp_lock_acquire>:
 800cccc:	4801      	ldr	r0, [pc, #4]	; (800ccd4 <__sfp_lock_acquire+0x8>)
 800ccce:	f000 b8b3 	b.w	800ce38 <__retarget_lock_acquire_recursive>
 800ccd2:	bf00      	nop
 800ccd4:	24000ac5 	.word	0x24000ac5

0800ccd8 <__sfp_lock_release>:
 800ccd8:	4801      	ldr	r0, [pc, #4]	; (800cce0 <__sfp_lock_release+0x8>)
 800ccda:	f000 b8ae 	b.w	800ce3a <__retarget_lock_release_recursive>
 800ccde:	bf00      	nop
 800cce0:	24000ac5 	.word	0x24000ac5

0800cce4 <__sinit_lock_acquire>:
 800cce4:	4801      	ldr	r0, [pc, #4]	; (800ccec <__sinit_lock_acquire+0x8>)
 800cce6:	f000 b8a7 	b.w	800ce38 <__retarget_lock_acquire_recursive>
 800ccea:	bf00      	nop
 800ccec:	24000ac6 	.word	0x24000ac6

0800ccf0 <__sinit_lock_release>:
 800ccf0:	4801      	ldr	r0, [pc, #4]	; (800ccf8 <__sinit_lock_release+0x8>)
 800ccf2:	f000 b8a2 	b.w	800ce3a <__retarget_lock_release_recursive>
 800ccf6:	bf00      	nop
 800ccf8:	24000ac6 	.word	0x24000ac6

0800ccfc <__sinit>:
 800ccfc:	b510      	push	{r4, lr}
 800ccfe:	4604      	mov	r4, r0
 800cd00:	f7ff fff0 	bl	800cce4 <__sinit_lock_acquire>
 800cd04:	69a3      	ldr	r3, [r4, #24]
 800cd06:	b11b      	cbz	r3, 800cd10 <__sinit+0x14>
 800cd08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd0c:	f7ff bff0 	b.w	800ccf0 <__sinit_lock_release>
 800cd10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd14:	6523      	str	r3, [r4, #80]	; 0x50
 800cd16:	4b13      	ldr	r3, [pc, #76]	; (800cd64 <__sinit+0x68>)
 800cd18:	4a13      	ldr	r2, [pc, #76]	; (800cd68 <__sinit+0x6c>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd1e:	42a3      	cmp	r3, r4
 800cd20:	bf04      	itt	eq
 800cd22:	2301      	moveq	r3, #1
 800cd24:	61a3      	streq	r3, [r4, #24]
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 f820 	bl	800cd6c <__sfp>
 800cd2c:	6060      	str	r0, [r4, #4]
 800cd2e:	4620      	mov	r0, r4
 800cd30:	f000 f81c 	bl	800cd6c <__sfp>
 800cd34:	60a0      	str	r0, [r4, #8]
 800cd36:	4620      	mov	r0, r4
 800cd38:	f000 f818 	bl	800cd6c <__sfp>
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	60e0      	str	r0, [r4, #12]
 800cd40:	2104      	movs	r1, #4
 800cd42:	6860      	ldr	r0, [r4, #4]
 800cd44:	f7ff ff82 	bl	800cc4c <std>
 800cd48:	68a0      	ldr	r0, [r4, #8]
 800cd4a:	2201      	movs	r2, #1
 800cd4c:	2109      	movs	r1, #9
 800cd4e:	f7ff ff7d 	bl	800cc4c <std>
 800cd52:	68e0      	ldr	r0, [r4, #12]
 800cd54:	2202      	movs	r2, #2
 800cd56:	2112      	movs	r1, #18
 800cd58:	f7ff ff78 	bl	800cc4c <std>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	61a3      	str	r3, [r4, #24]
 800cd60:	e7d2      	b.n	800cd08 <__sinit+0xc>
 800cd62:	bf00      	nop
 800cd64:	0800d170 	.word	0x0800d170
 800cd68:	0800cc95 	.word	0x0800cc95

0800cd6c <__sfp>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	4607      	mov	r7, r0
 800cd70:	f7ff ffac 	bl	800cccc <__sfp_lock_acquire>
 800cd74:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <__sfp+0x84>)
 800cd76:	681e      	ldr	r6, [r3, #0]
 800cd78:	69b3      	ldr	r3, [r6, #24]
 800cd7a:	b913      	cbnz	r3, 800cd82 <__sfp+0x16>
 800cd7c:	4630      	mov	r0, r6
 800cd7e:	f7ff ffbd 	bl	800ccfc <__sinit>
 800cd82:	3648      	adds	r6, #72	; 0x48
 800cd84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd88:	3b01      	subs	r3, #1
 800cd8a:	d503      	bpl.n	800cd94 <__sfp+0x28>
 800cd8c:	6833      	ldr	r3, [r6, #0]
 800cd8e:	b30b      	cbz	r3, 800cdd4 <__sfp+0x68>
 800cd90:	6836      	ldr	r6, [r6, #0]
 800cd92:	e7f7      	b.n	800cd84 <__sfp+0x18>
 800cd94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd98:	b9d5      	cbnz	r5, 800cdd0 <__sfp+0x64>
 800cd9a:	4b16      	ldr	r3, [pc, #88]	; (800cdf4 <__sfp+0x88>)
 800cd9c:	60e3      	str	r3, [r4, #12]
 800cd9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cda2:	6665      	str	r5, [r4, #100]	; 0x64
 800cda4:	f000 f847 	bl	800ce36 <__retarget_lock_init_recursive>
 800cda8:	f7ff ff96 	bl	800ccd8 <__sfp_lock_release>
 800cdac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cdb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cdb4:	6025      	str	r5, [r4, #0]
 800cdb6:	61a5      	str	r5, [r4, #24]
 800cdb8:	2208      	movs	r2, #8
 800cdba:	4629      	mov	r1, r5
 800cdbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cdc0:	f7fd fb54 	bl	800a46c <memset>
 800cdc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cdc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cdcc:	4620      	mov	r0, r4
 800cdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdd0:	3468      	adds	r4, #104	; 0x68
 800cdd2:	e7d9      	b.n	800cd88 <__sfp+0x1c>
 800cdd4:	2104      	movs	r1, #4
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f7ff ff62 	bl	800cca0 <__sfmoreglue>
 800cddc:	4604      	mov	r4, r0
 800cdde:	6030      	str	r0, [r6, #0]
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1d5      	bne.n	800cd90 <__sfp+0x24>
 800cde4:	f7ff ff78 	bl	800ccd8 <__sfp_lock_release>
 800cde8:	230c      	movs	r3, #12
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	e7ee      	b.n	800cdcc <__sfp+0x60>
 800cdee:	bf00      	nop
 800cdf0:	0800d170 	.word	0x0800d170
 800cdf4:	ffff0001 	.word	0xffff0001

0800cdf8 <_fwalk_reent>:
 800cdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdfc:	4606      	mov	r6, r0
 800cdfe:	4688      	mov	r8, r1
 800ce00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce04:	2700      	movs	r7, #0
 800ce06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ce0e:	d505      	bpl.n	800ce1c <_fwalk_reent+0x24>
 800ce10:	6824      	ldr	r4, [r4, #0]
 800ce12:	2c00      	cmp	r4, #0
 800ce14:	d1f7      	bne.n	800ce06 <_fwalk_reent+0xe>
 800ce16:	4638      	mov	r0, r7
 800ce18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1c:	89ab      	ldrh	r3, [r5, #12]
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d907      	bls.n	800ce32 <_fwalk_reent+0x3a>
 800ce22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce26:	3301      	adds	r3, #1
 800ce28:	d003      	beq.n	800ce32 <_fwalk_reent+0x3a>
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	47c0      	blx	r8
 800ce30:	4307      	orrs	r7, r0
 800ce32:	3568      	adds	r5, #104	; 0x68
 800ce34:	e7e9      	b.n	800ce0a <_fwalk_reent+0x12>

0800ce36 <__retarget_lock_init_recursive>:
 800ce36:	4770      	bx	lr

0800ce38 <__retarget_lock_acquire_recursive>:
 800ce38:	4770      	bx	lr

0800ce3a <__retarget_lock_release_recursive>:
 800ce3a:	4770      	bx	lr

0800ce3c <__swhatbuf_r>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	460e      	mov	r6, r1
 800ce40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce44:	2900      	cmp	r1, #0
 800ce46:	b096      	sub	sp, #88	; 0x58
 800ce48:	4614      	mov	r4, r2
 800ce4a:	461d      	mov	r5, r3
 800ce4c:	da08      	bge.n	800ce60 <__swhatbuf_r+0x24>
 800ce4e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce52:	2200      	movs	r2, #0
 800ce54:	602a      	str	r2, [r5, #0]
 800ce56:	061a      	lsls	r2, r3, #24
 800ce58:	d410      	bmi.n	800ce7c <__swhatbuf_r+0x40>
 800ce5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce5e:	e00e      	b.n	800ce7e <__swhatbuf_r+0x42>
 800ce60:	466a      	mov	r2, sp
 800ce62:	f000 f903 	bl	800d06c <_fstat_r>
 800ce66:	2800      	cmp	r0, #0
 800ce68:	dbf1      	blt.n	800ce4e <__swhatbuf_r+0x12>
 800ce6a:	9a01      	ldr	r2, [sp, #4]
 800ce6c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce70:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce74:	425a      	negs	r2, r3
 800ce76:	415a      	adcs	r2, r3
 800ce78:	602a      	str	r2, [r5, #0]
 800ce7a:	e7ee      	b.n	800ce5a <__swhatbuf_r+0x1e>
 800ce7c:	2340      	movs	r3, #64	; 0x40
 800ce7e:	2000      	movs	r0, #0
 800ce80:	6023      	str	r3, [r4, #0]
 800ce82:	b016      	add	sp, #88	; 0x58
 800ce84:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce88 <__smakebuf_r>:
 800ce88:	898b      	ldrh	r3, [r1, #12]
 800ce8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce8c:	079d      	lsls	r5, r3, #30
 800ce8e:	4606      	mov	r6, r0
 800ce90:	460c      	mov	r4, r1
 800ce92:	d507      	bpl.n	800cea4 <__smakebuf_r+0x1c>
 800ce94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce98:	6023      	str	r3, [r4, #0]
 800ce9a:	6123      	str	r3, [r4, #16]
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	6163      	str	r3, [r4, #20]
 800cea0:	b002      	add	sp, #8
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	ab01      	add	r3, sp, #4
 800cea6:	466a      	mov	r2, sp
 800cea8:	f7ff ffc8 	bl	800ce3c <__swhatbuf_r>
 800ceac:	9900      	ldr	r1, [sp, #0]
 800ceae:	4605      	mov	r5, r0
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f7ff f963 	bl	800c17c <_malloc_r>
 800ceb6:	b948      	cbnz	r0, 800cecc <__smakebuf_r+0x44>
 800ceb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cebc:	059a      	lsls	r2, r3, #22
 800cebe:	d4ef      	bmi.n	800cea0 <__smakebuf_r+0x18>
 800cec0:	f023 0303 	bic.w	r3, r3, #3
 800cec4:	f043 0302 	orr.w	r3, r3, #2
 800cec8:	81a3      	strh	r3, [r4, #12]
 800ceca:	e7e3      	b.n	800ce94 <__smakebuf_r+0xc>
 800cecc:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <__smakebuf_r+0x7c>)
 800cece:	62b3      	str	r3, [r6, #40]	; 0x28
 800ced0:	89a3      	ldrh	r3, [r4, #12]
 800ced2:	6020      	str	r0, [r4, #0]
 800ced4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	9b00      	ldr	r3, [sp, #0]
 800cedc:	6163      	str	r3, [r4, #20]
 800cede:	9b01      	ldr	r3, [sp, #4]
 800cee0:	6120      	str	r0, [r4, #16]
 800cee2:	b15b      	cbz	r3, 800cefc <__smakebuf_r+0x74>
 800cee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cee8:	4630      	mov	r0, r6
 800ceea:	f000 f8d1 	bl	800d090 <_isatty_r>
 800ceee:	b128      	cbz	r0, 800cefc <__smakebuf_r+0x74>
 800cef0:	89a3      	ldrh	r3, [r4, #12]
 800cef2:	f023 0303 	bic.w	r3, r3, #3
 800cef6:	f043 0301 	orr.w	r3, r3, #1
 800cefa:	81a3      	strh	r3, [r4, #12]
 800cefc:	89a0      	ldrh	r0, [r4, #12]
 800cefe:	4305      	orrs	r5, r0
 800cf00:	81a5      	strh	r5, [r4, #12]
 800cf02:	e7cd      	b.n	800cea0 <__smakebuf_r+0x18>
 800cf04:	0800cc95 	.word	0x0800cc95

0800cf08 <_malloc_usable_size_r>:
 800cf08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf0c:	1f18      	subs	r0, r3, #4
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	bfbc      	itt	lt
 800cf12:	580b      	ldrlt	r3, [r1, r0]
 800cf14:	18c0      	addlt	r0, r0, r3
 800cf16:	4770      	bx	lr

0800cf18 <_raise_r>:
 800cf18:	291f      	cmp	r1, #31
 800cf1a:	b538      	push	{r3, r4, r5, lr}
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	460d      	mov	r5, r1
 800cf20:	d904      	bls.n	800cf2c <_raise_r+0x14>
 800cf22:	2316      	movs	r3, #22
 800cf24:	6003      	str	r3, [r0, #0]
 800cf26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf2a:	bd38      	pop	{r3, r4, r5, pc}
 800cf2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf2e:	b112      	cbz	r2, 800cf36 <_raise_r+0x1e>
 800cf30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf34:	b94b      	cbnz	r3, 800cf4a <_raise_r+0x32>
 800cf36:	4620      	mov	r0, r4
 800cf38:	f000 f830 	bl	800cf9c <_getpid_r>
 800cf3c:	462a      	mov	r2, r5
 800cf3e:	4601      	mov	r1, r0
 800cf40:	4620      	mov	r0, r4
 800cf42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf46:	f000 b817 	b.w	800cf78 <_kill_r>
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d00a      	beq.n	800cf64 <_raise_r+0x4c>
 800cf4e:	1c59      	adds	r1, r3, #1
 800cf50:	d103      	bne.n	800cf5a <_raise_r+0x42>
 800cf52:	2316      	movs	r3, #22
 800cf54:	6003      	str	r3, [r0, #0]
 800cf56:	2001      	movs	r0, #1
 800cf58:	e7e7      	b.n	800cf2a <_raise_r+0x12>
 800cf5a:	2400      	movs	r4, #0
 800cf5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf60:	4628      	mov	r0, r5
 800cf62:	4798      	blx	r3
 800cf64:	2000      	movs	r0, #0
 800cf66:	e7e0      	b.n	800cf2a <_raise_r+0x12>

0800cf68 <raise>:
 800cf68:	4b02      	ldr	r3, [pc, #8]	; (800cf74 <raise+0xc>)
 800cf6a:	4601      	mov	r1, r0
 800cf6c:	6818      	ldr	r0, [r3, #0]
 800cf6e:	f7ff bfd3 	b.w	800cf18 <_raise_r>
 800cf72:	bf00      	nop
 800cf74:	24000010 	.word	0x24000010

0800cf78 <_kill_r>:
 800cf78:	b538      	push	{r3, r4, r5, lr}
 800cf7a:	4d07      	ldr	r5, [pc, #28]	; (800cf98 <_kill_r+0x20>)
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	4604      	mov	r4, r0
 800cf80:	4608      	mov	r0, r1
 800cf82:	4611      	mov	r1, r2
 800cf84:	602b      	str	r3, [r5, #0]
 800cf86:	f7f4 f9c9 	bl	800131c <_kill>
 800cf8a:	1c43      	adds	r3, r0, #1
 800cf8c:	d102      	bne.n	800cf94 <_kill_r+0x1c>
 800cf8e:	682b      	ldr	r3, [r5, #0]
 800cf90:	b103      	cbz	r3, 800cf94 <_kill_r+0x1c>
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	bd38      	pop	{r3, r4, r5, pc}
 800cf96:	bf00      	nop
 800cf98:	24000ac0 	.word	0x24000ac0

0800cf9c <_getpid_r>:
 800cf9c:	f7f4 b9b6 	b.w	800130c <_getpid>

0800cfa0 <__sread>:
 800cfa0:	b510      	push	{r4, lr}
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfa8:	f000 f894 	bl	800d0d4 <_read_r>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	bfab      	itete	ge
 800cfb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cfb2:	89a3      	ldrhlt	r3, [r4, #12]
 800cfb4:	181b      	addge	r3, r3, r0
 800cfb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cfba:	bfac      	ite	ge
 800cfbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800cfbe:	81a3      	strhlt	r3, [r4, #12]
 800cfc0:	bd10      	pop	{r4, pc}

0800cfc2 <__swrite>:
 800cfc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc6:	461f      	mov	r7, r3
 800cfc8:	898b      	ldrh	r3, [r1, #12]
 800cfca:	05db      	lsls	r3, r3, #23
 800cfcc:	4605      	mov	r5, r0
 800cfce:	460c      	mov	r4, r1
 800cfd0:	4616      	mov	r6, r2
 800cfd2:	d505      	bpl.n	800cfe0 <__swrite+0x1e>
 800cfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cfd8:	2302      	movs	r3, #2
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f000 f868 	bl	800d0b0 <_lseek_r>
 800cfe0:	89a3      	ldrh	r3, [r4, #12]
 800cfe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cfe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cfea:	81a3      	strh	r3, [r4, #12]
 800cfec:	4632      	mov	r2, r6
 800cfee:	463b      	mov	r3, r7
 800cff0:	4628      	mov	r0, r5
 800cff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cff6:	f000 b817 	b.w	800d028 <_write_r>

0800cffa <__sseek>:
 800cffa:	b510      	push	{r4, lr}
 800cffc:	460c      	mov	r4, r1
 800cffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d002:	f000 f855 	bl	800d0b0 <_lseek_r>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	89a3      	ldrh	r3, [r4, #12]
 800d00a:	bf15      	itete	ne
 800d00c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d016:	81a3      	strheq	r3, [r4, #12]
 800d018:	bf18      	it	ne
 800d01a:	81a3      	strhne	r3, [r4, #12]
 800d01c:	bd10      	pop	{r4, pc}

0800d01e <__sclose>:
 800d01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d022:	f000 b813 	b.w	800d04c <_close_r>
	...

0800d028 <_write_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d07      	ldr	r5, [pc, #28]	; (800d048 <_write_r+0x20>)
 800d02c:	4604      	mov	r4, r0
 800d02e:	4608      	mov	r0, r1
 800d030:	4611      	mov	r1, r2
 800d032:	2200      	movs	r2, #0
 800d034:	602a      	str	r2, [r5, #0]
 800d036:	461a      	mov	r2, r3
 800d038:	f7f4 f9a7 	bl	800138a <_write>
 800d03c:	1c43      	adds	r3, r0, #1
 800d03e:	d102      	bne.n	800d046 <_write_r+0x1e>
 800d040:	682b      	ldr	r3, [r5, #0]
 800d042:	b103      	cbz	r3, 800d046 <_write_r+0x1e>
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	bd38      	pop	{r3, r4, r5, pc}
 800d048:	24000ac0 	.word	0x24000ac0

0800d04c <_close_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d06      	ldr	r5, [pc, #24]	; (800d068 <_close_r+0x1c>)
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f4 f9b3 	bl	80013c2 <_close>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_close_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_close_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	24000ac0 	.word	0x24000ac0

0800d06c <_fstat_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	; (800d08c <_fstat_r+0x20>)
 800d070:	2300      	movs	r3, #0
 800d072:	4604      	mov	r4, r0
 800d074:	4608      	mov	r0, r1
 800d076:	4611      	mov	r1, r2
 800d078:	602b      	str	r3, [r5, #0]
 800d07a:	f7f4 f9ae 	bl	80013da <_fstat>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	d102      	bne.n	800d088 <_fstat_r+0x1c>
 800d082:	682b      	ldr	r3, [r5, #0]
 800d084:	b103      	cbz	r3, 800d088 <_fstat_r+0x1c>
 800d086:	6023      	str	r3, [r4, #0]
 800d088:	bd38      	pop	{r3, r4, r5, pc}
 800d08a:	bf00      	nop
 800d08c:	24000ac0 	.word	0x24000ac0

0800d090 <_isatty_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d06      	ldr	r5, [pc, #24]	; (800d0ac <_isatty_r+0x1c>)
 800d094:	2300      	movs	r3, #0
 800d096:	4604      	mov	r4, r0
 800d098:	4608      	mov	r0, r1
 800d09a:	602b      	str	r3, [r5, #0]
 800d09c:	f7f4 f9ad 	bl	80013fa <_isatty>
 800d0a0:	1c43      	adds	r3, r0, #1
 800d0a2:	d102      	bne.n	800d0aa <_isatty_r+0x1a>
 800d0a4:	682b      	ldr	r3, [r5, #0]
 800d0a6:	b103      	cbz	r3, 800d0aa <_isatty_r+0x1a>
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	bd38      	pop	{r3, r4, r5, pc}
 800d0ac:	24000ac0 	.word	0x24000ac0

0800d0b0 <_lseek_r>:
 800d0b0:	b538      	push	{r3, r4, r5, lr}
 800d0b2:	4d07      	ldr	r5, [pc, #28]	; (800d0d0 <_lseek_r+0x20>)
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	4608      	mov	r0, r1
 800d0b8:	4611      	mov	r1, r2
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	602a      	str	r2, [r5, #0]
 800d0be:	461a      	mov	r2, r3
 800d0c0:	f7f4 f9a6 	bl	8001410 <_lseek>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_lseek_r+0x1e>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_lseek_r+0x1e>
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	24000ac0 	.word	0x24000ac0

0800d0d4 <_read_r>:
 800d0d4:	b538      	push	{r3, r4, r5, lr}
 800d0d6:	4d07      	ldr	r5, [pc, #28]	; (800d0f4 <_read_r+0x20>)
 800d0d8:	4604      	mov	r4, r0
 800d0da:	4608      	mov	r0, r1
 800d0dc:	4611      	mov	r1, r2
 800d0de:	2200      	movs	r2, #0
 800d0e0:	602a      	str	r2, [r5, #0]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	f7f4 f934 	bl	8001350 <_read>
 800d0e8:	1c43      	adds	r3, r0, #1
 800d0ea:	d102      	bne.n	800d0f2 <_read_r+0x1e>
 800d0ec:	682b      	ldr	r3, [r5, #0]
 800d0ee:	b103      	cbz	r3, 800d0f2 <_read_r+0x1e>
 800d0f0:	6023      	str	r3, [r4, #0]
 800d0f2:	bd38      	pop	{r3, r4, r5, pc}
 800d0f4:	24000ac0 	.word	0x24000ac0

0800d0f8 <_init>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	bf00      	nop
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr

0800d104 <_fini>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr
