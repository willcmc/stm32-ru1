
STM32_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a968  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800ac08  0800ac08  0001ac08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac94  0800ac94  0001ac94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aca0  0800aca0  0001aca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  0800aca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000074  0800ad18  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d4  0800ad78  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000804  24000134  0800add8  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000938  0800add8  00020938  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d8f0  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e14  00000000  00000000  0003da52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00040868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00041a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038635  00000000  00000000  00042b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018572  00000000  00000000  0007b175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00164409  00000000  00000000  000936e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f7af0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  001f7b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800abf0 	.word	0x0800abf0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	0800abf0 	.word	0x0800abf0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <HAL_SPI_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    HAL_SPI_Receive_DMA(&hspi1, pData, BUFFER_SIZE);
 800068c:	2219      	movs	r2, #25
 800068e:	4906      	ldr	r1, [pc, #24]	; (80006a8 <HAL_SPI_RxCpltCallback+0x24>)
 8000690:	4806      	ldr	r0, [pc, #24]	; (80006ac <HAL_SPI_RxCpltCallback+0x28>)
 8000692:	f007 f927 	bl	80078e4 <HAL_SPI_Receive_DMA>
    HAL_UART_Transmit_IT(&huart3, pData, BUFFER_SIZE);
 8000696:	2219      	movs	r2, #25
 8000698:	4903      	ldr	r1, [pc, #12]	; (80006a8 <HAL_SPI_RxCpltCallback+0x24>)
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <HAL_SPI_RxCpltCallback+0x2c>)
 800069c:	f008 f894 	bl	80087c8 <HAL_UART_Transmit_IT>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	240008fc 	.word	0x240008fc
 80006ac:	24000238 	.word	0x24000238
 80006b0:	24000338 	.word	0x24000338

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 feec 	bl	8001494 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f832 	bl	8000724 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006c0:	f000 f8b0 	bl	8000824 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f000 fa0c 	bl	8000ae0 <MX_GPIO_Init>
  MX_ETH_Init();
 80006c8:	f000 f8c8 	bl	800085c <MX_ETH_Init>
  MX_DMA_Init();
 80006cc:	f000 f9e8 	bl	8000aa0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006d0:	f000 f9b4 	bl	8000a3c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI1_Init();
 80006d4:	f000 f90e 	bl	80008f4 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80006d8:	f000 f964 	bl	80009a4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SPI_Receive_DMA(&hspi1, pData, BUFFER_SIZE);
 80006dc:	2219      	movs	r2, #25
 80006de:	490b      	ldr	r1, [pc, #44]	; (800070c <main+0x58>)
 80006e0:	480b      	ldr	r0, [pc, #44]	; (8000710 <main+0x5c>)
 80006e2:	f007 f8ff 	bl	80078e4 <HAL_SPI_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(MSG, "Encoder Counter = %d\r\n", enc_ctr);
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <main+0x60>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	490a      	ldr	r1, [pc, #40]	; (8000718 <main+0x64>)
 80006ee:	480b      	ldr	r0, [pc, #44]	; (800071c <main+0x68>)
 80006f0:	f009 fe10 	bl	800a314 <siprintf>
	  HAL_UART_Transmit(&huart3, MSG, sizeof(MSG), BUFFER_SIZE);
 80006f4:	2319      	movs	r3, #25
 80006f6:	2223      	movs	r2, #35	; 0x23
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <main+0x68>)
 80006fa:	4809      	ldr	r0, [pc, #36]	; (8000720 <main+0x6c>)
 80006fc:	f007 ffcd 	bl	800869a <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000704:	f000 ff58 	bl	80015b8 <HAL_Delay>
	  sprintf(MSG, "Encoder Counter = %d\r\n", enc_ctr);
 8000708:	e7ed      	b.n	80006e6 <main+0x32>
 800070a:	bf00      	nop
 800070c:	240008fc 	.word	0x240008fc
 8000710:	24000238 	.word	0x24000238
 8000714:	240008d4 	.word	0x240008d4
 8000718:	0800ac08 	.word	0x0800ac08
 800071c:	240008d8 	.word	0x240008d8
 8000720:	24000338 	.word	0x24000338

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	; 0x70
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072e:	224c      	movs	r2, #76	; 0x4c
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f009 fde6 	bl	800a304 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2220      	movs	r2, #32
 800073c:	2100      	movs	r1, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f009 fde0 	bl	800a304 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000744:	2002      	movs	r0, #2
 8000746:	f004 fc5b 	bl	8005000 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b33      	ldr	r3, [pc, #204]	; (800081c <SystemClock_Config+0xf8>)
 8000750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000752:	4a32      	ldr	r2, [pc, #200]	; (800081c <SystemClock_Config+0xf8>)
 8000754:	f023 0301 	bic.w	r3, r3, #1
 8000758:	62d3      	str	r3, [r2, #44]	; 0x2c
 800075a:	4b30      	ldr	r3, [pc, #192]	; (800081c <SystemClock_Config+0xf8>)
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	4b2e      	ldr	r3, [pc, #184]	; (8000820 <SystemClock_Config+0xfc>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076c:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <SystemClock_Config+0xfc>)
 800076e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <SystemClock_Config+0xfc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000780:	bf00      	nop
 8000782:	4b27      	ldr	r3, [pc, #156]	; (8000820 <SystemClock_Config+0xfc>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800078a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800078e:	d1f8      	bne.n	8000782 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000790:	2303      	movs	r3, #3
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000794:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000798:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800079a:	2301      	movs	r3, #1
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	2302      	movs	r3, #2
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80007ae:	2318      	movs	r3, #24
 80007b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b6:	2304      	movs	r3, #4
 80007b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007be:	230c      	movs	r3, #12
 80007c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	4618      	mov	r0, r3
 80007d0:	f004 fc60 	bl	8005094 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007da:	f000 fa73 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	233f      	movs	r3, #63	; 0x3f
 80007e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	2101      	movs	r1, #1
 8000802:	4618      	mov	r0, r3
 8000804:	f005 f874 	bl	80058f0 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800080e:	f000 fa59 	bl	8000cc4 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3770      	adds	r7, #112	; 0x70
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58000400 	.word	0x58000400
 8000820:	58024800 	.word	0x58024800

08000824 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b0b0      	sub	sp, #192	; 0xc0
 8000828:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	22bc      	movs	r2, #188	; 0xbc
 800082e:	2100      	movs	r1, #0
 8000830:	4618      	mov	r0, r3
 8000832:	f009 fd67 	bl	800a304 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000836:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800083a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f005 fbe0 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 800084e:	f000 fa39 	bl	8000cc4 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	37c0      	adds	r7, #192	; 0xc0
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_ETH_Init+0x80>)
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <MX_ETH_Init+0x84>)
 8000864:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000866:	4b1f      	ldr	r3, [pc, #124]	; (80008e4 <MX_ETH_Init+0x88>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800086c:	4b1d      	ldr	r3, [pc, #116]	; (80008e4 <MX_ETH_Init+0x88>)
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000872:	4b1c      	ldr	r3, [pc, #112]	; (80008e4 <MX_ETH_Init+0x88>)
 8000874:	22e1      	movs	r2, #225	; 0xe1
 8000876:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000878:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_ETH_Init+0x88>)
 800087a:	2200      	movs	r2, #0
 800087c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800087e:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <MX_ETH_Init+0x88>)
 8000880:	2200      	movs	r2, #0
 8000882:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_ETH_Init+0x88>)
 8000886:	2200      	movs	r2, #0
 8000888:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_ETH_Init+0x80>)
 800088c:	4a15      	ldr	r2, [pc, #84]	; (80008e4 <MX_ETH_Init+0x88>)
 800088e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_ETH_Init+0x80>)
 8000892:	2201      	movs	r2, #1
 8000894:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_ETH_Init+0x80>)
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <MX_ETH_Init+0x8c>)
 800089a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_ETH_Init+0x80>)
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <MX_ETH_Init+0x90>)
 80008a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_ETH_Init+0x80>)
 80008a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008aa:	480c      	ldr	r0, [pc, #48]	; (80008dc <MX_ETH_Init+0x80>)
 80008ac:	f003 fb02 	bl	8003eb4 <HAL_ETH_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008b6:	f000 fa05 	bl	8000cc4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008ba:	2238      	movs	r2, #56	; 0x38
 80008bc:	2100      	movs	r1, #0
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_ETH_Init+0x94>)
 80008c0:	f009 fd20 	bl	800a304 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_ETH_Init+0x94>)
 80008c6:	2221      	movs	r2, #33	; 0x21
 80008c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_ETH_Init+0x94>)
 80008cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_ETH_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	24000188 	.word	0x24000188
 80008e0:	40028000 	.word	0x40028000
 80008e4:	24000918 	.word	0x24000918
 80008e8:	240000d4 	.word	0x240000d4
 80008ec:	24000074 	.word	0x24000074
 80008f0:	24000150 	.word	0x24000150

080008f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f8:	4b28      	ldr	r3, [pc, #160]	; (800099c <MX_SPI1_Init+0xa8>)
 80008fa:	4a29      	ldr	r2, [pc, #164]	; (80009a0 <MX_SPI1_Init+0xac>)
 80008fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008fe:	4b27      	ldr	r3, [pc, #156]	; (800099c <MX_SPI1_Init+0xa8>)
 8000900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000904:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000906:	4b25      	ldr	r3, [pc, #148]	; (800099c <MX_SPI1_Init+0xa8>)
 8000908:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800090c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800090e:	4b23      	ldr	r3, [pc, #140]	; (800099c <MX_SPI1_Init+0xa8>)
 8000910:	220f      	movs	r2, #15
 8000912:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <MX_SPI1_Init+0xa8>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <MX_SPI1_Init+0xa8>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <MX_SPI1_Init+0xa8>)
 8000922:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000926:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <MX_SPI1_Init+0xa8>)
 800092a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800092e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000930:	4b1a      	ldr	r3, [pc, #104]	; (800099c <MX_SPI1_Init+0xa8>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <MX_SPI1_Init+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_SPI1_Init+0xa8>)
 800093e:	2200      	movs	r2, #0
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_SPI1_Init+0xa8>)
 8000944:	2200      	movs	r2, #0
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_SPI1_Init+0xa8>)
 800094a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_SPI1_Init+0xa8>)
 8000952:	2200      	movs	r2, #0
 8000954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_SPI1_Init+0xa8>)
 8000958:	2200      	movs	r2, #0
 800095a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_SPI1_Init+0xa8>)
 800095e:	2200      	movs	r2, #0
 8000960:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_SPI1_Init+0xa8>)
 8000964:	2200      	movs	r2, #0
 8000966:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_SPI1_Init+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_SPI1_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_SPI1_Init+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_SPI1_Init+0xa8>)
 800097c:	2200      	movs	r2, #0
 800097e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_SPI1_Init+0xa8>)
 8000982:	2200      	movs	r2, #0
 8000984:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_SPI1_Init+0xa8>)
 8000988:	f006 fea6 	bl	80076d8 <HAL_SPI_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000992:	f000 f997 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	24000238 	.word	0x24000238
 80009a0:	40013000 	.word	0x40013000

080009a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_USART3_UART_Init+0x94>)
 80009ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009ca:	220c      	movs	r2, #12
 80009cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ec:	4811      	ldr	r0, [pc, #68]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 80009ee:	f007 fe04 	bl	80085fa <HAL_UART_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009f8:	f000 f964 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fc:	2100      	movs	r1, #0
 80009fe:	480d      	ldr	r0, [pc, #52]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a00:	f009 f882 	bl	8009b08 <HAL_UARTEx_SetTxFifoThreshold>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a0a:	f000 f95b 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a12:	f009 f8b7 	bl	8009b84 <HAL_UARTEx_SetRxFifoThreshold>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 f952 	bl	8000cc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_USART3_UART_Init+0x90>)
 8000a22:	f009 f838 	bl	8009a96 <HAL_UARTEx_DisableFifoMode>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a2c:	f000 f94a 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	24000338 	.word	0x24000338
 8000a38:	40004800 	.word	0x40004800

08000a3c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a42:	4a16      	ldr	r2, [pc, #88]	; (8000a9c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a44:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a48:	2209      	movs	r2, #9
 8000a4a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a4e:	2202      	movs	r2, #2
 8000a50:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a84:	f004 f974 	bl	8004d70 <HAL_PCD_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a8e:	f000 f919 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	240003c8 	.word	0x240003c8
 8000a9c:	40080000 	.word	0x40080000

08000aa0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <MX_DMA_Init+0x3c>)
 8000aa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aac:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <MX_DMA_Init+0x3c>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_DMA_Init+0x3c>)
 8000ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
 8000ac2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	200b      	movs	r0, #11
 8000aca:	f000 fe94 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000ace:	200b      	movs	r0, #11
 8000ad0:	f000 feab 	bl	800182a <HAL_NVIC_EnableIRQ>

}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	58024400 	.word	0x58024400

08000ae0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af6:	4b6d      	ldr	r3, [pc, #436]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a6b      	ldr	r2, [pc, #428]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b69      	ldr	r3, [pc, #420]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b14:	4b65      	ldr	r3, [pc, #404]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a64      	ldr	r2, [pc, #400]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b61      	ldr	r3, [pc, #388]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	4b5e      	ldr	r3, [pc, #376]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a5c      	ldr	r2, [pc, #368]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b5a      	ldr	r3, [pc, #360]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b56      	ldr	r3, [pc, #344]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b56:	4a55      	ldr	r2, [pc, #340]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b60:	4b52      	ldr	r3, [pc, #328]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b6e:	4b4f      	ldr	r3, [pc, #316]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a4d      	ldr	r2, [pc, #308]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b4b      	ldr	r3, [pc, #300]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0310 	and.w	r3, r3, #16
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8c:	4b47      	ldr	r3, [pc, #284]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a46      	ldr	r2, [pc, #280]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0308 	and.w	r3, r3, #8
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a3e      	ldr	r2, [pc, #248]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_GPIO_Init+0x1cc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc4:	603b      	str	r3, [r7, #0]
 8000bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f244 0101 	movw	r1, #16385	; 0x4001
 8000bce:	4838      	ldr	r0, [pc, #224]	; (8000cb0 <MX_GPIO_Init+0x1d0>)
 8000bd0:	f004 f890 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bda:	4836      	ldr	r0, [pc, #216]	; (8000cb4 <MX_GPIO_Init+0x1d4>)
 8000bdc:	f004 f88a 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2102      	movs	r1, #2
 8000be4:	4834      	ldr	r0, [pc, #208]	; (8000cb8 <MX_GPIO_Init+0x1d8>)
 8000be6:	f004 f885 	bl	8004cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	482f      	ldr	r0, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x1dc>)
 8000c00:	f003 fec8 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000c04:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4824      	ldr	r0, [pc, #144]	; (8000cb0 <MX_GPIO_Init+0x1d0>)
 8000c1e:	f003 feb9 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pins : ChB_Pin ChA_Pin */
  GPIO_InitStruct.Pin = ChB_Pin|ChA_Pin;
 8000c22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <MX_GPIO_Init+0x1d8>)
 8000c3a:	f003 feab 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <MX_GPIO_Init+0x1d4>)
 8000c58:	f003 fe9c 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4813      	ldr	r0, [pc, #76]	; (8000cc0 <MX_GPIO_Init+0x1e0>)
 8000c72:	f003 fe8f 	bl	8004994 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c76:	2302      	movs	r3, #2
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <MX_GPIO_Init+0x1d8>)
 8000c8e:	f003 fe81 	bl	8004994 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	2028      	movs	r0, #40	; 0x28
 8000c98:	f000 fdad 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c9c:	2028      	movs	r0, #40	; 0x28
 8000c9e:	f000 fdc4 	bl	800182a <HAL_NVIC_EnableIRQ>

}
 8000ca2:	bf00      	nop
 8000ca4:	3730      	adds	r7, #48	; 0x30
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58020400 	.word	0x58020400
 8000cb4:	58020c00 	.word	0x58020c00
 8000cb8:	58021000 	.word	0x58021000
 8000cbc:	58020800 	.word	0x58020800
 8000cc0:	58021800 	.word	0x58021800

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>
	...

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <HAL_MspInit+0x54>)
 8000cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cdc:	4a11      	ldr	r2, [pc, #68]	; (8000d24 <HAL_MspInit+0x54>)
 8000cde:	f043 0302 	orr.w	r3, r3, #2
 8000ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x54>)
 8000ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cec:	f003 0302 	and.w	r3, r3, #2
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000cf4:	2004      	movs	r0, #4
 8000cf6:	f000 fd73 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2005      	movs	r0, #5
 8000d00:	f000 fd79 	bl	80017f6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d04:	2005      	movs	r0, #5
 8000d06:	f000 fd90 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2005      	movs	r0, #5
 8000d10:	f000 fd71 	bl	80017f6 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d14:	2005      	movs	r0, #5
 8000d16:	f000 fd88 	bl	800182a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	58024400 	.word	0x58024400

08000d28 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a5d      	ldr	r2, [pc, #372]	; (8000ebc <HAL_ETH_MspInit+0x194>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	f040 80b3 	bne.w	8000eb2 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d4c:	4b5c      	ldr	r3, [pc, #368]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d52:	4a5b      	ldr	r2, [pc, #364]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d58:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d5c:	4b58      	ldr	r3, [pc, #352]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d6a:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d70:	4a53      	ldr	r2, [pc, #332]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d7a:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d88:	4b4d      	ldr	r3, [pc, #308]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d8e:	4a4c      	ldr	r2, [pc, #304]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d98:	4b49      	ldr	r3, [pc, #292]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000d9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	61bb      	str	r3, [r7, #24]
 8000da4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	4b46      	ldr	r3, [pc, #280]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dac:	4a44      	ldr	r2, [pc, #272]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b3e      	ldr	r3, [pc, #248]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dca:	4a3d      	ldr	r2, [pc, #244]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd4:	4b3a      	ldr	r3, [pc, #232]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de8:	4a35      	ldr	r2, [pc, #212]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e00:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e06:	4a2e      	ldr	r2, [pc, #184]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e10:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <HAL_ETH_MspInit+0x198>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e1e:	2332      	movs	r3, #50	; 0x32
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e2e:	230b      	movs	r3, #11
 8000e30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4822      	ldr	r0, [pc, #136]	; (8000ec4 <HAL_ETH_MspInit+0x19c>)
 8000e3a:	f003 fdab 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e3e:	2386      	movs	r3, #134	; 0x86
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e4e:	230b      	movs	r3, #11
 8000e50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <HAL_ETH_MspInit+0x1a0>)
 8000e5a:	f003 fd9b 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e70:	230b      	movs	r3, #11
 8000e72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4814      	ldr	r0, [pc, #80]	; (8000ecc <HAL_ETH_MspInit+0x1a4>)
 8000e7c:	f003 fd8a 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <HAL_ETH_MspInit+0x1a8>)
 8000e9e:	f003 fd79 	bl	8004994 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	203d      	movs	r0, #61	; 0x3d
 8000ea8:	f000 fca5 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000eac:	203d      	movs	r0, #61	; 0x3d
 8000eae:	f000 fcbc 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3738      	adds	r7, #56	; 0x38
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40028000 	.word	0x40028000
 8000ec0:	58024400 	.word	0x58024400
 8000ec4:	58020800 	.word	0x58020800
 8000ec8:	58020000 	.word	0x58020000
 8000ecc:	58020400 	.word	0x58020400
 8000ed0:	58021800 	.word	0x58021800

08000ed4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0b8      	sub	sp, #224	; 0xe0
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	22bc      	movs	r2, #188	; 0xbc
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f009 fa05 	bl	800a304 <memset>
  if(hspi->Instance==SPI1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a46      	ldr	r2, [pc, #280]	; (8001018 <HAL_SPI_MspInit+0x144>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	f040 8084 	bne.w	800100e <HAL_SPI_MspInit+0x13a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f10:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 f876 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_SPI_MspInit+0x52>
    {
      Error_Handler();
 8000f22:	f7ff fecf 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f26:	4b3d      	ldr	r3, [pc, #244]	; (800101c <HAL_SPI_MspInit+0x148>)
 8000f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f2c:	4a3b      	ldr	r2, [pc, #236]	; (800101c <HAL_SPI_MspInit+0x148>)
 8000f2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f36:	4b39      	ldr	r3, [pc, #228]	; (800101c <HAL_SPI_MspInit+0x148>)
 8000f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_SPI_MspInit+0x148>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a34      	ldr	r2, [pc, #208]	; (800101c <HAL_SPI_MspInit+0x148>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <HAL_SPI_MspInit+0x148>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000f62:	2360      	movs	r3, #96	; 0x60
 8000f64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f84:	4619      	mov	r1, r3
 8000f86:	4826      	ldr	r0, [pc, #152]	; (8001020 <HAL_SPI_MspInit+0x14c>)
 8000f88:	f003 fd04 	bl	8004994 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000f8e:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_SPI_MspInit+0x154>)
 8000f90:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8000f92:	4b24      	ldr	r3, [pc, #144]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000f94:	2225      	movs	r2, #37	; 0x25
 8000f96:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9e:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000fbc:	4b19      	ldr	r3, [pc, #100]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000fc2:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fc4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fc8:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fca:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fd0:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fe2:	4810      	ldr	r0, [pc, #64]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000fe4:	f000 fc3c 	bl	8001860 <HAL_DMA_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8000fee:	f7ff fe69 	bl	8000cc4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000ff6:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <HAL_SPI_MspInit+0x150>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2023      	movs	r0, #35	; 0x23
 8001004:	f000 fbf7 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001008:	2023      	movs	r0, #35	; 0x23
 800100a:	f000 fc0e 	bl	800182a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800100e:	bf00      	nop
 8001010:	37e0      	adds	r7, #224	; 0xe0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40013000 	.word	0x40013000
 800101c:	58024400 	.word	0x58024400
 8001020:	58020000 	.word	0x58020000
 8001024:	240002c0 	.word	0x240002c0
 8001028:	40020010 	.word	0x40020010

0800102c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0b8      	sub	sp, #224	; 0xe0
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	22bc      	movs	r2, #188	; 0xbc
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f009 f959 	bl	800a304 <memset>
  if(huart->Instance==USART3)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a25      	ldr	r2, [pc, #148]	; (80010ec <HAL_UART_MspInit+0xc0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d142      	bne.n	80010e2 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800105c:	2302      	movs	r3, #2
 800105e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001066:	f107 0310 	add.w	r3, r7, #16
 800106a:	4618      	mov	r0, r3
 800106c:	f004 ffcc 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001076:	f7ff fe25 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 800107c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 8001082:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001086:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 800108c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800109e:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_UART_MspInit+0xc4>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010d0:	2307      	movs	r3, #7
 80010d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_UART_MspInit+0xc8>)
 80010de:	f003 fc59 	bl	8004994 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	37e0      	adds	r7, #224	; 0xe0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40004800 	.word	0x40004800
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58020c00 	.word	0x58020c00

080010f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0b8      	sub	sp, #224	; 0xe0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	22bc      	movs	r2, #188	; 0xbc
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f009 f8f3 	bl	800a304 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a2f      	ldr	r2, [pc, #188]	; (80011e0 <HAL_PCD_MspInit+0xe8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d156      	bne.n	80011d6 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001128:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800112c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800112e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001136:	f107 0310 	add.w	r3, r7, #16
 800113a:	4618      	mov	r0, r3
 800113c:	f004 ff64 	bl	8006008 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001146:	f7ff fdbd 	bl	8000cc4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800114a:	f003 ff93 	bl	8005074 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_PCD_MspInit+0xec>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_PCD_MspInit+0xec>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115e:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_PCD_MspInit+0xec>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800116c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001170:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001186:	230a      	movs	r3, #10
 8001188:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001190:	4619      	mov	r1, r3
 8001192:	4815      	ldr	r0, [pc, #84]	; (80011e8 <HAL_PCD_MspInit+0xf0>)
 8001194:	f003 fbfe 	bl	8004994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011b0:	4619      	mov	r1, r3
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <HAL_PCD_MspInit+0xf0>)
 80011b4:	f003 fbee 	bl	8004994 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011b8:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_PCD_MspInit+0xec>)
 80011ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011be:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_PCD_MspInit+0xec>)
 80011c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80011c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_PCD_MspInit+0xec>)
 80011ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	37e0      	adds	r7, #224	; 0xe0
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40080000 	.word	0x40080000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020000 	.word	0x58020000

080011ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <NMI_Handler+0x4>

080011f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <MemManage_Handler+0x4>

080011fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001202:	e7fe      	b.n	8001202 <BusFault_Handler+0x4>

08001204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001208:	e7fe      	b.n	8001208 <UsageFault_Handler+0x4>

0800120a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001238:	f000 f99e 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA1_Stream0_IRQHandler+0x10>)
 8001256:	f001 fb0f 	bl	8002878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	240002c0 	.word	0x240002c0

08001264 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <SPI1_IRQHandler+0x10>)
 800126a:	f006 fe6d 	bl	8007f48 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	24000238 	.word	0x24000238

08001278 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(ChA_Pin)){
 800127c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001288:	2b00      	cmp	r3, #0
 800128a:	d004      	beq.n	8001296 <EXTI15_10_IRQHandler+0x1e>
		enc_ctr += 1;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <EXTI15_10_IRQHandler+0x34>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a06      	ldr	r2, [pc, #24]	; (80012ac <EXTI15_10_IRQHandler+0x34>)
 8001294:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ChB_Pin);
 8001296:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800129a:	f003 fd44 	bl	8004d26 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ChA_Pin);
 800129e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012a2:	f003 fd40 	bl	8004d26 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	240008d4 	.word	0x240008d4

080012b0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <ETH_IRQHandler+0x10>)
 80012b6:	f002 fee3 	bl	8004080 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000188 	.word	0x24000188

080012c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012cc:	4a14      	ldr	r2, [pc, #80]	; (8001320 <_sbrk+0x5c>)
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <_sbrk+0x60>)
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d8:	4b13      	ldr	r3, [pc, #76]	; (8001328 <_sbrk+0x64>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d102      	bne.n	80012e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e0:	4b11      	ldr	r3, [pc, #68]	; (8001328 <_sbrk+0x64>)
 80012e2:	4a12      	ldr	r2, [pc, #72]	; (800132c <_sbrk+0x68>)
 80012e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d207      	bcs.n	8001304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f4:	f008 ffdc 	bl	800a2b0 <__errno>
 80012f8:	4603      	mov	r3, r0
 80012fa:	220c      	movs	r2, #12
 80012fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001302:	e009      	b.n	8001318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <_sbrk+0x64>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <_sbrk+0x64>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <_sbrk+0x64>)
 8001314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	24080000 	.word	0x24080000
 8001324:	00000400 	.word	0x00000400
 8001328:	24000920 	.word	0x24000920
 800132c:	24000938 	.word	0x24000938

08001330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001334:	4b37      	ldr	r3, [pc, #220]	; (8001414 <SystemInit+0xe4>)
 8001336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800133a:	4a36      	ldr	r2, [pc, #216]	; (8001414 <SystemInit+0xe4>)
 800133c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001344:	4b34      	ldr	r3, [pc, #208]	; (8001418 <SystemInit+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2b06      	cmp	r3, #6
 800134e:	d807      	bhi.n	8001360 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001350:	4b31      	ldr	r3, [pc, #196]	; (8001418 <SystemInit+0xe8>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f023 030f 	bic.w	r3, r3, #15
 8001358:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <SystemInit+0xe8>)
 800135a:	f043 0307 	orr.w	r3, r3, #7
 800135e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001360:	4b2e      	ldr	r3, [pc, #184]	; (800141c <SystemInit+0xec>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a2d      	ldr	r2, [pc, #180]	; (800141c <SystemInit+0xec>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800136c:	4b2b      	ldr	r3, [pc, #172]	; (800141c <SystemInit+0xec>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001372:	4b2a      	ldr	r3, [pc, #168]	; (800141c <SystemInit+0xec>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	4929      	ldr	r1, [pc, #164]	; (800141c <SystemInit+0xec>)
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <SystemInit+0xf0>)
 800137a:	4013      	ands	r3, r2
 800137c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <SystemInit+0xe8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	2b00      	cmp	r3, #0
 8001388:	d007      	beq.n	800139a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800138a:	4b23      	ldr	r3, [pc, #140]	; (8001418 <SystemInit+0xe8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 030f 	bic.w	r3, r3, #15
 8001392:	4a21      	ldr	r2, [pc, #132]	; (8001418 <SystemInit+0xe8>)
 8001394:	f043 0307 	orr.w	r3, r3, #7
 8001398:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <SystemInit+0xec>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <SystemInit+0xec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <SystemInit+0xec>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <SystemInit+0xec>)
 80013ae:	4a1d      	ldr	r2, [pc, #116]	; (8001424 <SystemInit+0xf4>)
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	; (800141c <SystemInit+0xec>)
 80013b4:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <SystemInit+0xf8>)
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013b8:	4b18      	ldr	r3, [pc, #96]	; (800141c <SystemInit+0xec>)
 80013ba:	4a1c      	ldr	r2, [pc, #112]	; (800142c <SystemInit+0xfc>)
 80013bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <SystemInit+0xec>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <SystemInit+0xec>)
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <SystemInit+0xfc>)
 80013c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <SystemInit+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <SystemInit+0xec>)
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <SystemInit+0xfc>)
 80013d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <SystemInit+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <SystemInit+0xec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <SystemInit+0xec>)
 80013e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <SystemInit+0xec>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <SystemInit+0x100>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <SystemInit+0x104>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013fa:	d202      	bcs.n	8001402 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <SystemInit+0x108>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001402:	4b0e      	ldr	r3, [pc, #56]	; (800143c <SystemInit+0x10c>)
 8001404:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001408:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	52002000 	.word	0x52002000
 800141c:	58024400 	.word	0x58024400
 8001420:	eaf6ed7f 	.word	0xeaf6ed7f
 8001424:	02020200 	.word	0x02020200
 8001428:	01ff0000 	.word	0x01ff0000
 800142c:	01010280 	.word	0x01010280
 8001430:	5c001000 	.word	0x5c001000
 8001434:	ffff0000 	.word	0xffff0000
 8001438:	51008108 	.word	0x51008108
 800143c:	52004000 	.word	0x52004000

08001440 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001478 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001444:	f7ff ff74 	bl	8001330 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480c      	ldr	r0, [pc, #48]	; (800147c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800144a:	490d      	ldr	r1, [pc, #52]	; (8001480 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800144c:	4a0d      	ldr	r2, [pc, #52]	; (8001484 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001460:	4c0a      	ldr	r4, [pc, #40]	; (800148c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f008 ff25 	bl	800a2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001472:	f7ff f91f 	bl	80006b4 <main>
  bx  lr
 8001476:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001478:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800147c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001480:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001484:	0800aca4 	.word	0x0800aca4
  ldr r2, =_sbss
 8001488:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 800148c:	24000938 	.word	0x24000938

08001490 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001490:	e7fe      	b.n	8001490 <ADC3_IRQHandler>
	...

08001494 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f9a0 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80014a0:	f004 fbdc 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	0a1b      	lsrs	r3, r3, #8
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	4913      	ldr	r1, [pc, #76]	; (8001500 <HAL_Init+0x6c>)
 80014b2:	5ccb      	ldrb	r3, [r1, r3]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_Init+0x68>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4a0e      	ldr	r2, [pc, #56]	; (8001500 <HAL_Init+0x6c>)
 80014c8:	5cd3      	ldrb	r3, [r2, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_Init+0x70>)
 80014d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d8:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_Init+0x74>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014de:	2000      	movs	r0, #0
 80014e0:	f000 f814 	bl	800150c <HAL_InitTick>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e002      	b.n	80014f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ee:	f7ff fbef 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	58024400 	.word	0x58024400
 8001500:	0800ac20 	.word	0x0800ac20
 8001504:	24000004 	.word	0x24000004
 8001508:	24000000 	.word	0x24000000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_InitTick+0x60>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e021      	b.n	8001564 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_InitTick+0x64>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f985 	bl	8001846 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001554:	f000 f94f 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <HAL_InitTick+0x68>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2400000c 	.word	0x2400000c
 8001570:	24000000 	.word	0x24000000
 8001574:	24000008 	.word	0x24000008

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2400000c 	.word	0x2400000c
 800159c:	24000924 	.word	0x24000924

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	24000924 	.word	0x24000924

080015b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff ffee 	bl	80015a0 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d0:	d005      	beq.n	80015de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <HAL_Delay+0x44>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015de:	bf00      	nop
 80015e0:	f7ff ffde 	bl	80015a0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d8f7      	bhi.n	80015e0 <HAL_Delay+0x28>
  {
  }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400000c 	.word	0x2400000c

08001600 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GetREVID+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	0c1b      	lsrs	r3, r3, #16
}
 800160a:	4618      	mov	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	5c001000 	.word	0x5c001000

08001618 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001628:	4904      	ldr	r1, [pc, #16]	; (800163c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	58000400 	.word	0x58000400

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <__NVIC_SetPriorityGrouping+0x40>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	4313      	orrs	r3, r2
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x40>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00
 8001684:	05fa0000 	.word	0x05fa0000

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <__NVIC_EnableIRQ+0x38>)
 80016be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	88fb      	ldrh	r3, [r7, #6]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff29 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff40 	bl	8001688 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff90 	bl	8001734 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5f 	bl	80016e0 <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001834:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff33 	bl	80016a4 <__NVIC_EnableIRQ>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffa4 	bl	800179c <SysTick_Config>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fe9a 	bl	80015a0 <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e316      	b.n	8001ea6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a66      	ldr	r2, [pc, #408]	; (8001a18 <HAL_DMA_Init+0x1b8>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d04a      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a65      	ldr	r2, [pc, #404]	; (8001a1c <HAL_DMA_Init+0x1bc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d045      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_DMA_Init+0x1c0>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d040      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a62      	ldr	r2, [pc, #392]	; (8001a24 <HAL_DMA_Init+0x1c4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d03b      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a60      	ldr	r2, [pc, #384]	; (8001a28 <HAL_DMA_Init+0x1c8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d036      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5f      	ldr	r2, [pc, #380]	; (8001a2c <HAL_DMA_Init+0x1cc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d031      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a5d      	ldr	r2, [pc, #372]	; (8001a30 <HAL_DMA_Init+0x1d0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d02c      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a5c      	ldr	r2, [pc, #368]	; (8001a34 <HAL_DMA_Init+0x1d4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d027      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a5a      	ldr	r2, [pc, #360]	; (8001a38 <HAL_DMA_Init+0x1d8>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d022      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a59      	ldr	r2, [pc, #356]	; (8001a3c <HAL_DMA_Init+0x1dc>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d01d      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a57      	ldr	r2, [pc, #348]	; (8001a40 <HAL_DMA_Init+0x1e0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d018      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_DMA_Init+0x1e4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d013      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_DMA_Init+0x1e8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00e      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a53      	ldr	r2, [pc, #332]	; (8001a4c <HAL_DMA_Init+0x1ec>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d009      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a51      	ldr	r2, [pc, #324]	; (8001a50 <HAL_DMA_Init+0x1f0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d004      	beq.n	8001918 <HAL_DMA_Init+0xb8>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a50      	ldr	r2, [pc, #320]	; (8001a54 <HAL_DMA_Init+0x1f4>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_DMA_Init+0xbc>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_DMA_Init+0xbe>
 800191c:	2300      	movs	r3, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 813b 	beq.w	8001b9a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2202      	movs	r2, #2
 8001928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a37      	ldr	r2, [pc, #220]	; (8001a18 <HAL_DMA_Init+0x1b8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d04a      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a36      	ldr	r2, [pc, #216]	; (8001a1c <HAL_DMA_Init+0x1bc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d045      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a34      	ldr	r2, [pc, #208]	; (8001a20 <HAL_DMA_Init+0x1c0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d040      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a33      	ldr	r2, [pc, #204]	; (8001a24 <HAL_DMA_Init+0x1c4>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d03b      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a31      	ldr	r2, [pc, #196]	; (8001a28 <HAL_DMA_Init+0x1c8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d036      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <HAL_DMA_Init+0x1cc>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d031      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a2e      	ldr	r2, [pc, #184]	; (8001a30 <HAL_DMA_Init+0x1d0>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d02c      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2d      	ldr	r2, [pc, #180]	; (8001a34 <HAL_DMA_Init+0x1d4>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d027      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2b      	ldr	r2, [pc, #172]	; (8001a38 <HAL_DMA_Init+0x1d8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d022      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_DMA_Init+0x1dc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d01d      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_DMA_Init+0x1e0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d018      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a27      	ldr	r2, [pc, #156]	; (8001a44 <HAL_DMA_Init+0x1e4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a25      	ldr	r2, [pc, #148]	; (8001a48 <HAL_DMA_Init+0x1e8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00e      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a24      	ldr	r2, [pc, #144]	; (8001a4c <HAL_DMA_Init+0x1ec>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d009      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a22      	ldr	r2, [pc, #136]	; (8001a50 <HAL_DMA_Init+0x1f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d004      	beq.n	80019d4 <HAL_DMA_Init+0x174>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <HAL_DMA_Init+0x1f4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d108      	bne.n	80019e6 <HAL_DMA_Init+0x186>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_DMA_Init+0x196>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0201 	bic.w	r2, r2, #1
 80019f4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019f6:	e02f      	b.n	8001a58 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f8:	f7ff fdd2 	bl	80015a0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d928      	bls.n	8001a58 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e246      	b.n	8001ea6 <HAL_DMA_Init+0x646>
 8001a18:	40020010 	.word	0x40020010
 8001a1c:	40020028 	.word	0x40020028
 8001a20:	40020040 	.word	0x40020040
 8001a24:	40020058 	.word	0x40020058
 8001a28:	40020070 	.word	0x40020070
 8001a2c:	40020088 	.word	0x40020088
 8001a30:	400200a0 	.word	0x400200a0
 8001a34:	400200b8 	.word	0x400200b8
 8001a38:	40020410 	.word	0x40020410
 8001a3c:	40020428 	.word	0x40020428
 8001a40:	40020440 	.word	0x40020440
 8001a44:	40020458 	.word	0x40020458
 8001a48:	40020470 	.word	0x40020470
 8001a4c:	40020488 	.word	0x40020488
 8001a50:	400204a0 	.word	0x400204a0
 8001a54:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1c8      	bne.n	80019f8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4b83      	ldr	r3, [pc, #524]	; (8001c80 <HAL_DMA_Init+0x420>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a7e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a8a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a96:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d107      	bne.n	8001abc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001abc:	4b71      	ldr	r3, [pc, #452]	; (8001c84 <HAL_DMA_Init+0x424>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b71      	ldr	r3, [pc, #452]	; (8001c88 <HAL_DMA_Init+0x428>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ac8:	d328      	bcc.n	8001b1c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b28      	cmp	r3, #40	; 0x28
 8001ad0:	d903      	bls.n	8001ada <HAL_DMA_Init+0x27a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b2e      	cmp	r3, #46	; 0x2e
 8001ad8:	d917      	bls.n	8001b0a <HAL_DMA_Init+0x2aa>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b3e      	cmp	r3, #62	; 0x3e
 8001ae0:	d903      	bls.n	8001aea <HAL_DMA_Init+0x28a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b42      	cmp	r3, #66	; 0x42
 8001ae8:	d90f      	bls.n	8001b0a <HAL_DMA_Init+0x2aa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b46      	cmp	r3, #70	; 0x46
 8001af0:	d903      	bls.n	8001afa <HAL_DMA_Init+0x29a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b48      	cmp	r3, #72	; 0x48
 8001af8:	d907      	bls.n	8001b0a <HAL_DMA_Init+0x2aa>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b4e      	cmp	r3, #78	; 0x4e
 8001b00:	d905      	bls.n	8001b0e <HAL_DMA_Init+0x2ae>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b52      	cmp	r3, #82	; 0x52
 8001b08:	d801      	bhi.n	8001b0e <HAL_DMA_Init+0x2ae>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_DMA_Init+0x2b0>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b1a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f023 0307 	bic.w	r3, r3, #7
 8001b32:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d117      	bne.n	8001b76 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f002 f821 	bl	8003ba0 <DMA_CheckFifoParam>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2240      	movs	r2, #64	; 0x40
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e197      	b.n	8001ea6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f001 ff5c 	bl	8003a3c <DMA_CalcBaseAndBitshift>
 8001b84:	4603      	mov	r3, r0
 8001b86:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e0cd      	b.n	8001d36 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a3b      	ldr	r2, [pc, #236]	; (8001c8c <HAL_DMA_Init+0x42c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d022      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a39      	ldr	r2, [pc, #228]	; (8001c90 <HAL_DMA_Init+0x430>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01d      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a38      	ldr	r2, [pc, #224]	; (8001c94 <HAL_DMA_Init+0x434>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d018      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a36      	ldr	r2, [pc, #216]	; (8001c98 <HAL_DMA_Init+0x438>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d013      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a35      	ldr	r2, [pc, #212]	; (8001c9c <HAL_DMA_Init+0x43c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d00e      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <HAL_DMA_Init+0x440>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d009      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a32      	ldr	r2, [pc, #200]	; (8001ca4 <HAL_DMA_Init+0x444>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d004      	beq.n	8001bea <HAL_DMA_Init+0x38a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a30      	ldr	r2, [pc, #192]	; (8001ca8 <HAL_DMA_Init+0x448>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_DMA_Init+0x38e>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_DMA_Init+0x390>
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 8097 	beq.w	8001d24 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a24      	ldr	r2, [pc, #144]	; (8001c8c <HAL_DMA_Init+0x42c>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d021      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a22      	ldr	r2, [pc, #136]	; (8001c90 <HAL_DMA_Init+0x430>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01c      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <HAL_DMA_Init+0x434>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d017      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a1f      	ldr	r2, [pc, #124]	; (8001c98 <HAL_DMA_Init+0x438>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d012      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_DMA_Init+0x43c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d00d      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1c      	ldr	r2, [pc, #112]	; (8001ca0 <HAL_DMA_Init+0x440>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d008      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1b      	ldr	r2, [pc, #108]	; (8001ca4 <HAL_DMA_Init+0x444>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d003      	beq.n	8001c44 <HAL_DMA_Init+0x3e4>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_DMA_Init+0x448>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_DMA_Init+0x44c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	2b40      	cmp	r3, #64	; 0x40
 8001c6c:	d020      	beq.n	8001cb0 <HAL_DMA_Init+0x450>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b80      	cmp	r3, #128	; 0x80
 8001c74:	d102      	bne.n	8001c7c <HAL_DMA_Init+0x41c>
 8001c76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c7a:	e01a      	b.n	8001cb2 <HAL_DMA_Init+0x452>
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e018      	b.n	8001cb2 <HAL_DMA_Init+0x452>
 8001c80:	fe10803f 	.word	0xfe10803f
 8001c84:	5c001000 	.word	0x5c001000
 8001c88:	ffff0000 	.word	0xffff0000
 8001c8c:	58025408 	.word	0x58025408
 8001c90:	5802541c 	.word	0x5802541c
 8001c94:	58025430 	.word	0x58025430
 8001c98:	58025444 	.word	0x58025444
 8001c9c:	58025458 	.word	0x58025458
 8001ca0:	5802546c 	.word	0x5802546c
 8001ca4:	58025480 	.word	0x58025480
 8001ca8:	58025494 	.word	0x58025494
 8001cac:	fffe000f 	.word	0xfffe000f
 8001cb0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001ce0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b6e      	ldr	r3, [pc, #440]	; (8001eb0 <HAL_DMA_Init+0x650>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_DMA_Init+0x654>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	009a      	lsls	r2, r3, #2
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 fe97 	bl	8003a3c <DMA_CalcBaseAndBitshift>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d16:	f003 031f 	and.w	r3, r3, #31
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	e008      	b.n	8001d36 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e0b7      	b.n	8001ea6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a5f      	ldr	r2, [pc, #380]	; (8001eb8 <HAL_DMA_Init+0x658>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d072      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <HAL_DMA_Init+0x65c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d06d      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5c      	ldr	r2, [pc, #368]	; (8001ec0 <HAL_DMA_Init+0x660>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d068      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5a      	ldr	r2, [pc, #360]	; (8001ec4 <HAL_DMA_Init+0x664>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d063      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a59      	ldr	r2, [pc, #356]	; (8001ec8 <HAL_DMA_Init+0x668>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d05e      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	; (8001ecc <HAL_DMA_Init+0x66c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d059      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a56      	ldr	r2, [pc, #344]	; (8001ed0 <HAL_DMA_Init+0x670>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d054      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a54      	ldr	r2, [pc, #336]	; (8001ed4 <HAL_DMA_Init+0x674>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d04f      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a53      	ldr	r2, [pc, #332]	; (8001ed8 <HAL_DMA_Init+0x678>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d04a      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a51      	ldr	r2, [pc, #324]	; (8001edc <HAL_DMA_Init+0x67c>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d045      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_DMA_Init+0x680>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d040      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <HAL_DMA_Init+0x684>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d03b      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a4d      	ldr	r2, [pc, #308]	; (8001ee8 <HAL_DMA_Init+0x688>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d036      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <HAL_DMA_Init+0x68c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d031      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a4a      	ldr	r2, [pc, #296]	; (8001ef0 <HAL_DMA_Init+0x690>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d02c      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a48      	ldr	r2, [pc, #288]	; (8001ef4 <HAL_DMA_Init+0x694>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d027      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a47      	ldr	r2, [pc, #284]	; (8001ef8 <HAL_DMA_Init+0x698>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d022      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_DMA_Init+0x69c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01d      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a44      	ldr	r2, [pc, #272]	; (8001f00 <HAL_DMA_Init+0x6a0>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a42      	ldr	r2, [pc, #264]	; (8001f04 <HAL_DMA_Init+0x6a4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a41      	ldr	r2, [pc, #260]	; (8001f08 <HAL_DMA_Init+0x6a8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d00e      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3f      	ldr	r2, [pc, #252]	; (8001f0c <HAL_DMA_Init+0x6ac>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d009      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a3e      	ldr	r2, [pc, #248]	; (8001f10 <HAL_DMA_Init+0x6b0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_Init+0x5c6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a3c      	ldr	r2, [pc, #240]	; (8001f14 <HAL_DMA_Init+0x6b4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_DMA_Init+0x5ca>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_DMA_Init+0x5cc>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d032      	beq.n	8001e96 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f001 ff31 	bl	8003c98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d102      	bne.n	8001e44 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e58:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d010      	beq.n	8001e84 <HAL_DMA_Init+0x624>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d80c      	bhi.n	8001e84 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f001 ffae 	bl	8003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e80:	605a      	str	r2, [r3, #4]
 8001e82:	e008      	b.n	8001e96 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	a7fdabf8 	.word	0xa7fdabf8
 8001eb4:	cccccccd 	.word	0xcccccccd
 8001eb8:	40020010 	.word	0x40020010
 8001ebc:	40020028 	.word	0x40020028
 8001ec0:	40020040 	.word	0x40020040
 8001ec4:	40020058 	.word	0x40020058
 8001ec8:	40020070 	.word	0x40020070
 8001ecc:	40020088 	.word	0x40020088
 8001ed0:	400200a0 	.word	0x400200a0
 8001ed4:	400200b8 	.word	0x400200b8
 8001ed8:	40020410 	.word	0x40020410
 8001edc:	40020428 	.word	0x40020428
 8001ee0:	40020440 	.word	0x40020440
 8001ee4:	40020458 	.word	0x40020458
 8001ee8:	40020470 	.word	0x40020470
 8001eec:	40020488 	.word	0x40020488
 8001ef0:	400204a0 	.word	0x400204a0
 8001ef4:	400204b8 	.word	0x400204b8
 8001ef8:	58025408 	.word	0x58025408
 8001efc:	5802541c 	.word	0x5802541c
 8001f00:	58025430 	.word	0x58025430
 8001f04:	58025444 	.word	0x58025444
 8001f08:	58025458 	.word	0x58025458
 8001f0c:	5802546c 	.word	0x5802546c
 8001f10:	58025480 	.word	0x58025480
 8001f14:	58025494 	.word	0x58025494

08001f18 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e226      	b.n	8002382 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d101      	bne.n	8001f42 <HAL_DMA_Start_IT+0x2a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e21f      	b.n	8002382 <HAL_DMA_Start_IT+0x46a>
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	f040 820a 	bne.w	800236c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a68      	ldr	r2, [pc, #416]	; (800210c <HAL_DMA_Start_IT+0x1f4>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04a      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a66      	ldr	r2, [pc, #408]	; (8002110 <HAL_DMA_Start_IT+0x1f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a65      	ldr	r2, [pc, #404]	; (8002114 <HAL_DMA_Start_IT+0x1fc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d040      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a63      	ldr	r2, [pc, #396]	; (8002118 <HAL_DMA_Start_IT+0x200>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03b      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a62      	ldr	r2, [pc, #392]	; (800211c <HAL_DMA_Start_IT+0x204>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a60      	ldr	r2, [pc, #384]	; (8002120 <HAL_DMA_Start_IT+0x208>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <HAL_DMA_Start_IT+0x20c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a5d      	ldr	r2, [pc, #372]	; (8002128 <HAL_DMA_Start_IT+0x210>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a5c      	ldr	r2, [pc, #368]	; (800212c <HAL_DMA_Start_IT+0x214>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_DMA_Start_IT+0x218>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a59      	ldr	r2, [pc, #356]	; (8002134 <HAL_DMA_Start_IT+0x21c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_DMA_Start_IT+0x220>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_DMA_Start_IT+0x224>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a54      	ldr	r2, [pc, #336]	; (8002140 <HAL_DMA_Start_IT+0x228>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a53      	ldr	r2, [pc, #332]	; (8002144 <HAL_DMA_Start_IT+0x22c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_Start_IT+0xee>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a51      	ldr	r2, [pc, #324]	; (8002148 <HAL_DMA_Start_IT+0x230>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <HAL_DMA_Start_IT+0x100>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e007      	b.n	8002028 <HAL_DMA_Start_IT+0x110>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f001 fb58 	bl	80036e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a34      	ldr	r2, [pc, #208]	; (800210c <HAL_DMA_Start_IT+0x1f4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d04a      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a33      	ldr	r2, [pc, #204]	; (8002110 <HAL_DMA_Start_IT+0x1f8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d045      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a31      	ldr	r2, [pc, #196]	; (8002114 <HAL_DMA_Start_IT+0x1fc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d040      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a30      	ldr	r2, [pc, #192]	; (8002118 <HAL_DMA_Start_IT+0x200>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d03b      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a2e      	ldr	r2, [pc, #184]	; (800211c <HAL_DMA_Start_IT+0x204>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d036      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <HAL_DMA_Start_IT+0x208>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d031      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a2b      	ldr	r2, [pc, #172]	; (8002124 <HAL_DMA_Start_IT+0x20c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02c      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a2a      	ldr	r2, [pc, #168]	; (8002128 <HAL_DMA_Start_IT+0x210>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d027      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a28      	ldr	r2, [pc, #160]	; (800212c <HAL_DMA_Start_IT+0x214>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d022      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a27      	ldr	r2, [pc, #156]	; (8002130 <HAL_DMA_Start_IT+0x218>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d01d      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a25      	ldr	r2, [pc, #148]	; (8002134 <HAL_DMA_Start_IT+0x21c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d018      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_DMA_Start_IT+0x220>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d013      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a22      	ldr	r2, [pc, #136]	; (800213c <HAL_DMA_Start_IT+0x224>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00e      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a21      	ldr	r2, [pc, #132]	; (8002140 <HAL_DMA_Start_IT+0x228>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d009      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a1f      	ldr	r2, [pc, #124]	; (8002144 <HAL_DMA_Start_IT+0x22c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d004      	beq.n	80020d4 <HAL_DMA_Start_IT+0x1bc>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a1e      	ldr	r2, [pc, #120]	; (8002148 <HAL_DMA_Start_IT+0x230>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d101      	bne.n	80020d8 <HAL_DMA_Start_IT+0x1c0>
 80020d4:	2301      	movs	r3, #1
 80020d6:	e000      	b.n	80020da <HAL_DMA_Start_IT+0x1c2>
 80020d8:	2300      	movs	r3, #0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d036      	beq.n	800214c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f023 021e 	bic.w	r2, r3, #30
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f042 0216 	orr.w	r2, r2, #22
 80020f0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03e      	beq.n	8002178 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0208 	orr.w	r2, r2, #8
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	e035      	b.n	8002178 <HAL_DMA_Start_IT+0x260>
 800210c:	40020010 	.word	0x40020010
 8002110:	40020028 	.word	0x40020028
 8002114:	40020040 	.word	0x40020040
 8002118:	40020058 	.word	0x40020058
 800211c:	40020070 	.word	0x40020070
 8002120:	40020088 	.word	0x40020088
 8002124:	400200a0 	.word	0x400200a0
 8002128:	400200b8 	.word	0x400200b8
 800212c:	40020410 	.word	0x40020410
 8002130:	40020428 	.word	0x40020428
 8002134:	40020440 	.word	0x40020440
 8002138:	40020458 	.word	0x40020458
 800213c:	40020470 	.word	0x40020470
 8002140:	40020488 	.word	0x40020488
 8002144:	400204a0 	.word	0x400204a0
 8002148:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 020e 	bic.w	r2, r3, #14
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 020a 	orr.w	r2, r2, #10
 800215e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	2b00      	cmp	r3, #0
 8002166:	d007      	beq.n	8002178 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 0204 	orr.w	r2, r2, #4
 8002176:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a83      	ldr	r2, [pc, #524]	; (800238c <HAL_DMA_Start_IT+0x474>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d072      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a82      	ldr	r2, [pc, #520]	; (8002390 <HAL_DMA_Start_IT+0x478>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d06d      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a80      	ldr	r2, [pc, #512]	; (8002394 <HAL_DMA_Start_IT+0x47c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d068      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7f      	ldr	r2, [pc, #508]	; (8002398 <HAL_DMA_Start_IT+0x480>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d063      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a7d      	ldr	r2, [pc, #500]	; (800239c <HAL_DMA_Start_IT+0x484>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d05e      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7c      	ldr	r2, [pc, #496]	; (80023a0 <HAL_DMA_Start_IT+0x488>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d059      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a7a      	ldr	r2, [pc, #488]	; (80023a4 <HAL_DMA_Start_IT+0x48c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d054      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a79      	ldr	r2, [pc, #484]	; (80023a8 <HAL_DMA_Start_IT+0x490>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d04f      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a77      	ldr	r2, [pc, #476]	; (80023ac <HAL_DMA_Start_IT+0x494>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d04a      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a76      	ldr	r2, [pc, #472]	; (80023b0 <HAL_DMA_Start_IT+0x498>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d045      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a74      	ldr	r2, [pc, #464]	; (80023b4 <HAL_DMA_Start_IT+0x49c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d040      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a73      	ldr	r2, [pc, #460]	; (80023b8 <HAL_DMA_Start_IT+0x4a0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d03b      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a71      	ldr	r2, [pc, #452]	; (80023bc <HAL_DMA_Start_IT+0x4a4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d036      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a70      	ldr	r2, [pc, #448]	; (80023c0 <HAL_DMA_Start_IT+0x4a8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d031      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a6e      	ldr	r2, [pc, #440]	; (80023c4 <HAL_DMA_Start_IT+0x4ac>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d02c      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6d      	ldr	r2, [pc, #436]	; (80023c8 <HAL_DMA_Start_IT+0x4b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d027      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a6b      	ldr	r2, [pc, #428]	; (80023cc <HAL_DMA_Start_IT+0x4b4>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d022      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a6a      	ldr	r2, [pc, #424]	; (80023d0 <HAL_DMA_Start_IT+0x4b8>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d01d      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a68      	ldr	r2, [pc, #416]	; (80023d4 <HAL_DMA_Start_IT+0x4bc>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d018      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a67      	ldr	r2, [pc, #412]	; (80023d8 <HAL_DMA_Start_IT+0x4c0>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d013      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_DMA_Start_IT+0x4c4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d00e      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a64      	ldr	r2, [pc, #400]	; (80023e0 <HAL_DMA_Start_IT+0x4c8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a62      	ldr	r2, [pc, #392]	; (80023e4 <HAL_DMA_Start_IT+0x4cc>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d004      	beq.n	8002268 <HAL_DMA_Start_IT+0x350>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a61      	ldr	r2, [pc, #388]	; (80023e8 <HAL_DMA_Start_IT+0x4d0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_DMA_Start_IT+0x354>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_DMA_Start_IT+0x356>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01a      	beq.n	80022a8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d007      	beq.n	8002290 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a37      	ldr	r2, [pc, #220]	; (800238c <HAL_DMA_Start_IT+0x474>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a36      	ldr	r2, [pc, #216]	; (8002390 <HAL_DMA_Start_IT+0x478>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a34      	ldr	r2, [pc, #208]	; (8002394 <HAL_DMA_Start_IT+0x47c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a33      	ldr	r2, [pc, #204]	; (8002398 <HAL_DMA_Start_IT+0x480>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a31      	ldr	r2, [pc, #196]	; (800239c <HAL_DMA_Start_IT+0x484>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a30      	ldr	r2, [pc, #192]	; (80023a0 <HAL_DMA_Start_IT+0x488>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2e      	ldr	r2, [pc, #184]	; (80023a4 <HAL_DMA_Start_IT+0x48c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2d      	ldr	r2, [pc, #180]	; (80023a8 <HAL_DMA_Start_IT+0x490>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <HAL_DMA_Start_IT+0x494>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <HAL_DMA_Start_IT+0x498>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a28      	ldr	r2, [pc, #160]	; (80023b4 <HAL_DMA_Start_IT+0x49c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <HAL_DMA_Start_IT+0x4a0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a25      	ldr	r2, [pc, #148]	; (80023bc <HAL_DMA_Start_IT+0x4a4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <HAL_DMA_Start_IT+0x4a8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a22      	ldr	r2, [pc, #136]	; (80023c4 <HAL_DMA_Start_IT+0x4ac>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Start_IT+0x430>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a21      	ldr	r2, [pc, #132]	; (80023c8 <HAL_DMA_Start_IT+0x4b0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <HAL_DMA_Start_IT+0x442>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e012      	b.n	8002380 <HAL_DMA_Start_IT+0x468>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e009      	b.n	8002380 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002380:	7dfb      	ldrb	r3, [r7, #23]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3718      	adds	r7, #24
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
 80023cc:	58025408 	.word	0x58025408
 80023d0:	5802541c 	.word	0x5802541c
 80023d4:	58025430 	.word	0x58025430
 80023d8:	58025444 	.word	0x58025444
 80023dc:	58025458 	.word	0x58025458
 80023e0:	5802546c 	.word	0x5802546c
 80023e4:	58025480 	.word	0x58025480
 80023e8:	58025494 	.word	0x58025494

080023ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e237      	b.n	800286e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d004      	beq.n	8002414 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e22c      	b.n	800286e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a5c      	ldr	r2, [pc, #368]	; (800258c <HAL_DMA_Abort_IT+0x1a0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d04a      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <HAL_DMA_Abort_IT+0x1a4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d045      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a59      	ldr	r2, [pc, #356]	; (8002594 <HAL_DMA_Abort_IT+0x1a8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d040      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a58      	ldr	r2, [pc, #352]	; (8002598 <HAL_DMA_Abort_IT+0x1ac>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d03b      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a56      	ldr	r2, [pc, #344]	; (800259c <HAL_DMA_Abort_IT+0x1b0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d036      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a55      	ldr	r2, [pc, #340]	; (80025a0 <HAL_DMA_Abort_IT+0x1b4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d031      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a53      	ldr	r2, [pc, #332]	; (80025a4 <HAL_DMA_Abort_IT+0x1b8>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d02c      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a52      	ldr	r2, [pc, #328]	; (80025a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d027      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a50      	ldr	r2, [pc, #320]	; (80025ac <HAL_DMA_Abort_IT+0x1c0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d022      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a4f      	ldr	r2, [pc, #316]	; (80025b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d01d      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_DMA_Abort_IT+0x1c8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d018      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_DMA_Abort_IT+0x1cc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_DMA_Abort_IT+0x1d0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d00e      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_DMA_Abort_IT+0x1d4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d009      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a47      	ldr	r2, [pc, #284]	; (80025c4 <HAL_DMA_Abort_IT+0x1d8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d004      	beq.n	80024b4 <HAL_DMA_Abort_IT+0xc8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a46      	ldr	r2, [pc, #280]	; (80025c8 <HAL_DMA_Abort_IT+0x1dc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_DMA_Abort_IT+0xcc>
 80024b4:	2301      	movs	r3, #1
 80024b6:	e000      	b.n	80024ba <HAL_DMA_Abort_IT+0xce>
 80024b8:	2300      	movs	r3, #0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8086 	beq.w	80025cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2204      	movs	r2, #4
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a2f      	ldr	r2, [pc, #188]	; (800258c <HAL_DMA_Abort_IT+0x1a0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d04a      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2e      	ldr	r2, [pc, #184]	; (8002590 <HAL_DMA_Abort_IT+0x1a4>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d045      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <HAL_DMA_Abort_IT+0x1a8>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d040      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <HAL_DMA_Abort_IT+0x1ac>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d03b      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a29      	ldr	r2, [pc, #164]	; (800259c <HAL_DMA_Abort_IT+0x1b0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d036      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a28      	ldr	r2, [pc, #160]	; (80025a0 <HAL_DMA_Abort_IT+0x1b4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d031      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a26      	ldr	r2, [pc, #152]	; (80025a4 <HAL_DMA_Abort_IT+0x1b8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02c      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <HAL_DMA_Abort_IT+0x1bc>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d027      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a23      	ldr	r2, [pc, #140]	; (80025ac <HAL_DMA_Abort_IT+0x1c0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d022      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <HAL_DMA_Abort_IT+0x1c4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d01d      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a20      	ldr	r2, [pc, #128]	; (80025b4 <HAL_DMA_Abort_IT+0x1c8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d018      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a1f      	ldr	r2, [pc, #124]	; (80025b8 <HAL_DMA_Abort_IT+0x1cc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d013      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_DMA_Abort_IT+0x1d0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d00e      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_DMA_Abort_IT+0x1d4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1a      	ldr	r2, [pc, #104]	; (80025c4 <HAL_DMA_Abort_IT+0x1d8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d004      	beq.n	8002568 <HAL_DMA_Abort_IT+0x17c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a19      	ldr	r2, [pc, #100]	; (80025c8 <HAL_DMA_Abort_IT+0x1dc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d108      	bne.n	800257a <HAL_DMA_Abort_IT+0x18e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0201 	bic.w	r2, r2, #1
 8002576:	601a      	str	r2, [r3, #0]
 8002578:	e178      	b.n	800286c <HAL_DMA_Abort_IT+0x480>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0201 	bic.w	r2, r2, #1
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	e16f      	b.n	800286c <HAL_DMA_Abort_IT+0x480>
 800258c:	40020010 	.word	0x40020010
 8002590:	40020028 	.word	0x40020028
 8002594:	40020040 	.word	0x40020040
 8002598:	40020058 	.word	0x40020058
 800259c:	40020070 	.word	0x40020070
 80025a0:	40020088 	.word	0x40020088
 80025a4:	400200a0 	.word	0x400200a0
 80025a8:	400200b8 	.word	0x400200b8
 80025ac:	40020410 	.word	0x40020410
 80025b0:	40020428 	.word	0x40020428
 80025b4:	40020440 	.word	0x40020440
 80025b8:	40020458 	.word	0x40020458
 80025bc:	40020470 	.word	0x40020470
 80025c0:	40020488 	.word	0x40020488
 80025c4:	400204a0 	.word	0x400204a0
 80025c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 020e 	bic.w	r2, r2, #14
 80025da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a6c      	ldr	r2, [pc, #432]	; (8002794 <HAL_DMA_Abort_IT+0x3a8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d04a      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a6b      	ldr	r2, [pc, #428]	; (8002798 <HAL_DMA_Abort_IT+0x3ac>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d045      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_DMA_Abort_IT+0x3b0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d040      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a68      	ldr	r2, [pc, #416]	; (80027a0 <HAL_DMA_Abort_IT+0x3b4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d03b      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a66      	ldr	r2, [pc, #408]	; (80027a4 <HAL_DMA_Abort_IT+0x3b8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d036      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a65      	ldr	r2, [pc, #404]	; (80027a8 <HAL_DMA_Abort_IT+0x3bc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d031      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a63      	ldr	r2, [pc, #396]	; (80027ac <HAL_DMA_Abort_IT+0x3c0>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d02c      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a62      	ldr	r2, [pc, #392]	; (80027b0 <HAL_DMA_Abort_IT+0x3c4>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d027      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a60      	ldr	r2, [pc, #384]	; (80027b4 <HAL_DMA_Abort_IT+0x3c8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d022      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a5f      	ldr	r2, [pc, #380]	; (80027b8 <HAL_DMA_Abort_IT+0x3cc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d01d      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a5d      	ldr	r2, [pc, #372]	; (80027bc <HAL_DMA_Abort_IT+0x3d0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d018      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a5c      	ldr	r2, [pc, #368]	; (80027c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d013      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a5a      	ldr	r2, [pc, #360]	; (80027c4 <HAL_DMA_Abort_IT+0x3d8>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00e      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a59      	ldr	r2, [pc, #356]	; (80027c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d009      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a57      	ldr	r2, [pc, #348]	; (80027cc <HAL_DMA_Abort_IT+0x3e0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <HAL_DMA_Abort_IT+0x290>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a56      	ldr	r2, [pc, #344]	; (80027d0 <HAL_DMA_Abort_IT+0x3e4>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d108      	bne.n	800268e <HAL_DMA_Abort_IT+0x2a2>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e007      	b.n	800269e <HAL_DMA_Abort_IT+0x2b2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3c      	ldr	r2, [pc, #240]	; (8002794 <HAL_DMA_Abort_IT+0x3a8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d072      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a3a      	ldr	r2, [pc, #232]	; (8002798 <HAL_DMA_Abort_IT+0x3ac>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d06d      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a39      	ldr	r2, [pc, #228]	; (800279c <HAL_DMA_Abort_IT+0x3b0>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d068      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a37      	ldr	r2, [pc, #220]	; (80027a0 <HAL_DMA_Abort_IT+0x3b4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d063      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a36      	ldr	r2, [pc, #216]	; (80027a4 <HAL_DMA_Abort_IT+0x3b8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d05e      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a34      	ldr	r2, [pc, #208]	; (80027a8 <HAL_DMA_Abort_IT+0x3bc>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d059      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a33      	ldr	r2, [pc, #204]	; (80027ac <HAL_DMA_Abort_IT+0x3c0>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d054      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a31      	ldr	r2, [pc, #196]	; (80027b0 <HAL_DMA_Abort_IT+0x3c4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d04f      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a30      	ldr	r2, [pc, #192]	; (80027b4 <HAL_DMA_Abort_IT+0x3c8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d04a      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a2e      	ldr	r2, [pc, #184]	; (80027b8 <HAL_DMA_Abort_IT+0x3cc>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d045      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a2d      	ldr	r2, [pc, #180]	; (80027bc <HAL_DMA_Abort_IT+0x3d0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d040      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a2b      	ldr	r2, [pc, #172]	; (80027c0 <HAL_DMA_Abort_IT+0x3d4>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d03b      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2a      	ldr	r2, [pc, #168]	; (80027c4 <HAL_DMA_Abort_IT+0x3d8>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d036      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a28      	ldr	r2, [pc, #160]	; (80027c8 <HAL_DMA_Abort_IT+0x3dc>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d031      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a27      	ldr	r2, [pc, #156]	; (80027cc <HAL_DMA_Abort_IT+0x3e0>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d02c      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <HAL_DMA_Abort_IT+0x3e4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d027      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a24      	ldr	r2, [pc, #144]	; (80027d4 <HAL_DMA_Abort_IT+0x3e8>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d022      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a22      	ldr	r2, [pc, #136]	; (80027d8 <HAL_DMA_Abort_IT+0x3ec>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a21      	ldr	r2, [pc, #132]	; (80027dc <HAL_DMA_Abort_IT+0x3f0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1f      	ldr	r2, [pc, #124]	; (80027e0 <HAL_DMA_Abort_IT+0x3f4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_DMA_Abort_IT+0x3f8>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00e      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_DMA_Abort_IT+0x3fc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1b      	ldr	r2, [pc, #108]	; (80027ec <HAL_DMA_Abort_IT+0x400>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_DMA_Abort_IT+0x3a2>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_DMA_Abort_IT+0x404>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d132      	bne.n	80027f4 <HAL_DMA_Abort_IT+0x408>
 800278e:	2301      	movs	r3, #1
 8002790:	e031      	b.n	80027f6 <HAL_DMA_Abort_IT+0x40a>
 8002792:	bf00      	nop
 8002794:	40020010 	.word	0x40020010
 8002798:	40020028 	.word	0x40020028
 800279c:	40020040 	.word	0x40020040
 80027a0:	40020058 	.word	0x40020058
 80027a4:	40020070 	.word	0x40020070
 80027a8:	40020088 	.word	0x40020088
 80027ac:	400200a0 	.word	0x400200a0
 80027b0:	400200b8 	.word	0x400200b8
 80027b4:	40020410 	.word	0x40020410
 80027b8:	40020428 	.word	0x40020428
 80027bc:	40020440 	.word	0x40020440
 80027c0:	40020458 	.word	0x40020458
 80027c4:	40020470 	.word	0x40020470
 80027c8:	40020488 	.word	0x40020488
 80027cc:	400204a0 	.word	0x400204a0
 80027d0:	400204b8 	.word	0x400204b8
 80027d4:	58025408 	.word	0x58025408
 80027d8:	5802541c 	.word	0x5802541c
 80027dc:	58025430 	.word	0x58025430
 80027e0:	58025444 	.word	0x58025444
 80027e4:	58025458 	.word	0x58025458
 80027e8:	5802546c 	.word	0x5802546c
 80027ec:	58025480 	.word	0x58025480
 80027f0:	58025494 	.word	0x58025494
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d028      	beq.n	800284c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002808:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002814:	f003 031f 	and.w	r3, r3, #31
 8002818:	2201      	movs	r2, #1
 800281a:	409a      	lsls	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002828:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00c      	beq.n	800284c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800283c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002840:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800284a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop

08002878 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08a      	sub	sp, #40	; 0x28
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002884:	4b67      	ldr	r3, [pc, #412]	; (8002a24 <HAL_DMA_IRQHandler+0x1ac>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a67      	ldr	r2, [pc, #412]	; (8002a28 <HAL_DMA_IRQHandler+0x1b0>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0a9b      	lsrs	r3, r3, #10
 8002890:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002896:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a5f      	ldr	r2, [pc, #380]	; (8002a2c <HAL_DMA_IRQHandler+0x1b4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d04a      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <HAL_DMA_IRQHandler+0x1b8>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d045      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a5c      	ldr	r2, [pc, #368]	; (8002a34 <HAL_DMA_IRQHandler+0x1bc>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d040      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a5a      	ldr	r2, [pc, #360]	; (8002a38 <HAL_DMA_IRQHandler+0x1c0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d03b      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a59      	ldr	r2, [pc, #356]	; (8002a3c <HAL_DMA_IRQHandler+0x1c4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d036      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a57      	ldr	r2, [pc, #348]	; (8002a40 <HAL_DMA_IRQHandler+0x1c8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d031      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_DMA_IRQHandler+0x1cc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d02c      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a54      	ldr	r2, [pc, #336]	; (8002a48 <HAL_DMA_IRQHandler+0x1d0>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d027      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a53      	ldr	r2, [pc, #332]	; (8002a4c <HAL_DMA_IRQHandler+0x1d4>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d022      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_DMA_IRQHandler+0x1d8>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01d      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_DMA_IRQHandler+0x1dc>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d018      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a4e      	ldr	r2, [pc, #312]	; (8002a58 <HAL_DMA_IRQHandler+0x1e0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_DMA_IRQHandler+0x1e4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00e      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a4b      	ldr	r2, [pc, #300]	; (8002a60 <HAL_DMA_IRQHandler+0x1e8>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d009      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_DMA_IRQHandler+0x1ec>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d004      	beq.n	800294a <HAL_DMA_IRQHandler+0xd2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_DMA_IRQHandler+0x1f0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_DMA_IRQHandler+0xd6>
 800294a:	2301      	movs	r3, #1
 800294c:	e000      	b.n	8002950 <HAL_DMA_IRQHandler+0xd8>
 800294e:	2300      	movs	r3, #0
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 842b 	beq.w	80031ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2208      	movs	r2, #8
 8002960:	409a      	lsls	r2, r3
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80a2 	beq.w	8002ab0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a2e      	ldr	r2, [pc, #184]	; (8002a2c <HAL_DMA_IRQHandler+0x1b4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a2d      	ldr	r2, [pc, #180]	; (8002a30 <HAL_DMA_IRQHandler+0x1b8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d045      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <HAL_DMA_IRQHandler+0x1bc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a2a      	ldr	r2, [pc, #168]	; (8002a38 <HAL_DMA_IRQHandler+0x1c0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d03b      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a28      	ldr	r2, [pc, #160]	; (8002a3c <HAL_DMA_IRQHandler+0x1c4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <HAL_DMA_IRQHandler+0x1c8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d031      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <HAL_DMA_IRQHandler+0x1cc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a24      	ldr	r2, [pc, #144]	; (8002a48 <HAL_DMA_IRQHandler+0x1d0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d027      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_DMA_IRQHandler+0x1d4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a21      	ldr	r2, [pc, #132]	; (8002a50 <HAL_DMA_IRQHandler+0x1d8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_DMA_IRQHandler+0x1dc>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a1e      	ldr	r2, [pc, #120]	; (8002a58 <HAL_DMA_IRQHandler+0x1e0>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_DMA_IRQHandler+0x1e4>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a1b      	ldr	r2, [pc, #108]	; (8002a60 <HAL_DMA_IRQHandler+0x1e8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_DMA_IRQHandler+0x1ec>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x194>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <HAL_DMA_IRQHandler+0x1f0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d12f      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x1f4>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	e02e      	b.n	8002a80 <HAL_DMA_IRQHandler+0x208>
 8002a22:	bf00      	nop
 8002a24:	24000000 	.word	0x24000000
 8002a28:	1b4e81b5 	.word	0x1b4e81b5
 8002a2c:	40020010 	.word	0x40020010
 8002a30:	40020028 	.word	0x40020028
 8002a34:	40020040 	.word	0x40020040
 8002a38:	40020058 	.word	0x40020058
 8002a3c:	40020070 	.word	0x40020070
 8002a40:	40020088 	.word	0x40020088
 8002a44:	400200a0 	.word	0x400200a0
 8002a48:	400200b8 	.word	0x400200b8
 8002a4c:	40020410 	.word	0x40020410
 8002a50:	40020428 	.word	0x40020428
 8002a54:	40020440 	.word	0x40020440
 8002a58:	40020458 	.word	0x40020458
 8002a5c:	40020470 	.word	0x40020470
 8002a60:	40020488 	.word	0x40020488
 8002a64:	400204a0 	.word	0x400204a0
 8002a68:	400204b8 	.word	0x400204b8
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf14      	ite	ne
 8002a7a:	2301      	movne	r3, #1
 8002a7c:	2300      	moveq	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d015      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0204 	bic.w	r2, r2, #4
 8002a92:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a98:	f003 031f 	and.w	r3, r3, #31
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa8:	f043 0201 	orr.w	r2, r3, #1
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	fa22 f303 	lsr.w	r3, r2, r3
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06e      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a69      	ldr	r2, [pc, #420]	; (8002c70 <HAL_DMA_IRQHandler+0x3f8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d04a      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a67      	ldr	r2, [pc, #412]	; (8002c74 <HAL_DMA_IRQHandler+0x3fc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d045      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a66      	ldr	r2, [pc, #408]	; (8002c78 <HAL_DMA_IRQHandler+0x400>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d040      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a64      	ldr	r2, [pc, #400]	; (8002c7c <HAL_DMA_IRQHandler+0x404>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d03b      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a63      	ldr	r2, [pc, #396]	; (8002c80 <HAL_DMA_IRQHandler+0x408>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d036      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a61      	ldr	r2, [pc, #388]	; (8002c84 <HAL_DMA_IRQHandler+0x40c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d031      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a60      	ldr	r2, [pc, #384]	; (8002c88 <HAL_DMA_IRQHandler+0x410>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d02c      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a5e      	ldr	r2, [pc, #376]	; (8002c8c <HAL_DMA_IRQHandler+0x414>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d027      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a5d      	ldr	r2, [pc, #372]	; (8002c90 <HAL_DMA_IRQHandler+0x418>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d022      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a5b      	ldr	r2, [pc, #364]	; (8002c94 <HAL_DMA_IRQHandler+0x41c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d01d      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_DMA_IRQHandler+0x420>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d018      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_DMA_IRQHandler+0x424>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a57      	ldr	r2, [pc, #348]	; (8002ca0 <HAL_DMA_IRQHandler+0x428>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d00e      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a55      	ldr	r2, [pc, #340]	; (8002ca4 <HAL_DMA_IRQHandler+0x42c>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a54      	ldr	r2, [pc, #336]	; (8002ca8 <HAL_DMA_IRQHandler+0x430>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d004      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x2ee>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a52      	ldr	r2, [pc, #328]	; (8002cac <HAL_DMA_IRQHandler+0x434>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d10a      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x304>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	e003      	b.n	8002b84 <HAL_DMA_IRQHandler+0x30c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	2201      	movs	r2, #1
 8002b92:	409a      	lsls	r2, r3
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	f043 0202 	orr.w	r2, r3, #2
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba8:	f003 031f 	and.w	r3, r3, #31
 8002bac:	2204      	movs	r2, #4
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 808f 	beq.w	8002cd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_DMA_IRQHandler+0x3f8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d04a      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_DMA_IRQHandler+0x3fc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d045      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_DMA_IRQHandler+0x400>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d040      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <HAL_DMA_IRQHandler+0x404>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d03b      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_DMA_IRQHandler+0x408>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d036      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_DMA_IRQHandler+0x40c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d031      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <HAL_DMA_IRQHandler+0x410>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d02c      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_DMA_IRQHandler+0x414>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d027      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <HAL_DMA_IRQHandler+0x418>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d022      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_DMA_IRQHandler+0x41c>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d01d      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_DMA_IRQHandler+0x420>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d018      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_DMA_IRQHandler+0x424>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_DMA_IRQHandler+0x428>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_DMA_IRQHandler+0x42c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d009      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a17      	ldr	r2, [pc, #92]	; (8002ca8 <HAL_DMA_IRQHandler+0x430>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d004      	beq.n	8002c5a <HAL_DMA_IRQHandler+0x3e2>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_DMA_IRQHandler+0x434>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d12a      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x438>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e023      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x440>
 8002c70:	40020010 	.word	0x40020010
 8002c74:	40020028 	.word	0x40020028
 8002c78:	40020040 	.word	0x40020040
 8002c7c:	40020058 	.word	0x40020058
 8002c80:	40020070 	.word	0x40020070
 8002c84:	40020088 	.word	0x40020088
 8002c88:	400200a0 	.word	0x400200a0
 8002c8c:	400200b8 	.word	0x400200b8
 8002c90:	40020410 	.word	0x40020410
 8002c94:	40020428 	.word	0x40020428
 8002c98:	40020440 	.word	0x40020440
 8002c9c:	40020458 	.word	0x40020458
 8002ca0:	40020470 	.word	0x40020470
 8002ca4:	40020488 	.word	0x40020488
 8002ca8:	400204a0 	.word	0x400204a0
 8002cac:	400204b8 	.word	0x400204b8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00d      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc0:	f003 031f 	and.w	r3, r3, #31
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80a6 	beq.w	8002e3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a85      	ldr	r2, [pc, #532]	; (8002f08 <HAL_DMA_IRQHandler+0x690>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d04a      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <HAL_DMA_IRQHandler+0x694>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d045      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a82      	ldr	r2, [pc, #520]	; (8002f10 <HAL_DMA_IRQHandler+0x698>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d040      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a80      	ldr	r2, [pc, #512]	; (8002f14 <HAL_DMA_IRQHandler+0x69c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d03b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <HAL_DMA_IRQHandler+0x6a0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d036      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a7d      	ldr	r2, [pc, #500]	; (8002f1c <HAL_DMA_IRQHandler+0x6a4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d031      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a7c      	ldr	r2, [pc, #496]	; (8002f20 <HAL_DMA_IRQHandler+0x6a8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d02c      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a7a      	ldr	r2, [pc, #488]	; (8002f24 <HAL_DMA_IRQHandler+0x6ac>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d027      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a79      	ldr	r2, [pc, #484]	; (8002f28 <HAL_DMA_IRQHandler+0x6b0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a77      	ldr	r2, [pc, #476]	; (8002f2c <HAL_DMA_IRQHandler+0x6b4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d01d      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a76      	ldr	r2, [pc, #472]	; (8002f30 <HAL_DMA_IRQHandler+0x6b8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_DMA_IRQHandler+0x6bc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a73      	ldr	r2, [pc, #460]	; (8002f38 <HAL_DMA_IRQHandler+0x6c0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a71      	ldr	r2, [pc, #452]	; (8002f3c <HAL_DMA_IRQHandler+0x6c4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a70      	ldr	r2, [pc, #448]	; (8002f40 <HAL_DMA_IRQHandler+0x6c8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x516>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a6e      	ldr	r2, [pc, #440]	; (8002f44 <HAL_DMA_IRQHandler+0x6cc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10a      	bne.n	8002da4 <HAL_DMA_IRQHandler+0x52c>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf14      	ite	ne
 8002d9c:	2301      	movne	r3, #1
 8002d9e:	2300      	moveq	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	e009      	b.n	8002db8 <HAL_DMA_IRQHandler+0x540>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	bf14      	ite	ne
 8002db2:	2301      	movne	r3, #1
 8002db4:	2300      	moveq	r3, #0
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d03e      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	f003 031f 	and.w	r3, r3, #31
 8002dc4:	2210      	movs	r2, #16
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d018      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d108      	bne.n	8002dfa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d024      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
 8002df8:	e01f      	b.n	8002e3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01b      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4798      	blx	r3
 8002e0a:	e016      	b.n	8002e3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d107      	bne.n	8002e2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0208 	bic.w	r2, r2, #8
 8002e28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2220      	movs	r2, #32
 8002e44:	409a      	lsls	r2, r3
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8110 	beq.w	8003070 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2c      	ldr	r2, [pc, #176]	; (8002f08 <HAL_DMA_IRQHandler+0x690>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <HAL_DMA_IRQHandler+0x694>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d045      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <HAL_DMA_IRQHandler+0x698>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d040      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a28      	ldr	r2, [pc, #160]	; (8002f14 <HAL_DMA_IRQHandler+0x69c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_DMA_IRQHandler+0x6a0>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d036      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a25      	ldr	r2, [pc, #148]	; (8002f1c <HAL_DMA_IRQHandler+0x6a4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a23      	ldr	r2, [pc, #140]	; (8002f20 <HAL_DMA_IRQHandler+0x6a8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02c      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a22      	ldr	r2, [pc, #136]	; (8002f24 <HAL_DMA_IRQHandler+0x6ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d027      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a20      	ldr	r2, [pc, #128]	; (8002f28 <HAL_DMA_IRQHandler+0x6b0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <HAL_DMA_IRQHandler+0x6b4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <HAL_DMA_IRQHandler+0x6b8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1c      	ldr	r2, [pc, #112]	; (8002f34 <HAL_DMA_IRQHandler+0x6bc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <HAL_DMA_IRQHandler+0x6c0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_DMA_IRQHandler+0x6c4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <HAL_DMA_IRQHandler+0x6c8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x678>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a16      	ldr	r2, [pc, #88]	; (8002f44 <HAL_DMA_IRQHandler+0x6cc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d12b      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x6d0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e02a      	b.n	8002f5c <HAL_DMA_IRQHandler+0x6e4>
 8002f06:	bf00      	nop
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	bf14      	ite	ne
 8002f56:	2301      	movne	r3, #1
 8002f58:	2300      	moveq	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f000 8087 	beq.w	8003070 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d139      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0216 	bic.w	r2, r2, #22
 8002f8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	695a      	ldr	r2, [r3, #20]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d103      	bne.n	8002fae <HAL_DMA_IRQHandler+0x736>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0208 	bic.w	r2, r2, #8
 8002fbc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	f003 031f 	and.w	r3, r3, #31
 8002fc6:	223f      	movs	r2, #63	; 0x3f
 8002fc8:	409a      	lsls	r2, r3
 8002fca:	6a3b      	ldr	r3, [r7, #32]
 8002fcc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 834a 	beq.w	800367c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
          }
          return;
 8002ff0:	e344      	b.n	800367c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d018      	beq.n	8003032 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d108      	bne.n	8003020 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003012:	2b00      	cmp	r3, #0
 8003014:	d02c      	beq.n	8003070 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
 800301e:	e027      	b.n	8003070 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	2b00      	cmp	r3, #0
 8003026:	d023      	beq.n	8003070 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e01e      	b.n	8003070 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303c:	2b00      	cmp	r3, #0
 800303e:	d10f      	bne.n	8003060 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0210 	bic.w	r2, r2, #16
 800304e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8306 	beq.w	8003686 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 8088 	beq.w	8003198 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2204      	movs	r2, #4
 800308c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <HAL_DMA_IRQHandler+0xa08>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d04a      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a79      	ldr	r2, [pc, #484]	; (8003284 <HAL_DMA_IRQHandler+0xa0c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d045      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a77      	ldr	r2, [pc, #476]	; (8003288 <HAL_DMA_IRQHandler+0xa10>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d040      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a76      	ldr	r2, [pc, #472]	; (800328c <HAL_DMA_IRQHandler+0xa14>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d03b      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a74      	ldr	r2, [pc, #464]	; (8003290 <HAL_DMA_IRQHandler+0xa18>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d036      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	; (8003294 <HAL_DMA_IRQHandler+0xa1c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d031      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a71      	ldr	r2, [pc, #452]	; (8003298 <HAL_DMA_IRQHandler+0xa20>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d02c      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a70      	ldr	r2, [pc, #448]	; (800329c <HAL_DMA_IRQHandler+0xa24>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d027      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6e      	ldr	r2, [pc, #440]	; (80032a0 <HAL_DMA_IRQHandler+0xa28>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d022      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a6d      	ldr	r2, [pc, #436]	; (80032a4 <HAL_DMA_IRQHandler+0xa2c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d01d      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a6b      	ldr	r2, [pc, #428]	; (80032a8 <HAL_DMA_IRQHandler+0xa30>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d018      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a6a      	ldr	r2, [pc, #424]	; (80032ac <HAL_DMA_IRQHandler+0xa34>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d013      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a68      	ldr	r2, [pc, #416]	; (80032b0 <HAL_DMA_IRQHandler+0xa38>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a67      	ldr	r2, [pc, #412]	; (80032b4 <HAL_DMA_IRQHandler+0xa3c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d009      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a65      	ldr	r2, [pc, #404]	; (80032b8 <HAL_DMA_IRQHandler+0xa40>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_DMA_IRQHandler+0x8b8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a64      	ldr	r2, [pc, #400]	; (80032bc <HAL_DMA_IRQHandler+0xa44>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d108      	bne.n	8003142 <HAL_DMA_IRQHandler+0x8ca>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	e007      	b.n	8003152 <HAL_DMA_IRQHandler+0x8da>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0201 	bic.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	3301      	adds	r3, #1
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	429a      	cmp	r2, r3
 800315c:	d307      	bcc.n	800316e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f2      	bne.n	8003152 <HAL_DMA_IRQHandler+0x8da>
 800316c:	e000      	b.n	8003170 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800316e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d004      	beq.n	8003188 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003186:	e003      	b.n	8003190 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8272 	beq.w	8003686 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
 80031aa:	e26c      	b.n	8003686 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a43      	ldr	r2, [pc, #268]	; (80032c0 <HAL_DMA_IRQHandler+0xa48>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d022      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_DMA_IRQHandler+0xa4c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d01d      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a40      	ldr	r2, [pc, #256]	; (80032c8 <HAL_DMA_IRQHandler+0xa50>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d018      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a3f      	ldr	r2, [pc, #252]	; (80032cc <HAL_DMA_IRQHandler+0xa54>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d013      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a3d      	ldr	r2, [pc, #244]	; (80032d0 <HAL_DMA_IRQHandler+0xa58>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00e      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a3c      	ldr	r2, [pc, #240]	; (80032d4 <HAL_DMA_IRQHandler+0xa5c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d009      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3a      	ldr	r2, [pc, #232]	; (80032d8 <HAL_DMA_IRQHandler+0xa60>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_IRQHandler+0x984>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a39      	ldr	r2, [pc, #228]	; (80032dc <HAL_DMA_IRQHandler+0xa64>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d101      	bne.n	8003200 <HAL_DMA_IRQHandler+0x988>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_DMA_IRQHandler+0x98a>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 823f 	beq.w	8003686 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	2204      	movs	r2, #4
 800321a:	409a      	lsls	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	4013      	ands	r3, r2
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80cd 	beq.w	80033c0 <HAL_DMA_IRQHandler+0xb48>
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80c7 	beq.w	80033c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	2204      	movs	r2, #4
 800323c:	409a      	lsls	r2, r3
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d049      	beq.n	80032e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8210 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003268:	e20a      	b.n	8003680 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8206 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800327c:	e200      	b.n	8003680 <HAL_DMA_IRQHandler+0xe08>
 800327e:	bf00      	nop
 8003280:	40020010 	.word	0x40020010
 8003284:	40020028 	.word	0x40020028
 8003288:	40020040 	.word	0x40020040
 800328c:	40020058 	.word	0x40020058
 8003290:	40020070 	.word	0x40020070
 8003294:	40020088 	.word	0x40020088
 8003298:	400200a0 	.word	0x400200a0
 800329c:	400200b8 	.word	0x400200b8
 80032a0:	40020410 	.word	0x40020410
 80032a4:	40020428 	.word	0x40020428
 80032a8:	40020440 	.word	0x40020440
 80032ac:	40020458 	.word	0x40020458
 80032b0:	40020470 	.word	0x40020470
 80032b4:	40020488 	.word	0x40020488
 80032b8:	400204a0 	.word	0x400204a0
 80032bc:	400204b8 	.word	0x400204b8
 80032c0:	58025408 	.word	0x58025408
 80032c4:	5802541c 	.word	0x5802541c
 80032c8:	58025430 	.word	0x58025430
 80032cc:	58025444 	.word	0x58025444
 80032d0:	58025458 	.word	0x58025458
 80032d4:	5802546c 	.word	0x5802546c
 80032d8:	58025480 	.word	0x58025480
 80032dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d160      	bne.n	80033ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a7f      	ldr	r2, [pc, #508]	; (80034ec <HAL_DMA_IRQHandler+0xc74>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d04a      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a7d      	ldr	r2, [pc, #500]	; (80034f0 <HAL_DMA_IRQHandler+0xc78>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d045      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a7c      	ldr	r2, [pc, #496]	; (80034f4 <HAL_DMA_IRQHandler+0xc7c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d040      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a7a      	ldr	r2, [pc, #488]	; (80034f8 <HAL_DMA_IRQHandler+0xc80>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03b      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a79      	ldr	r2, [pc, #484]	; (80034fc <HAL_DMA_IRQHandler+0xc84>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d036      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a77      	ldr	r2, [pc, #476]	; (8003500 <HAL_DMA_IRQHandler+0xc88>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d031      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a76      	ldr	r2, [pc, #472]	; (8003504 <HAL_DMA_IRQHandler+0xc8c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d02c      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a74      	ldr	r2, [pc, #464]	; (8003508 <HAL_DMA_IRQHandler+0xc90>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d027      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a73      	ldr	r2, [pc, #460]	; (800350c <HAL_DMA_IRQHandler+0xc94>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d022      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a71      	ldr	r2, [pc, #452]	; (8003510 <HAL_DMA_IRQHandler+0xc98>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d01d      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a70      	ldr	r2, [pc, #448]	; (8003514 <HAL_DMA_IRQHandler+0xc9c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d018      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a6e      	ldr	r2, [pc, #440]	; (8003518 <HAL_DMA_IRQHandler+0xca0>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d013      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6d      	ldr	r2, [pc, #436]	; (800351c <HAL_DMA_IRQHandler+0xca4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d00e      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a6b      	ldr	r2, [pc, #428]	; (8003520 <HAL_DMA_IRQHandler+0xca8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d009      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a6a      	ldr	r2, [pc, #424]	; (8003524 <HAL_DMA_IRQHandler+0xcac>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d004      	beq.n	800338a <HAL_DMA_IRQHandler+0xb12>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a68      	ldr	r2, [pc, #416]	; (8003528 <HAL_DMA_IRQHandler+0xcb0>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d108      	bne.n	800339c <HAL_DMA_IRQHandler+0xb24>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0208 	bic.w	r2, r2, #8
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e007      	b.n	80033ac <HAL_DMA_IRQHandler+0xb34>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 8165 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033be:	e15f      	b.n	8003680 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c4:	f003 031f 	and.w	r3, r3, #31
 80033c8:	2202      	movs	r2, #2
 80033ca:	409a      	lsls	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f000 80c5 	beq.w	8003560 <HAL_DMA_IRQHandler+0xce8>
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80bf 	beq.w	8003560 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	f003 031f 	and.w	r3, r3, #31
 80033ea:	2202      	movs	r2, #2
 80033ec:	409a      	lsls	r2, r3
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 813a 	beq.w	8003684 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003418:	e134      	b.n	8003684 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8130 	beq.w	8003684 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800342c:	e12a      	b.n	8003684 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 8089 	bne.w	800354c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2b      	ldr	r2, [pc, #172]	; (80034ec <HAL_DMA_IRQHandler+0xc74>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04a      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <HAL_DMA_IRQHandler+0xc78>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d045      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a28      	ldr	r2, [pc, #160]	; (80034f4 <HAL_DMA_IRQHandler+0xc7c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d040      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <HAL_DMA_IRQHandler+0xc80>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d03b      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <HAL_DMA_IRQHandler+0xc84>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d036      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_DMA_IRQHandler+0xc88>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a22      	ldr	r2, [pc, #136]	; (8003504 <HAL_DMA_IRQHandler+0xc8c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d02c      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a20      	ldr	r2, [pc, #128]	; (8003508 <HAL_DMA_IRQHandler+0xc90>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d027      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1f      	ldr	r2, [pc, #124]	; (800350c <HAL_DMA_IRQHandler+0xc94>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <HAL_DMA_IRQHandler+0xc98>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1c      	ldr	r2, [pc, #112]	; (8003514 <HAL_DMA_IRQHandler+0xc9c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1a      	ldr	r2, [pc, #104]	; (8003518 <HAL_DMA_IRQHandler+0xca0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a19      	ldr	r2, [pc, #100]	; (800351c <HAL_DMA_IRQHandler+0xca4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <HAL_DMA_IRQHandler+0xca8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a16      	ldr	r2, [pc, #88]	; (8003524 <HAL_DMA_IRQHandler+0xcac>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_DMA_IRQHandler+0xc62>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_DMA_IRQHandler+0xcb0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d128      	bne.n	800352c <HAL_DMA_IRQHandler+0xcb4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f022 0214 	bic.w	r2, r2, #20
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e027      	b.n	800353c <HAL_DMA_IRQHandler+0xcc4>
 80034ec:	40020010 	.word	0x40020010
 80034f0:	40020028 	.word	0x40020028
 80034f4:	40020040 	.word	0x40020040
 80034f8:	40020058 	.word	0x40020058
 80034fc:	40020070 	.word	0x40020070
 8003500:	40020088 	.word	0x40020088
 8003504:	400200a0 	.word	0x400200a0
 8003508:	400200b8 	.word	0x400200b8
 800350c:	40020410 	.word	0x40020410
 8003510:	40020428 	.word	0x40020428
 8003514:	40020440 	.word	0x40020440
 8003518:	40020458 	.word	0x40020458
 800351c:	40020470 	.word	0x40020470
 8003520:	40020488 	.word	0x40020488
 8003524:	400204a0 	.word	0x400204a0
 8003528:	400204b8 	.word	0x400204b8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 020a 	bic.w	r2, r2, #10
 800353a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 8097 	beq.w	8003684 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800355e:	e091      	b.n	8003684 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2208      	movs	r2, #8
 800356a:	409a      	lsls	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 8088 	beq.w	8003686 <HAL_DMA_IRQHandler+0xe0e>
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 8082 	beq.w	8003686 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a41      	ldr	r2, [pc, #260]	; (800368c <HAL_DMA_IRQHandler+0xe14>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d04a      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3f      	ldr	r2, [pc, #252]	; (8003690 <HAL_DMA_IRQHandler+0xe18>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d045      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3e      	ldr	r2, [pc, #248]	; (8003694 <HAL_DMA_IRQHandler+0xe1c>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d040      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a3c      	ldr	r2, [pc, #240]	; (8003698 <HAL_DMA_IRQHandler+0xe20>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d03b      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a3b      	ldr	r2, [pc, #236]	; (800369c <HAL_DMA_IRQHandler+0xe24>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d036      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a39      	ldr	r2, [pc, #228]	; (80036a0 <HAL_DMA_IRQHandler+0xe28>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d031      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a38      	ldr	r2, [pc, #224]	; (80036a4 <HAL_DMA_IRQHandler+0xe2c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d02c      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a36      	ldr	r2, [pc, #216]	; (80036a8 <HAL_DMA_IRQHandler+0xe30>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d027      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a35      	ldr	r2, [pc, #212]	; (80036ac <HAL_DMA_IRQHandler+0xe34>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d022      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a33      	ldr	r2, [pc, #204]	; (80036b0 <HAL_DMA_IRQHandler+0xe38>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d01d      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a32      	ldr	r2, [pc, #200]	; (80036b4 <HAL_DMA_IRQHandler+0xe3c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a30      	ldr	r2, [pc, #192]	; (80036b8 <HAL_DMA_IRQHandler+0xe40>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2f      	ldr	r2, [pc, #188]	; (80036bc <HAL_DMA_IRQHandler+0xe44>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d00e      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2d      	ldr	r2, [pc, #180]	; (80036c0 <HAL_DMA_IRQHandler+0xe48>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a2c      	ldr	r2, [pc, #176]	; (80036c4 <HAL_DMA_IRQHandler+0xe4c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d004      	beq.n	8003622 <HAL_DMA_IRQHandler+0xdaa>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a2a      	ldr	r2, [pc, #168]	; (80036c8 <HAL_DMA_IRQHandler+0xe50>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d108      	bne.n	8003634 <HAL_DMA_IRQHandler+0xdbc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 021c 	bic.w	r2, r2, #28
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e007      	b.n	8003644 <HAL_DMA_IRQHandler+0xdcc>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 020e 	bic.w	r2, r2, #14
 8003642:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d009      	beq.n	8003686 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
 800367a:	e004      	b.n	8003686 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800367c:	bf00      	nop
 800367e:	e002      	b.n	8003686 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003684:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003686:	3728      	adds	r7, #40	; 0x28
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8

080036cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
 80036f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <DMA_SetConfig+0x21c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d072      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7d      	ldr	r2, [pc, #500]	; (8003904 <DMA_SetConfig+0x220>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d06d      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <DMA_SetConfig+0x224>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d068      	beq.n	80037ee <DMA_SetConfig+0x10a>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a7a      	ldr	r2, [pc, #488]	; (800390c <DMA_SetConfig+0x228>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d063      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a79      	ldr	r2, [pc, #484]	; (8003910 <DMA_SetConfig+0x22c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d05e      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a77      	ldr	r2, [pc, #476]	; (8003914 <DMA_SetConfig+0x230>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d059      	beq.n	80037ee <DMA_SetConfig+0x10a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a76      	ldr	r2, [pc, #472]	; (8003918 <DMA_SetConfig+0x234>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d054      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a74      	ldr	r2, [pc, #464]	; (800391c <DMA_SetConfig+0x238>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d04f      	beq.n	80037ee <DMA_SetConfig+0x10a>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a73      	ldr	r2, [pc, #460]	; (8003920 <DMA_SetConfig+0x23c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d04a      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a71      	ldr	r2, [pc, #452]	; (8003924 <DMA_SetConfig+0x240>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d045      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a70      	ldr	r2, [pc, #448]	; (8003928 <DMA_SetConfig+0x244>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d040      	beq.n	80037ee <DMA_SetConfig+0x10a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6e      	ldr	r2, [pc, #440]	; (800392c <DMA_SetConfig+0x248>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d03b      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6d      	ldr	r2, [pc, #436]	; (8003930 <DMA_SetConfig+0x24c>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d036      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a6b      	ldr	r2, [pc, #428]	; (8003934 <DMA_SetConfig+0x250>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d031      	beq.n	80037ee <DMA_SetConfig+0x10a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a6a      	ldr	r2, [pc, #424]	; (8003938 <DMA_SetConfig+0x254>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d02c      	beq.n	80037ee <DMA_SetConfig+0x10a>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a68      	ldr	r2, [pc, #416]	; (800393c <DMA_SetConfig+0x258>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d027      	beq.n	80037ee <DMA_SetConfig+0x10a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a67      	ldr	r2, [pc, #412]	; (8003940 <DMA_SetConfig+0x25c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	; (8003944 <DMA_SetConfig+0x260>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01d      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a64      	ldr	r2, [pc, #400]	; (8003948 <DMA_SetConfig+0x264>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d018      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a62      	ldr	r2, [pc, #392]	; (800394c <DMA_SetConfig+0x268>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a61      	ldr	r2, [pc, #388]	; (8003950 <DMA_SetConfig+0x26c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5f      	ldr	r2, [pc, #380]	; (8003954 <DMA_SetConfig+0x270>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a5e      	ldr	r2, [pc, #376]	; (8003958 <DMA_SetConfig+0x274>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <DMA_SetConfig+0x10a>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a5c      	ldr	r2, [pc, #368]	; (800395c <DMA_SetConfig+0x278>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d101      	bne.n	80037f2 <DMA_SetConfig+0x10e>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <DMA_SetConfig+0x110>
 80037f2:	2300      	movs	r3, #0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00d      	beq.n	8003814 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003800:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003812:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a39      	ldr	r2, [pc, #228]	; (8003900 <DMA_SetConfig+0x21c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d04a      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a38      	ldr	r2, [pc, #224]	; (8003904 <DMA_SetConfig+0x220>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d045      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a36      	ldr	r2, [pc, #216]	; (8003908 <DMA_SetConfig+0x224>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d040      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a35      	ldr	r2, [pc, #212]	; (800390c <DMA_SetConfig+0x228>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d03b      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a33      	ldr	r2, [pc, #204]	; (8003910 <DMA_SetConfig+0x22c>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d036      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a32      	ldr	r2, [pc, #200]	; (8003914 <DMA_SetConfig+0x230>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d031      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a30      	ldr	r2, [pc, #192]	; (8003918 <DMA_SetConfig+0x234>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d02c      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2f      	ldr	r2, [pc, #188]	; (800391c <DMA_SetConfig+0x238>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d027      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2d      	ldr	r2, [pc, #180]	; (8003920 <DMA_SetConfig+0x23c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d022      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a2c      	ldr	r2, [pc, #176]	; (8003924 <DMA_SetConfig+0x240>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d01d      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2a      	ldr	r2, [pc, #168]	; (8003928 <DMA_SetConfig+0x244>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d018      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <DMA_SetConfig+0x248>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a27      	ldr	r2, [pc, #156]	; (8003930 <DMA_SetConfig+0x24c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00e      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a26      	ldr	r2, [pc, #152]	; (8003934 <DMA_SetConfig+0x250>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d009      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <DMA_SetConfig+0x254>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <DMA_SetConfig+0x1d0>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a23      	ldr	r2, [pc, #140]	; (800393c <DMA_SetConfig+0x258>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <DMA_SetConfig+0x1d4>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <DMA_SetConfig+0x1d6>
 80038b8:	2300      	movs	r3, #0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d059      	beq.n	8003972 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	223f      	movs	r2, #63	; 0x3f
 80038c8:	409a      	lsls	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b40      	cmp	r3, #64	; 0x40
 80038ec:	d138      	bne.n	8003960 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038fe:	e086      	b.n	8003a0e <DMA_SetConfig+0x32a>
 8003900:	40020010 	.word	0x40020010
 8003904:	40020028 	.word	0x40020028
 8003908:	40020040 	.word	0x40020040
 800390c:	40020058 	.word	0x40020058
 8003910:	40020070 	.word	0x40020070
 8003914:	40020088 	.word	0x40020088
 8003918:	400200a0 	.word	0x400200a0
 800391c:	400200b8 	.word	0x400200b8
 8003920:	40020410 	.word	0x40020410
 8003924:	40020428 	.word	0x40020428
 8003928:	40020440 	.word	0x40020440
 800392c:	40020458 	.word	0x40020458
 8003930:	40020470 	.word	0x40020470
 8003934:	40020488 	.word	0x40020488
 8003938:	400204a0 	.word	0x400204a0
 800393c:	400204b8 	.word	0x400204b8
 8003940:	58025408 	.word	0x58025408
 8003944:	5802541c 	.word	0x5802541c
 8003948:	58025430 	.word	0x58025430
 800394c:	58025444 	.word	0x58025444
 8003950:	58025458 	.word	0x58025458
 8003954:	5802546c 	.word	0x5802546c
 8003958:	58025480 	.word	0x58025480
 800395c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]
}
 8003970:	e04d      	b.n	8003a0e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a29      	ldr	r2, [pc, #164]	; (8003a1c <DMA_SetConfig+0x338>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a27      	ldr	r2, [pc, #156]	; (8003a20 <DMA_SetConfig+0x33c>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a26      	ldr	r2, [pc, #152]	; (8003a24 <DMA_SetConfig+0x340>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d018      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a24      	ldr	r2, [pc, #144]	; (8003a28 <DMA_SetConfig+0x344>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a23      	ldr	r2, [pc, #140]	; (8003a2c <DMA_SetConfig+0x348>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a21      	ldr	r2, [pc, #132]	; (8003a30 <DMA_SetConfig+0x34c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a20      	ldr	r2, [pc, #128]	; (8003a34 <DMA_SetConfig+0x350>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <DMA_SetConfig+0x2de>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1e      	ldr	r2, [pc, #120]	; (8003a38 <DMA_SetConfig+0x354>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d101      	bne.n	80039c6 <DMA_SetConfig+0x2e2>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <DMA_SetConfig+0x2e4>
 80039c6:	2300      	movs	r3, #0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d020      	beq.n	8003a0e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d0:	f003 031f 	and.w	r3, r3, #31
 80039d4:	2201      	movs	r2, #1
 80039d6:	409a      	lsls	r2, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d108      	bne.n	80039fe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	60da      	str	r2, [r3, #12]
}
 80039fc:	e007      	b.n	8003a0e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	60da      	str	r2, [r3, #12]
}
 8003a0e:	bf00      	nop
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	58025408 	.word	0x58025408
 8003a20:	5802541c 	.word	0x5802541c
 8003a24:	58025430 	.word	0x58025430
 8003a28:	58025444 	.word	0x58025444
 8003a2c:	58025458 	.word	0x58025458
 8003a30:	5802546c 	.word	0x5802546c
 8003a34:	58025480 	.word	0x58025480
 8003a38:	58025494 	.word	0x58025494

08003a3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a42      	ldr	r2, [pc, #264]	; (8003b54 <DMA_CalcBaseAndBitshift+0x118>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d04a      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a41      	ldr	r2, [pc, #260]	; (8003b58 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d045      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3f      	ldr	r2, [pc, #252]	; (8003b5c <DMA_CalcBaseAndBitshift+0x120>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d040      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a3e      	ldr	r2, [pc, #248]	; (8003b60 <DMA_CalcBaseAndBitshift+0x124>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d03b      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a3c      	ldr	r2, [pc, #240]	; (8003b64 <DMA_CalcBaseAndBitshift+0x128>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d036      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d031      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <DMA_CalcBaseAndBitshift+0x130>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d02c      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a38      	ldr	r2, [pc, #224]	; (8003b70 <DMA_CalcBaseAndBitshift+0x134>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d027      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a36      	ldr	r2, [pc, #216]	; (8003b74 <DMA_CalcBaseAndBitshift+0x138>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d022      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a35      	ldr	r2, [pc, #212]	; (8003b78 <DMA_CalcBaseAndBitshift+0x13c>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d01d      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a33      	ldr	r2, [pc, #204]	; (8003b7c <DMA_CalcBaseAndBitshift+0x140>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d018      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a32      	ldr	r2, [pc, #200]	; (8003b80 <DMA_CalcBaseAndBitshift+0x144>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d013      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a30      	ldr	r2, [pc, #192]	; (8003b84 <DMA_CalcBaseAndBitshift+0x148>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00e      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <DMA_CalcBaseAndBitshift+0x14c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d009      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2d      	ldr	r2, [pc, #180]	; (8003b8c <DMA_CalcBaseAndBitshift+0x150>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d004      	beq.n	8003ae4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <DMA_CalcBaseAndBitshift+0x154>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d101      	bne.n	8003ae8 <DMA_CalcBaseAndBitshift+0xac>
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e000      	b.n	8003aea <DMA_CalcBaseAndBitshift+0xae>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d024      	beq.n	8003b38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3b10      	subs	r3, #16
 8003af6:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <DMA_CalcBaseAndBitshift+0x158>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	4a24      	ldr	r2, [pc, #144]	; (8003b98 <DMA_CalcBaseAndBitshift+0x15c>)
 8003b08:	5cd3      	ldrb	r3, [r2, r3]
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d908      	bls.n	8003b28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <DMA_CalcBaseAndBitshift+0x160>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	1d1a      	adds	r2, r3, #4
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	; 0x58
 8003b26:	e00d      	b.n	8003b44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b1b      	ldr	r3, [pc, #108]	; (8003b9c <DMA_CalcBaseAndBitshift+0x160>)
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
 8003b36:	e005      	b.n	8003b44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	40020010 	.word	0x40020010
 8003b58:	40020028 	.word	0x40020028
 8003b5c:	40020040 	.word	0x40020040
 8003b60:	40020058 	.word	0x40020058
 8003b64:	40020070 	.word	0x40020070
 8003b68:	40020088 	.word	0x40020088
 8003b6c:	400200a0 	.word	0x400200a0
 8003b70:	400200b8 	.word	0x400200b8
 8003b74:	40020410 	.word	0x40020410
 8003b78:	40020428 	.word	0x40020428
 8003b7c:	40020440 	.word	0x40020440
 8003b80:	40020458 	.word	0x40020458
 8003b84:	40020470 	.word	0x40020470
 8003b88:	40020488 	.word	0x40020488
 8003b8c:	400204a0 	.word	0x400204a0
 8003b90:	400204b8 	.word	0x400204b8
 8003b94:	aaaaaaab 	.word	0xaaaaaaab
 8003b98:	0800ac30 	.word	0x0800ac30
 8003b9c:	fffffc00 	.word	0xfffffc00

08003ba0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d120      	bne.n	8003bf6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	2b03      	cmp	r3, #3
 8003bba:	d858      	bhi.n	8003c6e <DMA_CheckFifoParam+0xce>
 8003bbc:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <DMA_CheckFifoParam+0x24>)
 8003bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc2:	bf00      	nop
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be7 	.word	0x08003be7
 8003bcc:	08003bd5 	.word	0x08003bd5
 8003bd0:	08003c6f 	.word	0x08003c6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d048      	beq.n	8003c72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003be4:	e045      	b.n	8003c72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bee:	d142      	bne.n	8003c76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bf4:	e03f      	b.n	8003c76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bfe:	d123      	bne.n	8003c48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c04:	2b03      	cmp	r3, #3
 8003c06:	d838      	bhi.n	8003c7a <DMA_CheckFifoParam+0xda>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <DMA_CheckFifoParam+0x70>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c27 	.word	0x08003c27
 8003c18:	08003c21 	.word	0x08003c21
 8003c1c:	08003c39 	.word	0x08003c39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
        break;
 8003c24:	e030      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d025      	beq.n	8003c7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c36:	e022      	b.n	8003c7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c40:	d11f      	bne.n	8003c82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c46:	e01c      	b.n	8003c82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d902      	bls.n	8003c56 <DMA_CheckFifoParam+0xb6>
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d003      	beq.n	8003c5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c54:	e018      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
        break;
 8003c5a:	e015      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00e      	beq.n	8003c86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
    break;
 8003c6c:	e00b      	b.n	8003c86 <DMA_CheckFifoParam+0xe6>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e00a      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        break;
 8003c72:	bf00      	nop
 8003c74:	e008      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        break;
 8003c76:	bf00      	nop
 8003c78:	e006      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        break;
 8003c7a:	bf00      	nop
 8003c7c:	e004      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
        break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <DMA_CheckFifoParam+0xe8>
    break;
 8003c86:	bf00      	nop
    }
  }

  return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop

08003c98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a38      	ldr	r2, [pc, #224]	; (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a36      	ldr	r2, [pc, #216]	; (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d01d      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a35      	ldr	r2, [pc, #212]	; (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a33      	ldr	r2, [pc, #204]	; (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a32      	ldr	r2, [pc, #200]	; (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a30      	ldr	r2, [pc, #192]	; (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a2f      	ldr	r2, [pc, #188]	; (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a2d      	ldr	r2, [pc, #180]	; (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d101      	bne.n	8003cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d01a      	beq.n	8003d36 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	3b08      	subs	r3, #8
 8003d08:	4a28      	ldr	r2, [pc, #160]	; (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4b26      	ldr	r3, [pc, #152]	; (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a24      	ldr	r2, [pc, #144]	; (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d24:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 031f 	and.w	r3, r3, #31
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	409a      	lsls	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d34:	e024      	b.n	8003d80 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	3b10      	subs	r3, #16
 8003d3e:	4a1e      	ldr	r2, [pc, #120]	; (8003db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d40:	fba2 2303 	umull	r2, r3, r2, r3
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a1c      	ldr	r2, [pc, #112]	; (8003dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d806      	bhi.n	8003d5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4a1b      	ldr	r2, [pc, #108]	; (8003dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d902      	bls.n	8003d5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d70:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	58025408 	.word	0x58025408
 8003d90:	5802541c 	.word	0x5802541c
 8003d94:	58025430 	.word	0x58025430
 8003d98:	58025444 	.word	0x58025444
 8003d9c:	58025458 	.word	0x58025458
 8003da0:	5802546c 	.word	0x5802546c
 8003da4:	58025480 	.word	0x58025480
 8003da8:	58025494 	.word	0x58025494
 8003dac:	cccccccd 	.word	0xcccccccd
 8003db0:	16009600 	.word	0x16009600
 8003db4:	58025880 	.word	0x58025880
 8003db8:	aaaaaaab 	.word	0xaaaaaaab
 8003dbc:	400204b8 	.word	0x400204b8
 8003dc0:	4002040f 	.word	0x4002040f
 8003dc4:	10008200 	.word	0x10008200
 8003dc8:	40020880 	.word	0x40020880

08003dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d04a      	beq.n	8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d847      	bhi.n	8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a25      	ldr	r2, [pc, #148]	; (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d01d      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a22      	ldr	r2, [pc, #136]	; (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d101      	bne.n	8003e3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4b17      	ldr	r3, [pc, #92]	; (8003ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e54:	671a      	str	r2, [r3, #112]	; 0x70
 8003e56:	e009      	b.n	8003e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	461a      	mov	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a11      	ldr	r2, [pc, #68]	; (8003eb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e6a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	2201      	movs	r2, #1
 8003e72:	409a      	lsls	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	58025408 	.word	0x58025408
 8003e88:	5802541c 	.word	0x5802541c
 8003e8c:	58025430 	.word	0x58025430
 8003e90:	58025444 	.word	0x58025444
 8003e94:	58025458 	.word	0x58025458
 8003e98:	5802546c 	.word	0x5802546c
 8003e9c:	58025480 	.word	0x58025480
 8003ea0:	58025494 	.word	0x58025494
 8003ea4:	1600963f 	.word	0x1600963f
 8003ea8:	58025940 	.word	0x58025940
 8003eac:	1000823f 	.word	0x1000823f
 8003eb0:	40020940 	.word	0x40020940

08003eb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0cf      	b.n	8004066 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2223      	movs	r2, #35	; 0x23
 8003ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fc ff25 	bl	8000d28 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ede:	4b64      	ldr	r3, [pc, #400]	; (8004070 <HAL_ETH_Init+0x1bc>)
 8003ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ee4:	4a62      	ldr	r2, [pc, #392]	; (8004070 <HAL_ETH_Init+0x1bc>)
 8003ee6:	f043 0302 	orr.w	r3, r3, #2
 8003eea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003eee:	4b60      	ldr	r3, [pc, #384]	; (8004070 <HAL_ETH_Init+0x1bc>)
 8003ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	7a1b      	ldrb	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fd fb87 	bl	8001618 <HAL_SYSCFG_ETHInterfaceSelect>
 8003f0a:	e003      	b.n	8003f14 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003f0c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003f10:	f7fd fb82 	bl	8001618 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003f14:	4b57      	ldr	r3, [pc, #348]	; (8004074 <HAL_ETH_Init+0x1c0>)
 8003f16:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f2e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f30:	f7fd fb36 	bl	80015a0 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f36:	e011      	b.n	8003f5c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003f38:	f7fd fb32 	bl	80015a0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f46:	d909      	bls.n	8003f5c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2204      	movs	r2, #4
 8003f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	22e0      	movs	r2, #224	; 0xe0
 8003f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e084      	b.n	8004066 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e4      	bne.n	8003f38 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9d2 	bl	8004318 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003f74:	f001 ffec 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	4a3f      	ldr	r2, [pc, #252]	; (8004078 <HAL_ETH_Init+0x1c4>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	0c9a      	lsrs	r2, r3, #18
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3a01      	subs	r2, #1
 8003f88:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fbbd 	bl	800470c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003f9e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	22e0      	movs	r2, #224	; 0xe0
 8003fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e049      	b.n	8004066 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fda:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003fde:	4b27      	ldr	r3, [pc, #156]	; (800407c <HAL_ETH_Init+0x1c8>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6952      	ldr	r2, [r2, #20]
 8003fe6:	0051      	lsls	r1, r2, #1
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	430b      	orrs	r3, r1
 8003fee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ff2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fc25 	bl	8004846 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 fc6b 	bl	80048d8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	3305      	adds	r3, #5
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	021a      	lsls	r2, r3, #8
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	3304      	adds	r3, #4
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	3303      	adds	r3, #3
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	061a      	lsls	r2, r3, #24
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	3302      	adds	r3, #2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	041b      	lsls	r3, r3, #16
 8004034:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	3301      	adds	r3, #1
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004040:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800404e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004050:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2210      	movs	r2, #16
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
 8004074:	58000400 	.word	0x58000400
 8004078:	431bde83 	.word	0x431bde83
 800407c:	ffff8001 	.word	0xffff8001

08004080 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004090:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d115      	bne.n	80040c8 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d10b      	bne.n	80040c8 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	461a      	mov	r2, r3
 80040ba:	f248 0340 	movw	r3, #32832	; 0x8040
 80040be:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8f6 	bl	80042b4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d115      	bne.n	8004108 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10b      	bne.n	8004108 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f8:	461a      	mov	r2, r3
 80040fa:	f248 0301 	movw	r3, #32769	; 0x8001
 80040fe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8cc 	bl	80042a0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004110:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004114:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800411c:	d153      	bne.n	80041c6 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800412a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004132:	d148      	bne.n	80041c6 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d11e      	bne.n	8004198 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8004166:	f241 1302 	movw	r3, #4354	; 0x1102
 800416a:	4013      	ands	r3, r2
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800418a:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	22e0      	movs	r2, #224	; 0xe0
 8004192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004196:	e013      	b.n	80041c0 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80041a4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	461a      	mov	r2, r3
 80041b8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80041bc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f881 	bl	80042c8 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041ce:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d104      	bne.n	80041e4 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d019      	beq.n	8004218 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	22e0      	movs	r2, #224	; 0xe0
 8004206:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f85c 	bl	80042c8 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b10      	cmp	r3, #16
 8004226:	d10f      	bne.n	8004248 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004230:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f84e 	bl	80042dc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b20      	cmp	r3, #32
 8004256:	d10f      	bne.n	8004278 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f840 	bl	80042f0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8004278:	4b08      	ldr	r3, [pc, #32]	; (800429c <HAL_ETH_IRQHandler+0x21c>)
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d006      	beq.n	8004292 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004284:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_ETH_IRQHandler+0x21c>)
 8004286:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800428a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f000 f839 	bl	8004304 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 8004292:	bf00      	nop
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	58000080 	.word	0x58000080

080042a0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004328:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004330:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004332:	f001 fe0d 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8004336:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a1e      	ldr	r2, [pc, #120]	; (80043b4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d908      	bls.n	8004352 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a1d      	ldr	r2, [pc, #116]	; (80043b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d804      	bhi.n	8004352 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e027      	b.n	80043a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d908      	bls.n	800436c <HAL_ETH_SetMDIOClockRange+0x54>
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a17      	ldr	r2, [pc, #92]	; (80043bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d204      	bcs.n	800436c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	e01a      	b.n	80043a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d303      	bcc.n	800437c <HAL_ETH_SetMDIOClockRange+0x64>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d911      	bls.n	80043a0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a10      	ldr	r2, [pc, #64]	; (80043c0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d908      	bls.n	8004396 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a0f      	ldr	r2, [pc, #60]	; (80043c4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d804      	bhi.n	8004396 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e005      	b.n	80043a2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e000      	b.n	80043a2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80043a0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68fa      	ldr	r2, [r7, #12]
 80043a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80043ac:	bf00      	nop
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	01312cff 	.word	0x01312cff
 80043b8:	02160ebf 	.word	0x02160ebf
 80043bc:	03938700 	.word	0x03938700
 80043c0:	05f5e0ff 	.word	0x05f5e0ff
 80043c4:	08f0d17f 	.word	0x08f0d17f

080043c8 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80043da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	791b      	ldrb	r3, [r3, #4]
 80043e0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80043e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	7b1b      	ldrb	r3, [r3, #12]
 80043e8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	7b5b      	ldrb	r3, [r3, #13]
 80043f0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	7b9b      	ldrb	r3, [r3, #14]
 80043f8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7bdb      	ldrb	r3, [r3, #15]
 8004400:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004402:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	7c12      	ldrb	r2, [r2, #16]
 8004408:	2a00      	cmp	r2, #0
 800440a:	d102      	bne.n	8004412 <ETH_SetMACConfig+0x4a>
 800440c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004410:	e000      	b.n	8004414 <ETH_SetMACConfig+0x4c>
 8004412:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004414:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	7c52      	ldrb	r2, [r2, #17]
 800441a:	2a00      	cmp	r2, #0
 800441c:	d102      	bne.n	8004424 <ETH_SetMACConfig+0x5c>
 800441e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004422:	e000      	b.n	8004426 <ETH_SetMACConfig+0x5e>
 8004424:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004426:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	7c9b      	ldrb	r3, [r3, #18]
 800442c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800442e:	431a      	orrs	r2, r3
               macconf->Speed |
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004434:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800443a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	7f1b      	ldrb	r3, [r3, #28]
 8004440:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004442:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	7f5b      	ldrb	r3, [r3, #29]
 8004448:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800444a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	7f92      	ldrb	r2, [r2, #30]
 8004450:	2a00      	cmp	r2, #0
 8004452:	d102      	bne.n	800445a <ETH_SetMACConfig+0x92>
 8004454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004458:	e000      	b.n	800445c <ETH_SetMACConfig+0x94>
 800445a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800445c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	7fdb      	ldrb	r3, [r3, #31]
 8004462:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004464:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	f892 2020 	ldrb.w	r2, [r2, #32]
 800446c:	2a00      	cmp	r2, #0
 800446e:	d102      	bne.n	8004476 <ETH_SetMACConfig+0xae>
 8004470:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004474:	e000      	b.n	8004478 <ETH_SetMACConfig+0xb0>
 8004476:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004478:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800447e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004486:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004488:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	4b56      	ldr	r3, [pc, #344]	; (80045f4 <ETH_SetMACConfig+0x22c>)
 800449a:	4013      	ands	r3, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	68f9      	ldr	r1, [r7, #12]
 80044a2:	430b      	orrs	r3, r1
 80044a4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044aa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044b2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044bc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80044be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80044c6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80044c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80044d0:	2a00      	cmp	r2, #0
 80044d2:	d102      	bne.n	80044da <ETH_SetMACConfig+0x112>
 80044d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044d8:	e000      	b.n	80044dc <ETH_SetMACConfig+0x114>
 80044da:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80044dc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	4b42      	ldr	r3, [pc, #264]	; (80045f8 <ETH_SetMACConfig+0x230>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	68f9      	ldr	r1, [r7, #12]
 80044f6:	430b      	orrs	r3, r1
 80044f8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004500:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	4b3a      	ldr	r3, [pc, #232]	; (80045fc <ETH_SetMACConfig+0x234>)
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	430b      	orrs	r3, r1
 800451c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004524:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800452a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004532:	2a00      	cmp	r2, #0
 8004534:	d101      	bne.n	800453a <ETH_SetMACConfig+0x172>
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	e000      	b.n	800453c <ETH_SetMACConfig+0x174>
 800453a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800453c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800454e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004552:	4013      	ands	r3, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	430b      	orrs	r3, r1
 800455c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004564:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800456c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	f023 0103 	bic.w	r1, r3, #3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	430a      	orrs	r2, r1
 8004586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004592:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80045ae:	2a00      	cmp	r2, #0
 80045b0:	d101      	bne.n	80045b6 <ETH_SetMACConfig+0x1ee>
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	e000      	b.n	80045b8 <ETH_SetMACConfig+0x1f0>
 80045b6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80045b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80045c0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80045c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80045ca:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80045d8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	00048083 	.word	0x00048083
 80045f8:	c0f88000 	.word	0xc0f88000
 80045fc:	fffffef0 	.word	0xfffffef0

08004600 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b38      	ldr	r3, [pc, #224]	; (80046f8 <ETH_SetDMAConfig+0xf8>)
 8004616:	4013      	ands	r3, r2
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	6811      	ldr	r1, [r2, #0]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004626:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	791b      	ldrb	r3, [r3, #4]
 800462c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004632:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	7b1b      	ldrb	r3, [r3, #12]
 8004638:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	4b2c      	ldr	r3, [pc, #176]	; (80046fc <ETH_SetDMAConfig+0xfc>)
 800464a:	4013      	ands	r3, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	430b      	orrs	r3, r1
 8004654:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004658:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	7b5b      	ldrb	r3, [r3, #13]
 800465e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004670:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004674:	4b22      	ldr	r3, [pc, #136]	; (8004700 <ETH_SetDMAConfig+0x100>)
 8004676:	4013      	ands	r3, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	430b      	orrs	r3, r1
 8004680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004684:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	7d1b      	ldrb	r3, [r3, #20]
 8004690:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004692:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	7f5b      	ldrb	r3, [r3, #29]
 8004698:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <ETH_SetDMAConfig+0x104>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6812      	ldr	r2, [r2, #0]
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ba:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	7f1b      	ldrb	r3, [r3, #28]
 80046c2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80046d8:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <ETH_SetDMAConfig+0x108>)
 80046da:	4013      	ands	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6812      	ldr	r2, [r2, #0]
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	430b      	orrs	r3, r1
 80046e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	ffff87fd 	.word	0xffff87fd
 80046fc:	ffff2ffe 	.word	0xffff2ffe
 8004700:	fffec000 	.word	0xfffec000
 8004704:	ffc0efef 	.word	0xffc0efef
 8004708:	7fc0ffff 	.word	0x7fc0ffff

0800470c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b0a4      	sub	sp, #144	; 0x90
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800471a:	2300      	movs	r3, #0
 800471c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004724:	2300      	movs	r3, #0
 8004726:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800474e:	2300      	movs	r3, #0
 8004750:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004754:	2300      	movs	r3, #0
 8004756:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004764:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004768:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004770:	2300      	movs	r3, #0
 8004772:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004774:	2301      	movs	r3, #1
 8004776:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004786:	2300      	movs	r3, #0
 8004788:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800478a:	2300      	movs	r3, #0
 800478c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800478e:	2300      	movs	r3, #0
 8004790:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004792:	2300      	movs	r3, #0
 8004794:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004798:	2300      	movs	r3, #0
 800479a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80047a4:	2320      	movs	r3, #32
 80047a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80047b0:	2300      	movs	r3, #0
 80047b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80047b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80047ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80047bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047c0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80047c2:	2300      	movs	r3, #0
 80047c4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80047c8:	2302      	movs	r3, #2
 80047ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80047e6:	2300      	movs	r3, #0
 80047e8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047f4:	4619      	mov	r1, r3
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff fde6 	bl	80043c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047fc:	2301      	movs	r3, #1
 80047fe:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004800:	2301      	movs	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004808:	2300      	movs	r3, #0
 800480a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800480e:	2300      	movs	r3, #0
 8004810:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004812:	2300      	movs	r3, #0
 8004814:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004816:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800481a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800481c:	2300      	movs	r3, #0
 800481e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004820:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004824:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004826:	2300      	movs	r3, #0
 8004828:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800482c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004830:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff fee1 	bl	8004600 <ETH_SetDMAConfig>
}
 800483e:	bf00      	nop
 8004840:	3790      	adds	r7, #144	; 0x90
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	e01d      	b.n	8004890 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68d9      	ldr	r1, [r3, #12]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4613      	mov	r3, r2
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	4413      	add	r3, r2
 8004860:	00db      	lsls	r3, r3, #3
 8004862:	440b      	add	r3, r1
 8004864:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	2200      	movs	r2, #0
 8004876:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2200      	movs	r2, #0
 800487c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	3206      	adds	r2, #6
 8004886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2b03      	cmp	r3, #3
 8004894:	d9de      	bls.n	8004854 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a4:	461a      	mov	r2, r3
 80048a6:	2303      	movs	r3, #3
 80048a8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80048cc:	bf00      	nop
 80048ce:	3714      	adds	r7, #20
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	e023      	b.n	800492e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	4613      	mov	r3, r2
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	00db      	lsls	r3, r3, #3
 80048f4:	440b      	add	r3, r1
 80048f6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2200      	movs	r2, #0
 800490e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	3212      	adds	r2, #18
 8004924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d9d8      	bls.n	80048e6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800495a:	461a      	mov	r2, r3
 800495c:	2303      	movs	r3, #3
 800495e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004986:	bf00      	nop
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
	...

08004994 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004994:	b480      	push	{r7}
 8004996:	b089      	sub	sp, #36	; 0x24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80049a2:	4b89      	ldr	r3, [pc, #548]	; (8004bc8 <HAL_GPIO_Init+0x234>)
 80049a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80049a6:	e194      	b.n	8004cd2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2101      	movs	r1, #1
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	4013      	ands	r3, r2
 80049b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f000 8186 	beq.w	8004ccc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 0303 	and.w	r3, r3, #3
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d005      	beq.n	80049d8 <HAL_GPIO_Init+0x44>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d130      	bne.n	8004a3a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	2203      	movs	r2, #3
 80049e4:	fa02 f303 	lsl.w	r3, r2, r3
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	68da      	ldr	r2, [r3, #12]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a0e:	2201      	movs	r2, #1
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	f003 0201 	and.w	r2, r3, #1
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f003 0303 	and.w	r3, r3, #3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d017      	beq.n	8004a76 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d123      	bne.n	8004aca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	08da      	lsrs	r2, r3, #3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3208      	adds	r2, #8
 8004a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	220f      	movs	r2, #15
 8004a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	08da      	lsrs	r2, r3, #3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3208      	adds	r2, #8
 8004ac4:	69b9      	ldr	r1, [r7, #24]
 8004ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f003 0203 	and.w	r2, r3, #3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	fa02 f303 	lsl.w	r3, r2, r3
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80e0 	beq.w	8004ccc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b0c:	4b2f      	ldr	r3, [pc, #188]	; (8004bcc <HAL_GPIO_Init+0x238>)
 8004b0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b12:	4a2e      	ldr	r2, [pc, #184]	; (8004bcc <HAL_GPIO_Init+0x238>)
 8004b14:	f043 0302 	orr.w	r3, r3, #2
 8004b18:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <HAL_GPIO_Init+0x238>)
 8004b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b2a:	4a29      	ldr	r2, [pc, #164]	; (8004bd0 <HAL_GPIO_Init+0x23c>)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	089b      	lsrs	r3, r3, #2
 8004b30:	3302      	adds	r3, #2
 8004b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	220f      	movs	r2, #15
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	43db      	mvns	r3, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a20      	ldr	r2, [pc, #128]	; (8004bd4 <HAL_GPIO_Init+0x240>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d052      	beq.n	8004bfc <HAL_GPIO_Init+0x268>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1f      	ldr	r2, [pc, #124]	; (8004bd8 <HAL_GPIO_Init+0x244>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d031      	beq.n	8004bc2 <HAL_GPIO_Init+0x22e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a1e      	ldr	r2, [pc, #120]	; (8004bdc <HAL_GPIO_Init+0x248>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d02b      	beq.n	8004bbe <HAL_GPIO_Init+0x22a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a1d      	ldr	r2, [pc, #116]	; (8004be0 <HAL_GPIO_Init+0x24c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d025      	beq.n	8004bba <HAL_GPIO_Init+0x226>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_GPIO_Init+0x250>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d01f      	beq.n	8004bb6 <HAL_GPIO_Init+0x222>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_GPIO_Init+0x254>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d019      	beq.n	8004bb2 <HAL_GPIO_Init+0x21e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1a      	ldr	r2, [pc, #104]	; (8004bec <HAL_GPIO_Init+0x258>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d013      	beq.n	8004bae <HAL_GPIO_Init+0x21a>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a19      	ldr	r2, [pc, #100]	; (8004bf0 <HAL_GPIO_Init+0x25c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00d      	beq.n	8004baa <HAL_GPIO_Init+0x216>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a18      	ldr	r2, [pc, #96]	; (8004bf4 <HAL_GPIO_Init+0x260>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <HAL_GPIO_Init+0x212>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <HAL_GPIO_Init+0x264>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d101      	bne.n	8004ba2 <HAL_GPIO_Init+0x20e>
 8004b9e:	2309      	movs	r3, #9
 8004ba0:	e02d      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004ba2:	230a      	movs	r3, #10
 8004ba4:	e02b      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004ba6:	2308      	movs	r3, #8
 8004ba8:	e029      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004baa:	2307      	movs	r3, #7
 8004bac:	e027      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bae:	2306      	movs	r3, #6
 8004bb0:	e025      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bb2:	2305      	movs	r3, #5
 8004bb4:	e023      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bb6:	2304      	movs	r3, #4
 8004bb8:	e021      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e01f      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	e01d      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e01b      	b.n	8004bfe <HAL_GPIO_Init+0x26a>
 8004bc6:	bf00      	nop
 8004bc8:	58000080 	.word	0x58000080
 8004bcc:	58024400 	.word	0x58024400
 8004bd0:	58000400 	.word	0x58000400
 8004bd4:	58020000 	.word	0x58020000
 8004bd8:	58020400 	.word	0x58020400
 8004bdc:	58020800 	.word	0x58020800
 8004be0:	58020c00 	.word	0x58020c00
 8004be4:	58021000 	.word	0x58021000
 8004be8:	58021400 	.word	0x58021400
 8004bec:	58021800 	.word	0x58021800
 8004bf0:	58021c00 	.word	0x58021c00
 8004bf4:	58022000 	.word	0x58022000
 8004bf8:	58022400 	.word	0x58022400
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	f002 0203 	and.w	r2, r2, #3
 8004c04:	0092      	lsls	r2, r2, #2
 8004c06:	4093      	lsls	r3, r2
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c0e:	4938      	ldr	r1, [pc, #224]	; (8004cf0 <HAL_GPIO_Init+0x35c>)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	3302      	adds	r3, #2
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	43db      	mvns	r3, r3
 8004c28:	69ba      	ldr	r2, [r7, #24]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	69ba      	ldr	r2, [r7, #24]
 8004c84:	4013      	ands	r3, r2
 8004c86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	69ba      	ldr	r2, [r7, #24]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004ccc:	69fb      	ldr	r3, [r7, #28]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f47f ae63 	bne.w	80049a8 <HAL_GPIO_Init+0x14>
  }
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	3724      	adds	r7, #36	; 0x24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr
 8004cf0:	58000400 	.word	0x58000400

08004cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	807b      	strh	r3, [r7, #2]
 8004d00:	4613      	mov	r3, r2
 8004d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d04:	787b      	ldrb	r3, [r7, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d0a:	887a      	ldrh	r2, [r7, #2]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004d10:	e003      	b.n	8004d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004d12:	887b      	ldrh	r3, [r7, #2]
 8004d14:	041a      	lsls	r2, r3, #16
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	619a      	str	r2, [r3, #24]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b082      	sub	sp, #8
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8004d30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d34:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 f804 	bl	8004d5a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d72:	b08f      	sub	sp, #60	; 0x3c
 8004d74:	af0a      	add	r7, sp, #40	; 0x28
 8004d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e116      	b.n	8004fb0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d106      	bne.n	8004da2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7fc f9ab 	bl	80010f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2203      	movs	r2, #3
 8004da6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f004 ffd9 	bl	8009d78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	687e      	ldr	r6, [r7, #4]
 8004dce:	466d      	mov	r5, sp
 8004dd0:	f106 0410 	add.w	r4, r6, #16
 8004dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004de0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004de4:	1d33      	adds	r3, r6, #4
 8004de6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004de8:	6838      	ldr	r0, [r7, #0]
 8004dea:	f004 ff57 	bl	8009c9c <USB_CoreInit>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0d7      	b.n	8004fb0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 ffc7 	bl	8009d9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
 8004e10:	e04a      	b.n	8004ea8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e12:	7bfa      	ldrb	r2, [r7, #15]
 8004e14:	6879      	ldr	r1, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	333d      	adds	r3, #61	; 0x3d
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e26:	7bfa      	ldrb	r2, [r7, #15]
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	440b      	add	r3, r1
 8004e34:	333c      	adds	r3, #60	; 0x3c
 8004e36:	7bfa      	ldrb	r2, [r7, #15]
 8004e38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	b298      	uxth	r0, r3
 8004e40:	6879      	ldr	r1, [r7, #4]
 8004e42:	4613      	mov	r3, r2
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	4413      	add	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3344      	adds	r3, #68	; 0x44
 8004e4e:	4602      	mov	r2, r0
 8004e50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e52:	7bfa      	ldrb	r2, [r7, #15]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	00db      	lsls	r3, r3, #3
 8004e5a:	4413      	add	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3340      	adds	r3, #64	; 0x40
 8004e62:	2200      	movs	r2, #0
 8004e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e66:	7bfa      	ldrb	r2, [r7, #15]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	4413      	add	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	3348      	adds	r3, #72	; 0x48
 8004e76:	2200      	movs	r2, #0
 8004e78:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e7a:	7bfa      	ldrb	r2, [r7, #15]
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	440b      	add	r3, r1
 8004e88:	334c      	adds	r3, #76	; 0x4c
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3354      	adds	r3, #84	; 0x54
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	73fb      	strb	r3, [r7, #15]
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d3af      	bcc.n	8004e12 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	e044      	b.n	8004f42 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eb8:	7bfa      	ldrb	r2, [r7, #15]
 8004eba:	6879      	ldr	r1, [r7, #4]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	440b      	add	r3, r1
 8004ec6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004eca:	2200      	movs	r2, #0
 8004ecc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ee4:	7bfa      	ldrb	r2, [r7, #15]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3b5      	bcc.n	8004eb8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	603b      	str	r3, [r7, #0]
 8004f52:	687e      	ldr	r6, [r7, #4]
 8004f54:	466d      	mov	r5, sp
 8004f56:	f106 0410 	add.w	r4, r6, #16
 8004f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004f62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004f66:	e885 0003 	stmia.w	r5, {r0, r1}
 8004f6a:	1d33      	adds	r3, r6, #4
 8004f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f6e:	6838      	ldr	r0, [r7, #0]
 8004f70:	f004 ff60 	bl	8009e34 <USB_DevInit>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e014      	b.n	8004fb0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d102      	bne.n	8004fa4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f80a 	bl	8004fb8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f005 f91e 	bl	800a1ea <USB_DevDisconnect>

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fb8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_PCDEx_ActivateLPM+0x44>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	10000003 	.word	0x10000003

08005000 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005008:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	2b04      	cmp	r3, #4
 8005012:	d00a      	beq.n	800502a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e01f      	b.n	8005066 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	e01d      	b.n	8005066 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f023 0207 	bic.w	r2, r3, #7
 8005032:	490f      	ldr	r1, [pc, #60]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4313      	orrs	r3, r2
 8005038:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800503a:	f7fc fab1 	bl	80015a0 <HAL_GetTick>
 800503e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005040:	e009      	b.n	8005056 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005042:	f7fc faad 	bl	80015a0 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005050:	d901      	bls.n	8005056 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e007      	b.n	8005066 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_PWREx_ConfigSupply+0x70>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800505e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005062:	d1ee      	bne.n	8005042 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	58024800 	.word	0x58024800

08005074 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005078:	4b05      	ldr	r3, [pc, #20]	; (8005090 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4a04      	ldr	r2, [pc, #16]	; (8005090 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800507e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005082:	60d3      	str	r3, [r2, #12]
}
 8005084:	bf00      	nop
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	58024800 	.word	0x58024800

08005094 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b08c      	sub	sp, #48	; 0x30
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d102      	bne.n	80050a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f000 bc1d 	b.w	80058e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8087 	beq.w	80051c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b6:	4b99      	ldr	r3, [pc, #612]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050c0:	4b96      	ldr	r3, [pc, #600]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80050c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2b10      	cmp	r3, #16
 80050ca:	d007      	beq.n	80050dc <HAL_RCC_OscConfig+0x48>
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	2b18      	cmp	r3, #24
 80050d0:	d110      	bne.n	80050f4 <HAL_RCC_OscConfig+0x60>
 80050d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d4:	f003 0303 	and.w	r3, r3, #3
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d10b      	bne.n	80050f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050dc:	4b8f      	ldr	r3, [pc, #572]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d06c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x12e>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d168      	bne.n	80051c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e3f6      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050fc:	d106      	bne.n	800510c <HAL_RCC_OscConfig+0x78>
 80050fe:	4b87      	ldr	r3, [pc, #540]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a86      	ldr	r2, [pc, #536]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	e02e      	b.n	800516a <HAL_RCC_OscConfig+0xd6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10c      	bne.n	800512e <HAL_RCC_OscConfig+0x9a>
 8005114:	4b81      	ldr	r3, [pc, #516]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a80      	ldr	r2, [pc, #512]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4b7e      	ldr	r3, [pc, #504]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a7d      	ldr	r2, [pc, #500]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	e01d      	b.n	800516a <HAL_RCC_OscConfig+0xd6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005136:	d10c      	bne.n	8005152 <HAL_RCC_OscConfig+0xbe>
 8005138:	4b78      	ldr	r3, [pc, #480]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a77      	ldr	r2, [pc, #476]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800513e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b75      	ldr	r3, [pc, #468]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a74      	ldr	r2, [pc, #464]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800514a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	e00b      	b.n	800516a <HAL_RCC_OscConfig+0xd6>
 8005152:	4b72      	ldr	r3, [pc, #456]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a71      	ldr	r2, [pc, #452]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4b6f      	ldr	r3, [pc, #444]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a6e      	ldr	r2, [pc, #440]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005168:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d013      	beq.n	800519a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005172:	f7fc fa15 	bl	80015a0 <HAL_GetTick>
 8005176:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800517a:	f7fc fa11 	bl	80015a0 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b64      	cmp	r3, #100	; 0x64
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e3aa      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800518c:	4b63      	ldr	r3, [pc, #396]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0xe6>
 8005198:	e014      	b.n	80051c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519a:	f7fc fa01 	bl	80015a0 <HAL_GetTick>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a2:	f7fc f9fd 	bl	80015a0 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b64      	cmp	r3, #100	; 0x64
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e396      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051b4:	4b59      	ldr	r3, [pc, #356]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1f0      	bne.n	80051a2 <HAL_RCC_OscConfig+0x10e>
 80051c0:	e000      	b.n	80051c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80cb 	beq.w	8005368 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	4b52      	ldr	r3, [pc, #328]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051dc:	4b4f      	ldr	r3, [pc, #316]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80051de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_RCC_OscConfig+0x164>
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2b18      	cmp	r3, #24
 80051ec:	d156      	bne.n	800529c <HAL_RCC_OscConfig+0x208>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	f003 0303 	and.w	r3, r3, #3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d151      	bne.n	800529c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f8:	4b48      	ldr	r3, [pc, #288]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_RCC_OscConfig+0x17c>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e368      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005210:	4b42      	ldr	r3, [pc, #264]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f023 0219 	bic.w	r2, r3, #25
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	493f      	ldr	r1, [pc, #252]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800521e:	4313      	orrs	r3, r2
 8005220:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005222:	f7fc f9bd 	bl	80015a0 <HAL_GetTick>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005228:	e008      	b.n	800523c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522a:	f7fc f9b9 	bl	80015a0 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d901      	bls.n	800523c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e352      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800523c:	4b37      	ldr	r3, [pc, #220]	; (800531c <HAL_RCC_OscConfig+0x288>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d0f0      	beq.n	800522a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005248:	f7fc f9da 	bl	8001600 <HAL_GetREVID>
 800524c:	4603      	mov	r3, r0
 800524e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005252:	4293      	cmp	r3, r2
 8005254:	d817      	bhi.n	8005286 <HAL_RCC_OscConfig+0x1f2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	2b40      	cmp	r3, #64	; 0x40
 800525c:	d108      	bne.n	8005270 <HAL_RCC_OscConfig+0x1dc>
 800525e:	4b2f      	ldr	r3, [pc, #188]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005266:	4a2d      	ldr	r2, [pc, #180]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800526c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800526e:	e07b      	b.n	8005368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005270:	4b2a      	ldr	r3, [pc, #168]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	4927      	ldr	r1, [pc, #156]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005280:	4313      	orrs	r3, r2
 8005282:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005284:	e070      	b.n	8005368 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005286:	4b25      	ldr	r3, [pc, #148]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	061b      	lsls	r3, r3, #24
 8005294:	4921      	ldr	r1, [pc, #132]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800529a:	e065      	b.n	8005368 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d048      	beq.n	8005336 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052a4:	4b1d      	ldr	r3, [pc, #116]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f023 0219 	bic.w	r2, r3, #25
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	491a      	ldr	r1, [pc, #104]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b6:	f7fc f973 	bl	80015a0 <HAL_GetTick>
 80052ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80052be:	f7fc f96f 	bl	80015a0 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e308      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d0:	4b12      	ldr	r3, [pc, #72]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052dc:	f7fc f990 	bl	8001600 <HAL_GetREVID>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d81a      	bhi.n	8005320 <HAL_RCC_OscConfig+0x28c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d108      	bne.n	8005304 <HAL_RCC_OscConfig+0x270>
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052fa:	4a08      	ldr	r2, [pc, #32]	; (800531c <HAL_RCC_OscConfig+0x288>)
 80052fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005300:	6053      	str	r3, [r2, #4]
 8005302:	e031      	b.n	8005368 <HAL_RCC_OscConfig+0x2d4>
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	031b      	lsls	r3, r3, #12
 8005312:	4902      	ldr	r1, [pc, #8]	; (800531c <HAL_RCC_OscConfig+0x288>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
 8005318:	e026      	b.n	8005368 <HAL_RCC_OscConfig+0x2d4>
 800531a:	bf00      	nop
 800531c:	58024400 	.word	0x58024400
 8005320:	4b9a      	ldr	r3, [pc, #616]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	061b      	lsls	r3, r3, #24
 800532e:	4997      	ldr	r1, [pc, #604]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005330:	4313      	orrs	r3, r2
 8005332:	604b      	str	r3, [r1, #4]
 8005334:	e018      	b.n	8005368 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005336:	4b95      	ldr	r3, [pc, #596]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a94      	ldr	r2, [pc, #592]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800533c:	f023 0301 	bic.w	r3, r3, #1
 8005340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fc f92d 	bl	80015a0 <HAL_GetTick>
 8005346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800534a:	f7fc f929 	bl	80015a0 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e2c2      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800535c:	4b8b      	ldr	r3, [pc, #556]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0304 	and.w	r3, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1f0      	bne.n	800534a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0310 	and.w	r3, r3, #16
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 80a9 	beq.w	80054c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005376:	4b85      	ldr	r3, [pc, #532]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005380:	4b82      	ldr	r3, [pc, #520]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d007      	beq.n	800539c <HAL_RCC_OscConfig+0x308>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b18      	cmp	r3, #24
 8005390:	d13a      	bne.n	8005408 <HAL_RCC_OscConfig+0x374>
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d135      	bne.n	8005408 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800539c:	4b7b      	ldr	r3, [pc, #492]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_OscConfig+0x320>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e296      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053b4:	f7fc f924 	bl	8001600 <HAL_GetREVID>
 80053b8:	4603      	mov	r3, r0
 80053ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80053be:	4293      	cmp	r3, r2
 80053c0:	d817      	bhi.n	80053f2 <HAL_RCC_OscConfig+0x35e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d108      	bne.n	80053dc <HAL_RCC_OscConfig+0x348>
 80053ca:	4b70      	ldr	r3, [pc, #448]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053d2:	4a6e      	ldr	r2, [pc, #440]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80053d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053da:	e075      	b.n	80054c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053dc:	4b6b      	ldr	r3, [pc, #428]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	069b      	lsls	r3, r3, #26
 80053ea:	4968      	ldr	r1, [pc, #416]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f0:	e06a      	b.n	80054c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053f2:	4b66      	ldr	r3, [pc, #408]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	061b      	lsls	r3, r3, #24
 8005400:	4962      	ldr	r1, [pc, #392]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005402:	4313      	orrs	r3, r2
 8005404:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005406:	e05f      	b.n	80054c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d042      	beq.n	8005496 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005410:	4b5e      	ldr	r3, [pc, #376]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5d      	ldr	r2, [pc, #372]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fc f8c0 	bl	80015a0 <HAL_GetTick>
 8005420:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005424:	f7fc f8bc 	bl	80015a0 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e255      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005436:	4b55      	ldr	r3, [pc, #340]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0f0      	beq.n	8005424 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005442:	f7fc f8dd 	bl	8001600 <HAL_GetREVID>
 8005446:	4603      	mov	r3, r0
 8005448:	f241 0203 	movw	r2, #4099	; 0x1003
 800544c:	4293      	cmp	r3, r2
 800544e:	d817      	bhi.n	8005480 <HAL_RCC_OscConfig+0x3ec>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	2b20      	cmp	r3, #32
 8005456:	d108      	bne.n	800546a <HAL_RCC_OscConfig+0x3d6>
 8005458:	4b4c      	ldr	r3, [pc, #304]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005460:	4a4a      	ldr	r2, [pc, #296]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005466:	6053      	str	r3, [r2, #4]
 8005468:	e02e      	b.n	80054c8 <HAL_RCC_OscConfig+0x434>
 800546a:	4b48      	ldr	r3, [pc, #288]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	069b      	lsls	r3, r3, #26
 8005478:	4944      	ldr	r1, [pc, #272]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800547a:	4313      	orrs	r3, r2
 800547c:	604b      	str	r3, [r1, #4]
 800547e:	e023      	b.n	80054c8 <HAL_RCC_OscConfig+0x434>
 8005480:	4b42      	ldr	r3, [pc, #264]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	061b      	lsls	r3, r3, #24
 800548e:	493f      	ldr	r1, [pc, #252]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005490:	4313      	orrs	r3, r2
 8005492:	60cb      	str	r3, [r1, #12]
 8005494:	e018      	b.n	80054c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005496:	4b3d      	ldr	r3, [pc, #244]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a3c      	ldr	r2, [pc, #240]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800549c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a2:	f7fc f87d 	bl	80015a0 <HAL_GetTick>
 80054a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054aa:	f7fc f879 	bl	80015a0 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e212      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054bc:	4b33      	ldr	r3, [pc, #204]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0308 	and.w	r3, r3, #8
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d036      	beq.n	8005542 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d019      	beq.n	8005510 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80054de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e0:	4a2a      	ldr	r2, [pc, #168]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fc f85a 	bl	80015a0 <HAL_GetTick>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fc f856 	bl	80015a0 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1ef      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005502:	4b22      	ldr	r3, [pc, #136]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x45c>
 800550e:	e018      	b.n	8005542 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005510:	4b1e      	ldr	r3, [pc, #120]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005514:	4a1d      	ldr	r2, [pc, #116]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005516:	f023 0301 	bic.w	r3, r3, #1
 800551a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fc f840 	bl	80015a0 <HAL_GetTick>
 8005520:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005524:	f7fc f83c 	bl	80015a0 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e1d5      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005536:	4b15      	ldr	r3, [pc, #84]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1f0      	bne.n	8005524 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0320 	and.w	r3, r3, #32
 800554a:	2b00      	cmp	r3, #0
 800554c:	d039      	beq.n	80055c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01c      	beq.n	8005590 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a0c      	ldr	r2, [pc, #48]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800555c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005560:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005562:	f7fc f81d 	bl	80015a0 <HAL_GetTick>
 8005566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800556a:	f7fc f819 	bl	80015a0 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e1b2      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <HAL_RCC_OscConfig+0x4f8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x4d6>
 8005588:	e01b      	b.n	80055c2 <HAL_RCC_OscConfig+0x52e>
 800558a:	bf00      	nop
 800558c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005590:	4b9b      	ldr	r3, [pc, #620]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a9a      	ldr	r2, [pc, #616]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800559a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800559c:	f7fc f800 	bl	80015a0 <HAL_GetTick>
 80055a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055a4:	f7fb fffc 	bl	80015a0 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e195      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055b6:	4b92      	ldr	r3, [pc, #584]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f0      	bne.n	80055a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0304 	and.w	r3, r3, #4
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8081 	beq.w	80056d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055d0:	4b8c      	ldr	r3, [pc, #560]	; (8005804 <HAL_RCC_OscConfig+0x770>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a8b      	ldr	r2, [pc, #556]	; (8005804 <HAL_RCC_OscConfig+0x770>)
 80055d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055dc:	f7fb ffe0 	bl	80015a0 <HAL_GetTick>
 80055e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055e4:	f7fb ffdc 	bl	80015a0 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	; 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e175      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055f6:	4b83      	ldr	r3, [pc, #524]	; (8005804 <HAL_RCC_OscConfig+0x770>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d106      	bne.n	8005618 <HAL_RCC_OscConfig+0x584>
 800560a:	4b7d      	ldr	r3, [pc, #500]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4a7c      	ldr	r2, [pc, #496]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005610:	f043 0301 	orr.w	r3, r3, #1
 8005614:	6713      	str	r3, [r2, #112]	; 0x70
 8005616:	e02d      	b.n	8005674 <HAL_RCC_OscConfig+0x5e0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10c      	bne.n	800563a <HAL_RCC_OscConfig+0x5a6>
 8005620:	4b77      	ldr	r3, [pc, #476]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005624:	4a76      	ldr	r2, [pc, #472]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	6713      	str	r3, [r2, #112]	; 0x70
 800562c:	4b74      	ldr	r3, [pc, #464]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005630:	4a73      	ldr	r2, [pc, #460]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005632:	f023 0304 	bic.w	r3, r3, #4
 8005636:	6713      	str	r3, [r2, #112]	; 0x70
 8005638:	e01c      	b.n	8005674 <HAL_RCC_OscConfig+0x5e0>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	2b05      	cmp	r3, #5
 8005640:	d10c      	bne.n	800565c <HAL_RCC_OscConfig+0x5c8>
 8005642:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005646:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005648:	f043 0304 	orr.w	r3, r3, #4
 800564c:	6713      	str	r3, [r2, #112]	; 0x70
 800564e:	4b6c      	ldr	r3, [pc, #432]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	4a6b      	ldr	r2, [pc, #428]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005654:	f043 0301 	orr.w	r3, r3, #1
 8005658:	6713      	str	r3, [r2, #112]	; 0x70
 800565a:	e00b      	b.n	8005674 <HAL_RCC_OscConfig+0x5e0>
 800565c:	4b68      	ldr	r3, [pc, #416]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a67      	ldr	r2, [pc, #412]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005662:	f023 0301 	bic.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
 8005668:	4b65      	ldr	r3, [pc, #404]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a64      	ldr	r2, [pc, #400]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800566e:	f023 0304 	bic.w	r3, r3, #4
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800567c:	f7fb ff90 	bl	80015a0 <HAL_GetTick>
 8005680:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005682:	e00a      	b.n	800569a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005684:	f7fb ff8c 	bl	80015a0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e123      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569a:	4b59      	ldr	r3, [pc, #356]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d0ee      	beq.n	8005684 <HAL_RCC_OscConfig+0x5f0>
 80056a6:	e014      	b.n	80056d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fb ff7a 	bl	80015a0 <HAL_GetTick>
 80056ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056ae:	e00a      	b.n	80056c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b0:	f7fb ff76 	bl	80015a0 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80056be:	4293      	cmp	r3, r2
 80056c0:	d901      	bls.n	80056c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e10d      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056c6:	4b4e      	ldr	r3, [pc, #312]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80056c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ca:	f003 0302 	and.w	r3, r3, #2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1ee      	bne.n	80056b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8102 	beq.w	80058e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056dc:	4b48      	ldr	r3, [pc, #288]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056e4:	2b18      	cmp	r3, #24
 80056e6:	f000 80bd 	beq.w	8005864 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	f040 809e 	bne.w	8005830 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056f4:	4b42      	ldr	r3, [pc, #264]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a41      	ldr	r2, [pc, #260]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80056fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fb ff4e 	bl	80015a0 <HAL_GetTick>
 8005704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005708:	f7fb ff4a 	bl	80015a0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0e3      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800571a:	4b39      	ldr	r3, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005726:	4b36      	ldr	r3, [pc, #216]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800572a:	4b37      	ldr	r3, [pc, #220]	; (8005808 <HAL_RCC_OscConfig+0x774>)
 800572c:	4013      	ands	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005736:	0112      	lsls	r2, r2, #4
 8005738:	430a      	orrs	r2, r1
 800573a:	4931      	ldr	r1, [pc, #196]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800573c:	4313      	orrs	r3, r2
 800573e:	628b      	str	r3, [r1, #40]	; 0x28
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	3b01      	subs	r3, #1
 8005746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574e:	3b01      	subs	r3, #1
 8005750:	025b      	lsls	r3, r3, #9
 8005752:	b29b      	uxth	r3, r3
 8005754:	431a      	orrs	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	3b01      	subs	r3, #1
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005768:	3b01      	subs	r3, #1
 800576a:	061b      	lsls	r3, r3, #24
 800576c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005770:	4923      	ldr	r1, [pc, #140]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005772:	4313      	orrs	r3, r2
 8005774:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005776:	4b22      	ldr	r3, [pc, #136]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	4a21      	ldr	r2, [pc, #132]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005782:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCC_OscConfig+0x778>)
 8005788:	4013      	ands	r3, r2
 800578a:	687a      	ldr	r2, [r7, #4]
 800578c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800578e:	00d2      	lsls	r2, r2, #3
 8005790:	491b      	ldr	r1, [pc, #108]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005792:	4313      	orrs	r3, r2
 8005794:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005796:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 8005798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579a:	f023 020c 	bic.w	r2, r3, #12
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	4917      	ldr	r1, [pc, #92]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057a8:	4b15      	ldr	r3, [pc, #84]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	f023 0202 	bic.w	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	4912      	ldr	r1, [pc, #72]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057ba:	4b11      	ldr	r3, [pc, #68]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	4a10      	ldr	r2, [pc, #64]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c6:	4b0e      	ldr	r3, [pc, #56]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ca:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057d2:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80057de:	4b08      	ldr	r3, [pc, #32]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e2:	4a07      	ldr	r2, [pc, #28]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ea:	4b05      	ldr	r3, [pc, #20]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a04      	ldr	r2, [pc, #16]	; (8005800 <HAL_RCC_OscConfig+0x76c>)
 80057f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f6:	f7fb fed3 	bl	80015a0 <HAL_GetTick>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057fc:	e011      	b.n	8005822 <HAL_RCC_OscConfig+0x78e>
 80057fe:	bf00      	nop
 8005800:	58024400 	.word	0x58024400
 8005804:	58024800 	.word	0x58024800
 8005808:	fffffc0c 	.word	0xfffffc0c
 800580c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005810:	f7fb fec6 	bl	80015a0 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e05f      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005822:	4b32      	ldr	r3, [pc, #200]	; (80058ec <HAL_RCC_OscConfig+0x858>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x77c>
 800582e:	e057      	b.n	80058e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005830:	4b2e      	ldr	r3, [pc, #184]	; (80058ec <HAL_RCC_OscConfig+0x858>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a2d      	ldr	r2, [pc, #180]	; (80058ec <HAL_RCC_OscConfig+0x858>)
 8005836:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800583a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fb feb0 	bl	80015a0 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005844:	f7fb feac 	bl	80015a0 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e045      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005856:	4b25      	ldr	r3, [pc, #148]	; (80058ec <HAL_RCC_OscConfig+0x858>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x7b0>
 8005862:	e03d      	b.n	80058e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005864:	4b21      	ldr	r3, [pc, #132]	; (80058ec <HAL_RCC_OscConfig+0x858>)
 8005866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005868:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800586a:	4b20      	ldr	r3, [pc, #128]	; (80058ec <HAL_RCC_OscConfig+0x858>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	2b01      	cmp	r3, #1
 8005876:	d031      	beq.n	80058dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0203 	and.w	r2, r3, #3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d12a      	bne.n	80058dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	091b      	lsrs	r3, r3, #4
 800588a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d122      	bne.n	80058dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d11a      	bne.n	80058dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	0a5b      	lsrs	r3, r3, #9
 80058aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d111      	bne.n	80058dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	0c1b      	lsrs	r3, r3, #16
 80058bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d108      	bne.n	80058dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	0e1b      	lsrs	r3, r3, #24
 80058ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058d8:	429a      	cmp	r2, r3
 80058da:	d001      	beq.n	80058e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3730      	adds	r7, #48	; 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	58024400 	.word	0x58024400

080058f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e19c      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005904:	4b8a      	ldr	r3, [pc, #552]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d910      	bls.n	8005934 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005912:	4b87      	ldr	r3, [pc, #540]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 020f 	bic.w	r2, r3, #15
 800591a:	4985      	ldr	r1, [pc, #532]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b83      	ldr	r3, [pc, #524]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d001      	beq.n	8005934 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e184      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d010      	beq.n	8005962 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691a      	ldr	r2, [r3, #16]
 8005944:	4b7b      	ldr	r3, [pc, #492]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800594c:	429a      	cmp	r2, r3
 800594e:	d908      	bls.n	8005962 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005950:	4b78      	ldr	r3, [pc, #480]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	4975      	ldr	r1, [pc, #468]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 800595e:	4313      	orrs	r3, r2
 8005960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0308 	and.w	r3, r3, #8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d010      	beq.n	8005990 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	695a      	ldr	r2, [r3, #20]
 8005972:	4b70      	ldr	r3, [pc, #448]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800597a:	429a      	cmp	r2, r3
 800597c:	d908      	bls.n	8005990 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800597e:	4b6d      	ldr	r3, [pc, #436]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005980:	69db      	ldr	r3, [r3, #28]
 8005982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	496a      	ldr	r1, [pc, #424]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 800598c:	4313      	orrs	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	2b00      	cmp	r3, #0
 800599a:	d010      	beq.n	80059be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	4b64      	ldr	r3, [pc, #400]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d908      	bls.n	80059be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059ac:	4b61      	ldr	r3, [pc, #388]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059ae:	69db      	ldr	r3, [r3, #28]
 80059b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	495e      	ldr	r1, [pc, #376]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69da      	ldr	r2, [r3, #28]
 80059ce:	4b59      	ldr	r3, [pc, #356]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d908      	bls.n	80059ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059da:	4b56      	ldr	r3, [pc, #344]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69db      	ldr	r3, [r3, #28]
 80059e6:	4953      	ldr	r1, [pc, #332]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d010      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	4b4d      	ldr	r3, [pc, #308]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d908      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a08:	4b4a      	ldr	r3, [pc, #296]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	f023 020f 	bic.w	r2, r3, #15
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	4947      	ldr	r1, [pc, #284]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d055      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a26:	4b43      	ldr	r3, [pc, #268]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	4940      	ldr	r1, [pc, #256]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a40:	4b3c      	ldr	r3, [pc, #240]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d121      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0f6      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d115      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0ea      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a70:	4b30      	ldr	r3, [pc, #192]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0de      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a80:	4b2c      	ldr	r3, [pc, #176]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e0d6      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a90:	4b28      	ldr	r3, [pc, #160]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f023 0207 	bic.w	r2, r3, #7
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4925      	ldr	r1, [pc, #148]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aa2:	f7fb fd7d 	bl	80015a0 <HAL_GetTick>
 8005aa6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aaa:	f7fb fd79 	bl	80015a0 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e0be      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d1eb      	bne.n	8005aaa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d010      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	4b14      	ldr	r3, [pc, #80]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d208      	bcs.n	8005b00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f023 020f 	bic.w	r2, r3, #15
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	490e      	ldr	r1, [pc, #56]	; (8005b34 <HAL_RCC_ClockConfig+0x244>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 030f 	and.w	r3, r3, #15
 8005b08:	683a      	ldr	r2, [r7, #0]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d214      	bcs.n	8005b38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0e:	4b08      	ldr	r3, [pc, #32]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f023 020f 	bic.w	r2, r3, #15
 8005b16:	4906      	ldr	r1, [pc, #24]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <HAL_RCC_ClockConfig+0x240>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 030f 	and.w	r3, r3, #15
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d005      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e086      	b.n	8005c3e <HAL_RCC_ClockConfig+0x34e>
 8005b30:	52002000 	.word	0x52002000
 8005b34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d010      	beq.n	8005b66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	4b3f      	ldr	r3, [pc, #252]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d208      	bcs.n	8005b66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b54:	4b3c      	ldr	r3, [pc, #240]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	4939      	ldr	r1, [pc, #228]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d010      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	695a      	ldr	r2, [r3, #20]
 8005b76:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d208      	bcs.n	8005b94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b82:	4b31      	ldr	r3, [pc, #196]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	492e      	ldr	r1, [pc, #184]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d010      	beq.n	8005bc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	4b28      	ldr	r3, [pc, #160]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d208      	bcs.n	8005bc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005bb2:	69db      	ldr	r3, [r3, #28]
 8005bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	4922      	ldr	r1, [pc, #136]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d010      	beq.n	8005bf0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	4b1d      	ldr	r3, [pc, #116]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d208      	bcs.n	8005bf0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bde:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69db      	ldr	r3, [r3, #28]
 8005bea:	4917      	ldr	r1, [pc, #92]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bf0:	f000 f834 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	0a1b      	lsrs	r3, r3, #8
 8005bfc:	f003 030f 	and.w	r3, r3, #15
 8005c00:	4912      	ldr	r1, [pc, #72]	; (8005c4c <HAL_RCC_ClockConfig+0x35c>)
 8005c02:	5ccb      	ldrb	r3, [r1, r3]
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	; (8005c48 <HAL_RCC_ClockConfig+0x358>)
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	f003 030f 	and.w	r3, r3, #15
 8005c16:	4a0d      	ldr	r2, [pc, #52]	; (8005c4c <HAL_RCC_ClockConfig+0x35c>)
 8005c18:	5cd3      	ldrb	r3, [r2, r3]
 8005c1a:	f003 031f 	and.w	r3, r3, #31
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <HAL_RCC_ClockConfig+0x360>)
 8005c26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c28:	4a0a      	ldr	r2, [pc, #40]	; (8005c54 <HAL_RCC_ClockConfig+0x364>)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_RCC_ClockConfig+0x368>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fb fc6a 	bl	800150c <HAL_InitTick>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	58024400 	.word	0x58024400
 8005c4c:	0800ac20 	.word	0x0800ac20
 8005c50:	24000004 	.word	0x24000004
 8005c54:	24000000 	.word	0x24000000
 8005c58:	24000008 	.word	0x24000008

08005c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b089      	sub	sp, #36	; 0x24
 8005c60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c62:	4bb3      	ldr	r3, [pc, #716]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c6a:	2b18      	cmp	r3, #24
 8005c6c:	f200 8155 	bhi.w	8005f1a <HAL_RCC_GetSysClockFreq+0x2be>
 8005c70:	a201      	add	r2, pc, #4	; (adr r2, 8005c78 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005cdd 	.word	0x08005cdd
 8005c7c:	08005f1b 	.word	0x08005f1b
 8005c80:	08005f1b 	.word	0x08005f1b
 8005c84:	08005f1b 	.word	0x08005f1b
 8005c88:	08005f1b 	.word	0x08005f1b
 8005c8c:	08005f1b 	.word	0x08005f1b
 8005c90:	08005f1b 	.word	0x08005f1b
 8005c94:	08005f1b 	.word	0x08005f1b
 8005c98:	08005d03 	.word	0x08005d03
 8005c9c:	08005f1b 	.word	0x08005f1b
 8005ca0:	08005f1b 	.word	0x08005f1b
 8005ca4:	08005f1b 	.word	0x08005f1b
 8005ca8:	08005f1b 	.word	0x08005f1b
 8005cac:	08005f1b 	.word	0x08005f1b
 8005cb0:	08005f1b 	.word	0x08005f1b
 8005cb4:	08005f1b 	.word	0x08005f1b
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005f1b 	.word	0x08005f1b
 8005cc0:	08005f1b 	.word	0x08005f1b
 8005cc4:	08005f1b 	.word	0x08005f1b
 8005cc8:	08005f1b 	.word	0x08005f1b
 8005ccc:	08005f1b 	.word	0x08005f1b
 8005cd0:	08005f1b 	.word	0x08005f1b
 8005cd4:	08005f1b 	.word	0x08005f1b
 8005cd8:	08005d0f 	.word	0x08005d0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cdc:	4b94      	ldr	r3, [pc, #592]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0320 	and.w	r3, r3, #32
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d009      	beq.n	8005cfc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005ce8:	4b91      	ldr	r3, [pc, #580]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	08db      	lsrs	r3, r3, #3
 8005cee:	f003 0303 	and.w	r3, r3, #3
 8005cf2:	4a90      	ldr	r2, [pc, #576]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8005cf8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005cfa:	e111      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005cfc:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cfe:	61bb      	str	r3, [r7, #24]
    break;
 8005d00:	e10e      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d02:	4b8d      	ldr	r3, [pc, #564]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d04:	61bb      	str	r3, [r7, #24]
    break;
 8005d06:	e10b      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d08:	4b8c      	ldr	r3, [pc, #560]	; (8005f3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d0a:	61bb      	str	r3, [r7, #24]
    break;
 8005d0c:	e108      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d0e:	4b88      	ldr	r3, [pc, #544]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d18:	4b85      	ldr	r3, [pc, #532]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d24:	4b82      	ldr	r3, [pc, #520]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d2e:	4b80      	ldr	r3, [pc, #512]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	08db      	lsrs	r3, r3, #3
 8005d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
 8005d3e:	ee07 3a90 	vmov	s15, r3
 8005d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f000 80e1 	beq.w	8005f14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	f000 8083 	beq.w	8005e60 <HAL_RCC_GetSysClockFreq+0x204>
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	f200 80a1 	bhi.w	8005ea4 <HAL_RCC_GetSysClockFreq+0x248>
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d003      	beq.n	8005d70 <HAL_RCC_GetSysClockFreq+0x114>
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d056      	beq.n	8005e1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d6e:	e099      	b.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d70:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d02d      	beq.n	8005dd8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d7c:	4b6c      	ldr	r3, [pc, #432]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	08db      	lsrs	r3, r3, #3
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	4a6b      	ldr	r2, [pc, #428]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d88:	fa22 f303 	lsr.w	r3, r2, r3
 8005d8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da6:	4b62      	ldr	r3, [pc, #392]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dae:	ee07 3a90 	vmov	s15, r3
 8005db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005dd6:	e087      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dea:	4b51      	ldr	r3, [pc, #324]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dfe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e1a:	e065      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	ee07 3a90 	vmov	s15, r3
 8005e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e26:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2e:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e5e:	e043      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e72:	4b2f      	ldr	r3, [pc, #188]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e82:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea2:	e021      	b.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ee6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005ee8:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eec:	0a5b      	lsrs	r3, r3, #9
 8005eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	ee07 3a90 	vmov	s15, r3
 8005efc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f0c:	ee17 3a90 	vmov	r3, s15
 8005f10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f12:	e005      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61bb      	str	r3, [r7, #24]
    break;
 8005f18:	e002      	b.n	8005f20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005f1a:	4b07      	ldr	r3, [pc, #28]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f1c:	61bb      	str	r3, [r7, #24]
    break;
 8005f1e:	bf00      	nop
  }

  return sysclockfreq;
 8005f20:	69bb      	ldr	r3, [r7, #24]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3724      	adds	r7, #36	; 0x24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	58024400 	.word	0x58024400
 8005f34:	03d09000 	.word	0x03d09000
 8005f38:	003d0900 	.word	0x003d0900
 8005f3c:	007a1200 	.word	0x007a1200
 8005f40:	46000000 	.word	0x46000000
 8005f44:	4c742400 	.word	0x4c742400
 8005f48:	4a742400 	.word	0x4a742400
 8005f4c:	4af42400 	.word	0x4af42400

08005f50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f56:	f7ff fe81 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	0a1b      	lsrs	r3, r3, #8
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	490f      	ldr	r1, [pc, #60]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f68:	5ccb      	ldrb	r3, [r1, r3]
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f74:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	f003 030f 	and.w	r3, r3, #15
 8005f7c:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	f003 031f 	and.w	r3, r3, #31
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	4a07      	ldr	r2, [pc, #28]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f94:	4b04      	ldr	r3, [pc, #16]	; (8005fa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f96:	681b      	ldr	r3, [r3, #0]
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	58024400 	.word	0x58024400
 8005fa4:	0800ac20 	.word	0x0800ac20
 8005fa8:	24000004 	.word	0x24000004
 8005fac:	24000000 	.word	0x24000000

08005fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fb4:	f7ff ffcc 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	091b      	lsrs	r3, r3, #4
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	4904      	ldr	r1, [pc, #16]	; (8005fd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fc6:	5ccb      	ldrb	r3, [r1, r3]
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	0800ac20 	.word	0x0800ac20

08005fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fe0:	f7ff ffb6 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe8:	69db      	ldr	r3, [r3, #28]
 8005fea:	0a1b      	lsrs	r3, r3, #8
 8005fec:	f003 0307 	and.w	r3, r3, #7
 8005ff0:	4904      	ldr	r1, [pc, #16]	; (8006004 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ff2:	5ccb      	ldrb	r3, [r1, r3]
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	58024400 	.word	0x58024400
 8006004:	0800ac20 	.word	0x0800ac20

08006008 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006010:	2300      	movs	r3, #0
 8006012:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006014:	2300      	movs	r3, #0
 8006016:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d03f      	beq.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006028:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800602c:	d02a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800602e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006032:	d824      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006034:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006038:	d018      	beq.n	800606c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800603a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800603e:	d81e      	bhi.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006040:	2b00      	cmp	r3, #0
 8006042:	d003      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006048:	d007      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800604a:	e018      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4ba3      	ldr	r3, [pc, #652]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800604e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006050:	4aa2      	ldr	r2, [pc, #648]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006056:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006058:	e015      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	3304      	adds	r3, #4
 800605e:	2102      	movs	r1, #2
 8006060:	4618      	mov	r0, r3
 8006062:	f001 f9d5 	bl	8007410 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800606a:	e00c      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3324      	adds	r3, #36	; 0x24
 8006070:	2102      	movs	r1, #2
 8006072:	4618      	mov	r0, r3
 8006074:	f001 fa7e 	bl	8007574 <RCCEx_PLL3_Config>
 8006078:	4603      	mov	r3, r0
 800607a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800607c:	e003      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	75fb      	strb	r3, [r7, #23]
      break;
 8006082:	e000      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006084:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d109      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800608c:	4b93      	ldr	r3, [pc, #588]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800608e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006090:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006098:	4990      	ldr	r1, [pc, #576]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800609a:	4313      	orrs	r3, r2
 800609c:	650b      	str	r3, [r1, #80]	; 0x50
 800609e:	e001      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a0:	7dfb      	ldrb	r3, [r7, #23]
 80060a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d03d      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b4:	2b04      	cmp	r3, #4
 80060b6:	d826      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060d5 	.word	0x080060d5
 80060c4:	080060e3 	.word	0x080060e3
 80060c8:	080060f5 	.word	0x080060f5
 80060cc:	0800610d 	.word	0x0800610d
 80060d0:	0800610d 	.word	0x0800610d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d4:	4b81      	ldr	r3, [pc, #516]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d8:	4a80      	ldr	r2, [pc, #512]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80060da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060e0:	e015      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3304      	adds	r3, #4
 80060e6:	2100      	movs	r1, #0
 80060e8:	4618      	mov	r0, r3
 80060ea:	f001 f991 	bl	8007410 <RCCEx_PLL2_Config>
 80060ee:	4603      	mov	r3, r0
 80060f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060f2:	e00c      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	3324      	adds	r3, #36	; 0x24
 80060f8:	2100      	movs	r1, #0
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fa3a 	bl	8007574 <RCCEx_PLL3_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006104:	e003      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	75fb      	strb	r3, [r7, #23]
      break;
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800610c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006114:	4b71      	ldr	r3, [pc, #452]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	f023 0207 	bic.w	r2, r3, #7
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006120:	496e      	ldr	r1, [pc, #440]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006122:	4313      	orrs	r3, r2
 8006124:	650b      	str	r3, [r1, #80]	; 0x50
 8006126:	e001      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006134:	2b00      	cmp	r3, #0
 8006136:	d042      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006140:	d02b      	beq.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006146:	d825      	bhi.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006148:	2bc0      	cmp	r3, #192	; 0xc0
 800614a:	d028      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800614c:	2bc0      	cmp	r3, #192	; 0xc0
 800614e:	d821      	bhi.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d016      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d81d      	bhi.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800615c:	2b40      	cmp	r3, #64	; 0x40
 800615e:	d007      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006160:	e018      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006162:	4b5e      	ldr	r3, [pc, #376]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	4a5d      	ldr	r2, [pc, #372]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800616c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800616e:	e017      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	2100      	movs	r1, #0
 8006176:	4618      	mov	r0, r3
 8006178:	f001 f94a 	bl	8007410 <RCCEx_PLL2_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006180:	e00e      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3324      	adds	r3, #36	; 0x24
 8006186:	2100      	movs	r1, #0
 8006188:	4618      	mov	r0, r3
 800618a:	f001 f9f3 	bl	8007574 <RCCEx_PLL3_Config>
 800618e:	4603      	mov	r3, r0
 8006190:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006192:	e005      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	75fb      	strb	r3, [r7, #23]
      break;
 8006198:	e002      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800619a:	bf00      	nop
 800619c:	e000      	b.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800619e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80061a6:	4b4d      	ldr	r3, [pc, #308]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	494a      	ldr	r1, [pc, #296]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80061b4:	4313      	orrs	r3, r2
 80061b6:	650b      	str	r3, [r1, #80]	; 0x50
 80061b8:	e001      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	7dfb      	ldrb	r3, [r7, #23]
 80061bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d049      	beq.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061d4:	d030      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80061d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061da:	d82a      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061e0:	d02c      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80061e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061e6:	d824      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ec:	d018      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80061ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061f2:	d81e      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80061f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061fc:	d007      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x206>
 80061fe:	e018      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006200:	4b36      	ldr	r3, [pc, #216]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006204:	4a35      	ldr	r2, [pc, #212]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006206:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800620a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800620c:	e017      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f001 f8fb 	bl	8007410 <RCCEx_PLL2_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800621e:	e00e      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3324      	adds	r3, #36	; 0x24
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f001 f9a4 	bl	8007574 <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006230:	e005      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	75fb      	strb	r3, [r7, #23]
      break;
 8006236:	e002      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006238:	bf00      	nop
 800623a:	e000      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800623c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800623e:	7dfb      	ldrb	r3, [r7, #23]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006244:	4b25      	ldr	r3, [pc, #148]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006248:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006252:	4922      	ldr	r1, [pc, #136]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006254:	4313      	orrs	r3, r2
 8006256:	658b      	str	r3, [r1, #88]	; 0x58
 8006258:	e001      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625a:	7dfb      	ldrb	r3, [r7, #23]
 800625c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006266:	2b00      	cmp	r3, #0
 8006268:	d04b      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006270:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006274:	d030      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006276:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800627a:	d82a      	bhi.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800627c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006280:	d02e      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006282:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006286:	d824      	bhi.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800628c:	d018      	beq.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800628e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006292:	d81e      	bhi.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800629c:	d007      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800629e:	e018      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a0:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80062a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062ac:	e019      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3304      	adds	r3, #4
 80062b2:	2100      	movs	r1, #0
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f8ab 	bl	8007410 <RCCEx_PLL2_Config>
 80062ba:	4603      	mov	r3, r0
 80062bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80062be:	e010      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3324      	adds	r3, #36	; 0x24
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f001 f954 	bl	8007574 <RCCEx_PLL3_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80062d0:	e007      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	75fb      	strb	r3, [r7, #23]
      break;
 80062d6:	e004      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80062dc:	58024400 	.word	0x58024400
      break;
 80062e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062e8:	4b99      	ldr	r3, [pc, #612]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f6:	4996      	ldr	r1, [pc, #600]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	658b      	str	r3, [r1, #88]	; 0x58
 80062fc:	e001      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fe:	7dfb      	ldrb	r3, [r7, #23]
 8006300:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d032      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006312:	2b30      	cmp	r3, #48	; 0x30
 8006314:	d01c      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	d817      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d00c      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800631e:	2b20      	cmp	r3, #32
 8006320:	d813      	bhi.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d016      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006326:	2b10      	cmp	r3, #16
 8006328:	d10f      	bne.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632a:	4b89      	ldr	r3, [pc, #548]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800632c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800632e:	4a88      	ldr	r2, [pc, #544]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006334:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006336:	e00e      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3304      	adds	r3, #4
 800633c:	2102      	movs	r1, #2
 800633e:	4618      	mov	r0, r3
 8006340:	f001 f866 	bl	8007410 <RCCEx_PLL2_Config>
 8006344:	4603      	mov	r3, r0
 8006346:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006348:	e005      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	75fb      	strb	r3, [r7, #23]
      break;
 800634e:	e002      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006350:	bf00      	nop
 8006352:	e000      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006354:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006356:	7dfb      	ldrb	r3, [r7, #23]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d109      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800635c:	4b7c      	ldr	r3, [pc, #496]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800635e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006360:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006368:	4979      	ldr	r1, [pc, #484]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800636a:	4313      	orrs	r3, r2
 800636c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800636e:	e001      	b.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
 8006372:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d047      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006388:	d030      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800638a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800638e:	d82a      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006390:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006394:	d02c      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006396:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800639a:	d824      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800639c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a0:	d018      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	d81e      	bhi.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80063ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b0:	d007      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80063b2:	e018      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b4:	4b66      	ldr	r3, [pc, #408]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b8:	4a65      	ldr	r2, [pc, #404]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063c0:	e017      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2100      	movs	r1, #0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 f821 	bl	8007410 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063d2:	e00e      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	3324      	adds	r3, #36	; 0x24
 80063d8:	2100      	movs	r1, #0
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 f8ca 	bl	8007574 <RCCEx_PLL3_Config>
 80063e0:	4603      	mov	r3, r0
 80063e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80063e4:	e005      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ea:	e002      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80063f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d109      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063f8:	4b55      	ldr	r3, [pc, #340]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80063fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006404:	4952      	ldr	r1, [pc, #328]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006406:	4313      	orrs	r3, r2
 8006408:	650b      	str	r3, [r1, #80]	; 0x50
 800640a:	e001      	b.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	7dfb      	ldrb	r3, [r7, #23]
 800640e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d049      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006424:	d02e      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006426:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800642a:	d828      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800642c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006430:	d02a      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006432:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006436:	d822      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006438:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800643c:	d026      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800643e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006442:	d81c      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006444:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006448:	d010      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800644a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800644e:	d816      	bhi.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d01d      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006458:	d111      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	3304      	adds	r3, #4
 800645e:	2101      	movs	r1, #1
 8006460:	4618      	mov	r0, r3
 8006462:	f000 ffd5 	bl	8007410 <RCCEx_PLL2_Config>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800646a:	e012      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	3324      	adds	r3, #36	; 0x24
 8006470:	2101      	movs	r1, #1
 8006472:	4618      	mov	r0, r3
 8006474:	f001 f87e 	bl	8007574 <RCCEx_PLL3_Config>
 8006478:	4603      	mov	r3, r0
 800647a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800647c:	e009      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	75fb      	strb	r3, [r7, #23]
      break;
 8006482:	e006      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006484:	bf00      	nop
 8006486:	e004      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006490:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006492:	7dfb      	ldrb	r3, [r7, #23]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006498:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800649a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800649c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064a4:	492a      	ldr	r1, [pc, #168]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	650b      	str	r3, [r1, #80]	; 0x50
 80064aa:	e001      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d04d      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064c6:	d02e      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80064c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064cc:	d828      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d02a      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x522>
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d8:	d822      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064de:	d026      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x526>
 80064e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064e4:	d81c      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064ea:	d010      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x506>
 80064ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064f0:	d816      	bhi.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d01d      	beq.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80064f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064fa:	d111      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	2101      	movs	r1, #1
 8006502:	4618      	mov	r0, r3
 8006504:	f000 ff84 	bl	8007410 <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800650c:	e012      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3324      	adds	r3, #36	; 0x24
 8006512:	2101      	movs	r1, #1
 8006514:	4618      	mov	r0, r3
 8006516:	f001 f82d 	bl	8007574 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800651e:	e009      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
      break;
 8006524:	e006      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006526:	bf00      	nop
 8006528:	e004      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800652a:	bf00      	nop
 800652c:	e002      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006532:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006534:	7dfb      	ldrb	r3, [r7, #23]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10c      	bne.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800653c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006548:	4901      	ldr	r1, [pc, #4]	; (8006550 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800654a:	4313      	orrs	r3, r2
 800654c:	658b      	str	r3, [r1, #88]	; 0x58
 800654e:	e003      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006550:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006554:	7dfb      	ldrb	r3, [r7, #23]
 8006556:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006560:	2b00      	cmp	r3, #0
 8006562:	d02f      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800656c:	d00e      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800656e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006572:	d814      	bhi.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006574:	2b00      	cmp	r3, #0
 8006576:	d015      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006578:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800657c:	d10f      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800657e:	4baf      	ldr	r3, [pc, #700]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006582:	4aae      	ldr	r2, [pc, #696]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006588:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800658a:	e00c      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	2101      	movs	r1, #1
 8006592:	4618      	mov	r0, r3
 8006594:	f000 ff3c 	bl	8007410 <RCCEx_PLL2_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800659c:	e003      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	75fb      	strb	r3, [r7, #23]
      break;
 80065a2:	e000      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80065a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d109      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065ac:	4ba3      	ldr	r3, [pc, #652]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065b8:	49a0      	ldr	r1, [pc, #640]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	650b      	str	r3, [r1, #80]	; 0x50
 80065be:	e001      	b.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c0:	7dfb      	ldrb	r3, [r7, #23]
 80065c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d032      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d81b      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	08006617 	.word	0x08006617
 80065e4:	080065f1 	.word	0x080065f1
 80065e8:	080065ff 	.word	0x080065ff
 80065ec:	08006617 	.word	0x08006617
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f0:	4b92      	ldr	r3, [pc, #584]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	4a91      	ldr	r2, [pc, #580]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80065f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065fc:	e00c      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	3304      	adds	r3, #4
 8006602:	2102      	movs	r1, #2
 8006604:	4618      	mov	r0, r3
 8006606:	f000 ff03 	bl	8007410 <RCCEx_PLL2_Config>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800660e:	e003      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
      break;
 8006614:	e000      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006616:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006618:	7dfb      	ldrb	r3, [r7, #23]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d109      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800661e:	4b87      	ldr	r3, [pc, #540]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006622:	f023 0203 	bic.w	r2, r3, #3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662a:	4984      	ldr	r1, [pc, #528]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800662c:	4313      	orrs	r3, r2
 800662e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006630:	e001      	b.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 8086 	beq.w	8006750 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006644:	4b7e      	ldr	r3, [pc, #504]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7d      	ldr	r2, [pc, #500]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800664a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800664e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006650:	f7fa ffa6 	bl	80015a0 <HAL_GetTick>
 8006654:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006656:	e009      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006658:	f7fa ffa2 	bl	80015a0 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b64      	cmp	r3, #100	; 0x64
 8006664:	d902      	bls.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	75fb      	strb	r3, [r7, #23]
        break;
 800666a:	e005      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800666c:	4b74      	ldr	r3, [pc, #464]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ef      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d166      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800667e:	4b6f      	ldr	r3, [pc, #444]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006680:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006688:	4053      	eors	r3, r2
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	2b00      	cmp	r3, #0
 8006690:	d013      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006692:	4b6a      	ldr	r3, [pc, #424]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800669a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800669c:	4b67      	ldr	r3, [pc, #412]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800669e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a0:	4a66      	ldr	r2, [pc, #408]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066a8:	4b64      	ldr	r3, [pc, #400]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ac:	4a63      	ldr	r2, [pc, #396]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80066b4:	4a61      	ldr	r2, [pc, #388]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c4:	d115      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066c6:	f7fa ff6b 	bl	80015a0 <HAL_GetTick>
 80066ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066cc:	e00b      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ce:	f7fa ff67 	bl	80015a0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80066dc:	4293      	cmp	r3, r2
 80066de:	d902      	bls.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	75fb      	strb	r3, [r7, #23]
            break;
 80066e4:	e005      	b.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066e6:	4b55      	ldr	r3, [pc, #340]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0ed      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d126      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006706:	d10d      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006708:	4b4c      	ldr	r3, [pc, #304]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006716:	0919      	lsrs	r1, r3, #4
 8006718:	4b4a      	ldr	r3, [pc, #296]	; (8006844 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800671a:	400b      	ands	r3, r1
 800671c:	4947      	ldr	r1, [pc, #284]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800671e:	4313      	orrs	r3, r2
 8006720:	610b      	str	r3, [r1, #16]
 8006722:	e005      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006724:	4b45      	ldr	r3, [pc, #276]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	4a44      	ldr	r2, [pc, #272]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800672a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800672e:	6113      	str	r3, [r2, #16]
 8006730:	4b42      	ldr	r3, [pc, #264]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006732:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800673a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673e:	493f      	ldr	r1, [pc, #252]	; (800683c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006740:	4313      	orrs	r3, r2
 8006742:	670b      	str	r3, [r1, #112]	; 0x70
 8006744:	e004      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	75bb      	strb	r3, [r7, #22]
 800674a:	e001      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	f000 8085 	beq.w	8006868 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006762:	2b28      	cmp	r3, #40	; 0x28
 8006764:	d866      	bhi.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	08006849 	.word	0x08006849
 8006770:	08006835 	.word	0x08006835
 8006774:	08006835 	.word	0x08006835
 8006778:	08006835 	.word	0x08006835
 800677c:	08006835 	.word	0x08006835
 8006780:	08006835 	.word	0x08006835
 8006784:	08006835 	.word	0x08006835
 8006788:	08006835 	.word	0x08006835
 800678c:	08006811 	.word	0x08006811
 8006790:	08006835 	.word	0x08006835
 8006794:	08006835 	.word	0x08006835
 8006798:	08006835 	.word	0x08006835
 800679c:	08006835 	.word	0x08006835
 80067a0:	08006835 	.word	0x08006835
 80067a4:	08006835 	.word	0x08006835
 80067a8:	08006835 	.word	0x08006835
 80067ac:	08006823 	.word	0x08006823
 80067b0:	08006835 	.word	0x08006835
 80067b4:	08006835 	.word	0x08006835
 80067b8:	08006835 	.word	0x08006835
 80067bc:	08006835 	.word	0x08006835
 80067c0:	08006835 	.word	0x08006835
 80067c4:	08006835 	.word	0x08006835
 80067c8:	08006835 	.word	0x08006835
 80067cc:	08006849 	.word	0x08006849
 80067d0:	08006835 	.word	0x08006835
 80067d4:	08006835 	.word	0x08006835
 80067d8:	08006835 	.word	0x08006835
 80067dc:	08006835 	.word	0x08006835
 80067e0:	08006835 	.word	0x08006835
 80067e4:	08006835 	.word	0x08006835
 80067e8:	08006835 	.word	0x08006835
 80067ec:	08006849 	.word	0x08006849
 80067f0:	08006835 	.word	0x08006835
 80067f4:	08006835 	.word	0x08006835
 80067f8:	08006835 	.word	0x08006835
 80067fc:	08006835 	.word	0x08006835
 8006800:	08006835 	.word	0x08006835
 8006804:	08006835 	.word	0x08006835
 8006808:	08006835 	.word	0x08006835
 800680c:	08006849 	.word	0x08006849
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f000 fdfa 	bl	8007410 <RCCEx_PLL2_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006820:	e013      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3324      	adds	r3, #36	; 0x24
 8006826:	2101      	movs	r1, #1
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fea3 	bl	8007574 <RCCEx_PLL3_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006832:	e00a      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	75fb      	strb	r3, [r7, #23]
      break;
 8006838:	e007      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800683a:	bf00      	nop
 800683c:	58024400 	.word	0x58024400
 8006840:	58024800 	.word	0x58024800
 8006844:	00ffffcf 	.word	0x00ffffcf
      break;
 8006848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d109      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006850:	4b96      	ldr	r3, [pc, #600]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006854:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800685c:	4993      	ldr	r1, [pc, #588]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800685e:	4313      	orrs	r3, r2
 8006860:	654b      	str	r3, [r1, #84]	; 0x54
 8006862:	e001      	b.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	d038      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006878:	2b05      	cmp	r3, #5
 800687a:	d821      	bhi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	080068c7 	.word	0x080068c7
 8006888:	0800689d 	.word	0x0800689d
 800688c:	080068af 	.word	0x080068af
 8006890:	080068c7 	.word	0x080068c7
 8006894:	080068c7 	.word	0x080068c7
 8006898:	080068c7 	.word	0x080068c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3304      	adds	r3, #4
 80068a0:	2101      	movs	r1, #1
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fdb4 	bl	8007410 <RCCEx_PLL2_Config>
 80068a8:	4603      	mov	r3, r0
 80068aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068ac:	e00c      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	3324      	adds	r3, #36	; 0x24
 80068b2:	2101      	movs	r1, #1
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fe5d 	bl	8007574 <RCCEx_PLL3_Config>
 80068ba:	4603      	mov	r3, r0
 80068bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80068be:	e003      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
      break;
 80068c4:	e000      	b.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80068c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80068ce:	4b77      	ldr	r3, [pc, #476]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068d2:	f023 0207 	bic.w	r2, r3, #7
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068da:	4974      	ldr	r1, [pc, #464]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	654b      	str	r3, [r1, #84]	; 0x54
 80068e0:	e001      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d03a      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f8:	2b05      	cmp	r3, #5
 80068fa:	d821      	bhi.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006947 	.word	0x08006947
 8006908:	0800691d 	.word	0x0800691d
 800690c:	0800692f 	.word	0x0800692f
 8006910:	08006947 	.word	0x08006947
 8006914:	08006947 	.word	0x08006947
 8006918:	08006947 	.word	0x08006947
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	2101      	movs	r1, #1
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fd74 	bl	8007410 <RCCEx_PLL2_Config>
 8006928:	4603      	mov	r3, r0
 800692a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800692c:	e00c      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3324      	adds	r3, #36	; 0x24
 8006932:	2101      	movs	r1, #1
 8006934:	4618      	mov	r0, r3
 8006936:	f000 fe1d 	bl	8007574 <RCCEx_PLL3_Config>
 800693a:	4603      	mov	r3, r0
 800693c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800693e:	e003      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	75fb      	strb	r3, [r7, #23]
      break;
 8006944:	e000      	b.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800694e:	4b57      	ldr	r3, [pc, #348]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f023 0207 	bic.w	r2, r3, #7
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695c:	4953      	ldr	r1, [pc, #332]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800695e:	4313      	orrs	r3, r2
 8006960:	658b      	str	r3, [r1, #88]	; 0x58
 8006962:	e001      	b.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
 8006966:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0320 	and.w	r3, r3, #32
 8006970:	2b00      	cmp	r3, #0
 8006972:	d04b      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800697a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800697e:	d02e      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006980:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006984:	d828      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698a:	d02a      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d822      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006992:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006996:	d026      	beq.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006998:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800699c:	d81c      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800699e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a2:	d010      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80069a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a8:	d816      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d01d      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80069ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069b2:	d111      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	3304      	adds	r3, #4
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fd28 	bl	8007410 <RCCEx_PLL2_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069c4:	e012      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	3324      	adds	r3, #36	; 0x24
 80069ca:	2102      	movs	r1, #2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fdd1 	bl	8007574 <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80069d6:	e009      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	75fb      	strb	r3, [r7, #23]
      break;
 80069dc:	e006      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069de:	bf00      	nop
 80069e0:	e004      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069e2:	bf00      	nop
 80069e4:	e002      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069e6:	bf00      	nop
 80069e8:	e000      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80069ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ec:	7dfb      	ldrb	r3, [r7, #23]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80069f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a00:	492a      	ldr	r1, [pc, #168]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	654b      	str	r3, [r1, #84]	; 0x54
 8006a06:	e001      	b.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d04d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a22:	d02e      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006a24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006a28:	d828      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2e:	d02a      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a34:	d822      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a3a:	d026      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a40:	d81c      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a46:	d010      	beq.n	8006a6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a4c:	d816      	bhi.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d01d      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a56:	d111      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fcd6 	bl	8007410 <RCCEx_PLL2_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a68:	e012      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3324      	adds	r3, #36	; 0x24
 8006a6e:	2102      	movs	r1, #2
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fd7f 	bl	8007574 <RCCEx_PLL3_Config>
 8006a76:	4603      	mov	r3, r0
 8006a78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a7a:	e009      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a80:	e006      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a82:	bf00      	nop
 8006a84:	e004      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a86:	bf00      	nop
 8006a88:	e002      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a8a:	bf00      	nop
 8006a8c:	e000      	b.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006a8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d10c      	bne.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a96:	4b05      	ldr	r3, [pc, #20]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aa4:	4901      	ldr	r1, [pc, #4]	; (8006aac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	658b      	str	r3, [r1, #88]	; 0x58
 8006aaa:	e003      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006aac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d04b      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ac6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006aca:	d02e      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006acc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ad0:	d828      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad6:	d02a      	beq.n	8006b2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006adc:	d822      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006ade:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ae2:	d026      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006ae4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ae8:	d81c      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006aee:	d010      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006af4:	d816      	bhi.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d01d      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006afe:	d111      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	2100      	movs	r1, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fc82 	bl	8007410 <RCCEx_PLL2_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b10:	e012      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3324      	adds	r3, #36	; 0x24
 8006b16:	2102      	movs	r1, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fd2b 	bl	8007574 <RCCEx_PLL3_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006b22:	e009      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	75fb      	strb	r3, [r7, #23]
      break;
 8006b28:	e006      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b2a:	bf00      	nop
 8006b2c:	e004      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b2e:	bf00      	nop
 8006b30:	e002      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b32:	bf00      	nop
 8006b34:	e000      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b38:	7dfb      	ldrb	r3, [r7, #23]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d10a      	bne.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006b3e:	4b9d      	ldr	r3, [pc, #628]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b4c:	4999      	ldr	r1, [pc, #612]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	658b      	str	r3, [r1, #88]	; 0x58
 8006b52:	e001      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0308 	and.w	r3, r3, #8
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6e:	d10a      	bne.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3324      	adds	r3, #36	; 0x24
 8006b74:	2102      	movs	r1, #2
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 fcfc 	bl	8007574 <RCCEx_PLL3_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006b86:	4b8b      	ldr	r3, [pc, #556]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b94:	4987      	ldr	r1, [pc, #540]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0310 	and.w	r3, r3, #16
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d01a      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3324      	adds	r3, #36	; 0x24
 8006bb6:	2102      	movs	r1, #2
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fcdb 	bl	8007574 <RCCEx_PLL3_Config>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bc8:	4b7a      	ldr	r3, [pc, #488]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd6:	4977      	ldr	r1, [pc, #476]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d034      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006bee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf2:	d01d      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf8:	d817      	bhi.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c02:	d009      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006c04:	e011      	b.n	8006c2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fbff 	bl	8007410 <RCCEx_PLL2_Config>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c16:	e00c      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	3324      	adds	r3, #36	; 0x24
 8006c1c:	2102      	movs	r1, #2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f000 fca8 	bl	8007574 <RCCEx_PLL3_Config>
 8006c24:	4603      	mov	r3, r0
 8006c26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006c28:	e003      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2e:	e000      	b.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006c38:	4b5e      	ldr	r3, [pc, #376]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c46:	495b      	ldr	r1, [pc, #364]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	658b      	str	r3, [r1, #88]	; 0x58
 8006c4c:	e001      	b.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c4e:	7dfb      	ldrb	r3, [r7, #23]
 8006c50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d033      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c68:	d01c      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006c6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c6e:	d816      	bhi.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c74:	d003      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006c76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c7a:	d007      	beq.n	8006c8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006c7c:	e00f      	b.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c7e:	4b4d      	ldr	r3, [pc, #308]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c82:	4a4c      	ldr	r2, [pc, #304]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c8a:	e00c      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	3324      	adds	r3, #36	; 0x24
 8006c90:	2101      	movs	r1, #1
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fc6e 	bl	8007574 <RCCEx_PLL3_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c9c:	e003      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca2:	e000      	b.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006ca4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cac:	4b41      	ldr	r3, [pc, #260]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cba:	493e      	ldr	r1, [pc, #248]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	654b      	str	r3, [r1, #84]	; 0x54
 8006cc0:	e001      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
 8006cc4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d029      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d003      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cde:	d007      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006ce0:	e00f      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce2:	4b34      	ldr	r3, [pc, #208]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	4a33      	ldr	r2, [pc, #204]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006cee:	e00b      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3304      	adds	r3, #4
 8006cf4:	2102      	movs	r1, #2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fb8a 	bl	8007410 <RCCEx_PLL2_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006d00:	e002      	b.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
      break;
 8006d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d08:	7dfb      	ldrb	r3, [r7, #23]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d109      	bne.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006d0e:	4b29      	ldr	r3, [pc, #164]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	4926      	ldr	r1, [pc, #152]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006d20:	e001      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d22:	7dfb      	ldrb	r3, [r7, #23]
 8006d24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3324      	adds	r3, #36	; 0x24
 8006d36:	2102      	movs	r1, #2
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f000 fc1b 	bl	8007574 <RCCEx_PLL3_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d033      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d5c:	d017      	beq.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d62:	d811      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d68:	d013      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6e:	d80b      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d010      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d106      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d7a:	4b0e      	ldr	r3, [pc, #56]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	4a0d      	ldr	r2, [pc, #52]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d86:	e007      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8c:	e004      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d8e:	bf00      	nop
 8006d90:	e002      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d92:	bf00      	nop
 8006d94:	e000      	b.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006d96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006daa:	4902      	ldr	r1, [pc, #8]	; (8006db4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	654b      	str	r3, [r1, #84]	; 0x54
 8006db0:	e004      	b.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006db2:	bf00      	nop
 8006db4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db8:	7dfb      	ldrb	r3, [r7, #23]
 8006dba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d008      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006dc8:	4b31      	ldr	r3, [pc, #196]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd4:	492e      	ldr	r1, [pc, #184]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006de6:	4b2a      	ldr	r3, [pc, #168]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006df4:	4926      	ldr	r1, [pc, #152]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d008      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006e06:	4b22      	ldr	r3, [pc, #136]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e12:	491f      	ldr	r1, [pc, #124]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e24:	4b1a      	ldr	r3, [pc, #104]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	4a19      	ldr	r2, [pc, #100]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e2e:	6113      	str	r3, [r2, #16]
 8006e30:	4b17      	ldr	r3, [pc, #92]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e32:	691a      	ldr	r2, [r3, #16]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006e3a:	4915      	ldr	r1, [pc, #84]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	da08      	bge.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006e48:	4b11      	ldr	r3, [pc, #68]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e54:	490e      	ldr	r1, [pc, #56]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e66:	4b0a      	ldr	r3, [pc, #40]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e74:	4906      	ldr	r1, [pc, #24]	; (8006e90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006e7a:	7dbb      	ldrb	r3, [r7, #22]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3718      	adds	r7, #24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400

08006e94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006e98:	f7ff f85a 	bl	8005f50 <HAL_RCC_GetHCLKFreq>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006ea0:	6a1b      	ldr	r3, [r3, #32]
 8006ea2:	091b      	lsrs	r3, r3, #4
 8006ea4:	f003 0307 	and.w	r3, r3, #7
 8006ea8:	4904      	ldr	r1, [pc, #16]	; (8006ebc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006eaa:	5ccb      	ldrb	r3, [r1, r3]
 8006eac:	f003 031f 	and.w	r3, r3, #31
 8006eb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	58024400 	.word	0x58024400
 8006ebc:	0800ac20 	.word	0x0800ac20

08006ec0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b089      	sub	sp, #36	; 0x24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ec8:	4ba1      	ldr	r3, [pc, #644]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006ed2:	4b9f      	ldr	r3, [pc, #636]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed6:	0b1b      	lsrs	r3, r3, #12
 8006ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006edc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006ede:	4b9c      	ldr	r3, [pc, #624]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee2:	091b      	lsrs	r3, r3, #4
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006eea:	4b99      	ldr	r3, [pc, #612]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	08db      	lsrs	r3, r3, #3
 8006ef0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	ee07 3a90 	vmov	s15, r3
 8006efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 8111 	beq.w	8007130 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	f000 8083 	beq.w	800701c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b02      	cmp	r3, #2
 8006f1a:	f200 80a1 	bhi.w	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d003      	beq.n	8006f2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d056      	beq.n	8006fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f2a:	e099      	b.n	8007060 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f2c:	4b88      	ldr	r3, [pc, #544]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0320 	and.w	r3, r3, #32
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d02d      	beq.n	8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006f38:	4b85      	ldr	r3, [pc, #532]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	08db      	lsrs	r3, r3, #3
 8006f3e:	f003 0303 	and.w	r3, r3, #3
 8006f42:	4a84      	ldr	r2, [pc, #528]	; (8007154 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006f44:	fa22 f303 	lsr.w	r3, r2, r3
 8006f48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b7b      	ldr	r3, [pc, #492]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f92:	e087      	b.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800715c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa6:	4b6a      	ldr	r3, [pc, #424]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fd6:	e065      	b.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fea:	4b59      	ldr	r3, [pc, #356]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800700e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800701a:	e043      	b.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007164 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800702a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702e:	4b48      	ldr	r3, [pc, #288]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007042:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800705e:	e021      	b.n	80070a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800706e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007072:	4b37      	ldr	r3, [pc, #220]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707a:	ee07 3a90 	vmov	s15, r3
 800707e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007082:	ed97 6a03 	vldr	s12, [r7, #12]
 8007086:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007158 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800708a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800708e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800709e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80070a4:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a8:	0a5b      	lsrs	r3, r3, #9
 80070aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070be:	edd7 6a07 	vldr	s13, [r7, #28]
 80070c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ca:	ee17 2a90 	vmov	r2, s15
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80070d2:	4b1f      	ldr	r3, [pc, #124]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	0c1b      	lsrs	r3, r3, #16
 80070d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070dc:	ee07 3a90 	vmov	s15, r3
 80070e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070f8:	ee17 2a90 	vmov	r2, s15
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007100:	4b13      	ldr	r3, [pc, #76]	; (8007150 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	0e1b      	lsrs	r3, r3, #24
 8007106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007116:	ee37 7a87 	vadd.f32	s14, s15, s14
 800711a:	edd7 6a07 	vldr	s13, [r7, #28]
 800711e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007126:	ee17 2a90 	vmov	r2, s15
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800712e:	e008      	b.n	8007142 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	609a      	str	r2, [r3, #8]
}
 8007142:	bf00      	nop
 8007144:	3724      	adds	r7, #36	; 0x24
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	58024400 	.word	0x58024400
 8007154:	03d09000 	.word	0x03d09000
 8007158:	46000000 	.word	0x46000000
 800715c:	4c742400 	.word	0x4c742400
 8007160:	4a742400 	.word	0x4a742400
 8007164:	4af42400 	.word	0x4af42400

08007168 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007168:	b480      	push	{r7}
 800716a:	b089      	sub	sp, #36	; 0x24
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007170:	4ba1      	ldr	r3, [pc, #644]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800717a:	4b9f      	ldr	r3, [pc, #636]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800717c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800717e:	0d1b      	lsrs	r3, r3, #20
 8007180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007184:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007186:	4b9c      	ldr	r3, [pc, #624]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	0a1b      	lsrs	r3, r3, #8
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007192:	4b99      	ldr	r3, [pc, #612]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	ee07 3a90 	vmov	s15, r3
 80071a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8111 	beq.w	80073d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	f000 8083 	beq.w	80072c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	f200 80a1 	bhi.w	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d056      	beq.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80071d2:	e099      	b.n	8007308 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071d4:	4b88      	ldr	r3, [pc, #544]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d02d      	beq.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071e0:	4b85      	ldr	r3, [pc, #532]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	08db      	lsrs	r3, r3, #3
 80071e6:	f003 0303 	and.w	r3, r3, #3
 80071ea:	4a84      	ldr	r2, [pc, #528]	; (80073fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
 80071f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800720a:	4b7b      	ldr	r3, [pc, #492]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800721a:	ed97 6a03 	vldr	s12, [r7, #12]
 800721e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800722a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007236:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800723a:	e087      	b.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	ee07 3a90 	vmov	s15, r3
 8007242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007246:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007404 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800724a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724e:	4b6a      	ldr	r3, [pc, #424]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007262:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800726a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800727a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800727e:	e065      	b.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800728a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800728e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007292:	4b59      	ldr	r3, [pc, #356]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072c2:	e043      	b.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800740c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80072d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d6:	4b48      	ldr	r3, [pc, #288]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80072ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007306:	e021      	b.n	800734c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800731a:	4b37      	ldr	r3, [pc, #220]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800732a:	ed97 6a03 	vldr	s12, [r7, #12]
 800732e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007400 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800733a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800733e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800734a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800734c:	4b2a      	ldr	r3, [pc, #168]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800734e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007350:	0a5b      	lsrs	r3, r3, #9
 8007352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007356:	ee07 3a90 	vmov	s15, r3
 800735a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800735e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007362:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007366:	edd7 6a07 	vldr	s13, [r7, #28]
 800736a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800736e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007372:	ee17 2a90 	vmov	r2, s15
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800737a:	4b1f      	ldr	r3, [pc, #124]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	0c1b      	lsrs	r3, r3, #16
 8007380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007394:	edd7 6a07 	vldr	s13, [r7, #28]
 8007398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a0:	ee17 2a90 	vmov	r2, s15
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80073a8:	4b13      	ldr	r3, [pc, #76]	; (80073f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	0e1b      	lsrs	r3, r3, #24
 80073ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b2:	ee07 3a90 	vmov	s15, r3
 80073b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073ce:	ee17 2a90 	vmov	r2, s15
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80073d6:	e008      	b.n	80073ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	609a      	str	r2, [r3, #8]
}
 80073ea:	bf00      	nop
 80073ec:	3724      	adds	r7, #36	; 0x24
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	58024400 	.word	0x58024400
 80073fc:	03d09000 	.word	0x03d09000
 8007400:	46000000 	.word	0x46000000
 8007404:	4c742400 	.word	0x4c742400
 8007408:	4a742400 	.word	0x4a742400
 800740c:	4af42400 	.word	0x4af42400

08007410 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800741a:	2300      	movs	r3, #0
 800741c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800741e:	4b53      	ldr	r3, [pc, #332]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	2b03      	cmp	r3, #3
 8007428:	d101      	bne.n	800742e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e099      	b.n	8007562 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800742e:	4b4f      	ldr	r3, [pc, #316]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a4e      	ldr	r2, [pc, #312]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007434:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007438:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800743a:	f7fa f8b1 	bl	80015a0 <HAL_GetTick>
 800743e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007440:	e008      	b.n	8007454 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007442:	f7fa f8ad 	bl	80015a0 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	2b02      	cmp	r3, #2
 800744e:	d901      	bls.n	8007454 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e086      	b.n	8007562 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007454:	4b45      	ldr	r3, [pc, #276]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1f0      	bne.n	8007442 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007460:	4b42      	ldr	r3, [pc, #264]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	031b      	lsls	r3, r3, #12
 800746e:	493f      	ldr	r1, [pc, #252]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007470:	4313      	orrs	r3, r2
 8007472:	628b      	str	r3, [r1, #40]	; 0x28
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	3b01      	subs	r3, #1
 800747a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	3b01      	subs	r3, #1
 8007484:	025b      	lsls	r3, r3, #9
 8007486:	b29b      	uxth	r3, r3
 8007488:	431a      	orrs	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	3b01      	subs	r3, #1
 8007490:	041b      	lsls	r3, r3, #16
 8007492:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	3b01      	subs	r3, #1
 800749e:	061b      	lsls	r3, r3, #24
 80074a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074a4:	4931      	ldr	r1, [pc, #196]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80074aa:	4b30      	ldr	r3, [pc, #192]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	492d      	ldr	r1, [pc, #180]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80074bc:	4b2b      	ldr	r3, [pc, #172]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c0:	f023 0220 	bic.w	r2, r3, #32
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	4928      	ldr	r1, [pc, #160]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80074ce:	4b27      	ldr	r3, [pc, #156]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d2:	4a26      	ldr	r2, [pc, #152]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074d4:	f023 0310 	bic.w	r3, r3, #16
 80074d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074da:	4b24      	ldr	r3, [pc, #144]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074de:	4b24      	ldr	r3, [pc, #144]	; (8007570 <RCCEx_PLL2_Config+0x160>)
 80074e0:	4013      	ands	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	69d2      	ldr	r2, [r2, #28]
 80074e6:	00d2      	lsls	r2, r2, #3
 80074e8:	4920      	ldr	r1, [pc, #128]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074ee:	4b1f      	ldr	r3, [pc, #124]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	4a1e      	ldr	r2, [pc, #120]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 80074f4:	f043 0310 	orr.w	r3, r3, #16
 80074f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d106      	bne.n	800750e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007500:	4b1a      	ldr	r3, [pc, #104]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	4a19      	ldr	r2, [pc, #100]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800750a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800750c:	e00f      	b.n	800752e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d106      	bne.n	8007522 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007514:	4b15      	ldr	r3, [pc, #84]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a14      	ldr	r2, [pc, #80]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 800751a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007520:	e005      	b.n	800752e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007522:	4b12      	ldr	r3, [pc, #72]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007526:	4a11      	ldr	r2, [pc, #68]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007528:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800752c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a0e      	ldr	r2, [pc, #56]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007534:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007538:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800753a:	f7fa f831 	bl	80015a0 <HAL_GetTick>
 800753e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007540:	e008      	b.n	8007554 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007542:	f7fa f82d 	bl	80015a0 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d901      	bls.n	8007554 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e006      	b.n	8007562 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007554:	4b05      	ldr	r3, [pc, #20]	; (800756c <RCCEx_PLL2_Config+0x15c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f0      	beq.n	8007542 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007560:	7bfb      	ldrb	r3, [r7, #15]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	58024400 	.word	0x58024400
 8007570:	ffff0007 	.word	0xffff0007

08007574 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007582:	4b53      	ldr	r3, [pc, #332]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007586:	f003 0303 	and.w	r3, r3, #3
 800758a:	2b03      	cmp	r3, #3
 800758c:	d101      	bne.n	8007592 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e099      	b.n	80076c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007592:	4b4f      	ldr	r3, [pc, #316]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a4e      	ldr	r2, [pc, #312]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800759c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800759e:	f7f9 ffff 	bl	80015a0 <HAL_GetTick>
 80075a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075a4:	e008      	b.n	80075b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80075a6:	f7f9 fffb 	bl	80015a0 <HAL_GetTick>
 80075aa:	4602      	mov	r2, r0
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	1ad3      	subs	r3, r2, r3
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	d901      	bls.n	80075b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80075b4:	2303      	movs	r3, #3
 80075b6:	e086      	b.n	80076c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075b8:	4b45      	ldr	r3, [pc, #276]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1f0      	bne.n	80075a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80075c4:	4b42      	ldr	r3, [pc, #264]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 80075c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	051b      	lsls	r3, r3, #20
 80075d2:	493f      	ldr	r1, [pc, #252]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	628b      	str	r3, [r1, #40]	; 0x28
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	3b01      	subs	r3, #1
 80075de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	025b      	lsls	r3, r3, #9
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	041b      	lsls	r3, r3, #16
 80075f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075fa:	431a      	orrs	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	061b      	lsls	r3, r3, #24
 8007604:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007608:	4931      	ldr	r1, [pc, #196]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800760a:	4313      	orrs	r3, r2
 800760c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800760e:	4b30      	ldr	r3, [pc, #192]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007612:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	492d      	ldr	r1, [pc, #180]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800761c:	4313      	orrs	r3, r2
 800761e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007620:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	4928      	ldr	r1, [pc, #160]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800762e:	4313      	orrs	r3, r2
 8007630:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007632:	4b27      	ldr	r3, [pc, #156]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	4a26      	ldr	r2, [pc, #152]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800763c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007642:	4b24      	ldr	r3, [pc, #144]	; (80076d4 <RCCEx_PLL3_Config+0x160>)
 8007644:	4013      	ands	r3, r2
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	69d2      	ldr	r2, [r2, #28]
 800764a:	00d2      	lsls	r2, r2, #3
 800764c:	4920      	ldr	r1, [pc, #128]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800764e:	4313      	orrs	r3, r2
 8007650:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007652:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007656:	4a1e      	ldr	r2, [pc, #120]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800765c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007664:	4b1a      	ldr	r3, [pc, #104]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800766a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800766e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007670:	e00f      	b.n	8007692 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d106      	bne.n	8007686 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800767e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007682:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007684:	e005      	b.n	8007692 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	4a11      	ldr	r2, [pc, #68]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 800768c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007690:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007692:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a0e      	ldr	r2, [pc, #56]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 8007698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800769c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800769e:	f7f9 ff7f 	bl	80015a0 <HAL_GetTick>
 80076a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076a4:	e008      	b.n	80076b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80076a6:	f7f9 ff7b 	bl	80015a0 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d901      	bls.n	80076b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80076b4:	2303      	movs	r3, #3
 80076b6:	e006      	b.n	80076c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80076b8:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <RCCEx_PLL3_Config+0x15c>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d0f0      	beq.n	80076a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	58024400 	.word	0x58024400
 80076d4:	ffff0007 	.word	0xffff0007

080076d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e0f1      	b.n	80078ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a78      	ldr	r2, [pc, #480]	; (80078d8 <HAL_SPI_Init+0x200>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00f      	beq.n	800771a <HAL_SPI_Init+0x42>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a77      	ldr	r2, [pc, #476]	; (80078dc <HAL_SPI_Init+0x204>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00a      	beq.n	800771a <HAL_SPI_Init+0x42>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a75      	ldr	r2, [pc, #468]	; (80078e0 <HAL_SPI_Init+0x208>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d005      	beq.n	800771a <HAL_SPI_Init+0x42>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	2b0f      	cmp	r3, #15
 8007714:	d901      	bls.n	800771a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e0d9      	b.n	80078ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 ff52 	bl	80085c4 <SPI_GetPacketSize>
 8007720:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6c      	ldr	r2, [pc, #432]	; (80078d8 <HAL_SPI_Init+0x200>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00c      	beq.n	8007746 <HAL_SPI_Init+0x6e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a6a      	ldr	r2, [pc, #424]	; (80078dc <HAL_SPI_Init+0x204>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d007      	beq.n	8007746 <HAL_SPI_Init+0x6e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a69      	ldr	r2, [pc, #420]	; (80078e0 <HAL_SPI_Init+0x208>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d002      	beq.n	8007746 <HAL_SPI_Init+0x6e>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b08      	cmp	r3, #8
 8007744:	d811      	bhi.n	800776a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800774a:	4a63      	ldr	r2, [pc, #396]	; (80078d8 <HAL_SPI_Init+0x200>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d009      	beq.n	8007764 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a61      	ldr	r2, [pc, #388]	; (80078dc <HAL_SPI_Init+0x204>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d004      	beq.n	8007764 <HAL_SPI_Init+0x8c>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a60      	ldr	r2, [pc, #384]	; (80078e0 <HAL_SPI_Init+0x208>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d104      	bne.n	800776e <HAL_SPI_Init+0x96>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b10      	cmp	r3, #16
 8007768:	d901      	bls.n	800776e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e0af      	b.n	80078ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7f9 fba6 	bl	8000ed4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f022 0201 	bic.w	r2, r2, #1
 800779e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80077aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077b4:	d119      	bne.n	80077ea <HAL_SPI_Init+0x112>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077be:	d103      	bne.n	80077c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d008      	beq.n	80077da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10c      	bne.n	80077ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80077d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d8:	d107      	bne.n	80077ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	69da      	ldr	r2, [r3, #28]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	431a      	orrs	r2, r3
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fc:	ea42 0103 	orr.w	r1, r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68da      	ldr	r2, [r3, #12]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	431a      	orrs	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	431a      	orrs	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	431a      	orrs	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783e:	431a      	orrs	r2, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	431a      	orrs	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800784a:	ea42 0103 	orr.w	r1, r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d113      	bne.n	800788a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007874:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007888:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 0201 	bic.w	r2, r2, #1
 8007898:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2201      	movs	r2, #1
 80078c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	40013000 	.word	0x40013000
 80078dc:	40003800 	.word	0x40003800
 80078e0:	40003c00 	.word	0x40003c00

080078e4 <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b086      	sub	sp, #24
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d110      	bne.n	8007920 <HAL_SPI_Receive_DMA+0x3c>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007906:	d10b      	bne.n	8007920 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2204      	movs	r2, #4
 800790c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	68b9      	ldr	r1, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 f940 	bl	8007b9c <HAL_SPI_TransmitReceive_DMA>
 800791c:	4603      	mov	r3, r0
 800791e:	e130      	b.n	8007b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_SPI_Receive_DMA+0x4a>
 800792a:	2302      	movs	r3, #2
 800792c:	e129      	b.n	8007b82 <HAL_SPI_Receive_DMA+0x29e>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b01      	cmp	r3, #1
 8007940:	d007      	beq.n	8007952 <HAL_SPI_Receive_DMA+0x6e>
  {
    errorcode = HAL_BUSY;
 8007942:	2302      	movs	r3, #2
 8007944:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800794e:	7dfb      	ldrb	r3, [r7, #23]
 8007950:	e117      	b.n	8007b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_SPI_Receive_DMA+0x7a>
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d107      	bne.n	800796e <HAL_SPI_Receive_DMA+0x8a>
  {
    errorcode = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	e109      	b.n	8007b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2204      	movs	r2, #4
 8007972:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	88fa      	ldrh	r2, [r7, #6]
 8007988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	88fa      	ldrh	r2, [r7, #6]
 8007990:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2200      	movs	r2, #0
 800799e:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80079b8:	d107      	bne.n	80079ca <HAL_SPI_Receive_DMA+0xe6>
  {
    SPI_1LINE_RX(hspi);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079c8:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	2b0f      	cmp	r3, #15
 80079d0:	d905      	bls.n	80079de <HAL_SPI_Receive_DMA+0xfa>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079dc:	d10f      	bne.n	80079fe <HAL_SPI_Receive_DMA+0x11a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80079e2:	2b07      	cmp	r3, #7
 80079e4:	d913      	bls.n	8007a0e <HAL_SPI_Receive_DMA+0x12a>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f0:	d00d      	beq.n	8007a0e <HAL_SPI_Receive_DMA+0x12a>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f6:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80079f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079fc:	d007      	beq.n	8007a0e <HAL_SPI_Receive_DMA+0x12a>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	e0b9      	b.n	8007b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a1c:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b07      	cmp	r3, #7
 8007a24:	d820      	bhi.n	8007a68 <HAL_SPI_Receive_DMA+0x184>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a30:	d109      	bne.n	8007a46 <HAL_SPI_Receive_DMA+0x162>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	105b      	asrs	r3, r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a50:	d11e      	bne.n	8007a90 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3303      	adds	r3, #3
 8007a5c:	109b      	asrs	r3, r3, #2
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007a66:	e013      	b.n	8007a90 <HAL_SPI_Receive_DMA+0x1ac>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	2b0f      	cmp	r3, #15
 8007a6e:	d80f      	bhi.n	8007a90 <HAL_SPI_Receive_DMA+0x1ac>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a7a:	d109      	bne.n	8007a90 <HAL_SPI_Receive_DMA+0x1ac>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	3301      	adds	r3, #1
 8007a86:	105b      	asrs	r3, r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a94:	4a3d      	ldr	r2, [pc, #244]	; (8007b8c <HAL_SPI_Receive_DMA+0x2a8>)
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a9c:	4a3c      	ldr	r2, [pc, #240]	; (8007b90 <HAL_SPI_Receive_DMA+0x2ac>)
 8007a9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa4:	4a3b      	ldr	r2, [pc, #236]	; (8007b94 <HAL_SPI_Receive_DMA+0x2b0>)
 8007aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aac:	2200      	movs	r2, #0
 8007aae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3330      	adds	r3, #48	; 0x30
 8007aba:	4619      	mov	r1, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007ac8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007aca:	f7fa fa25 	bl	8001f18 <HAL_DMA_Start_IT>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d013      	beq.n	8007afc <HAL_SPI_Receive_DMA+0x218>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ada:	f043 0210 	orr.w	r2, r3, #16
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007af8:	7dfb      	ldrb	r3, [r7, #23]
 8007afa:	e042      	b.n	8007b82 <HAL_SPI_Receive_DMA+0x29e>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b00:	69db      	ldr	r3, [r3, #28]
 8007b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b06:	d108      	bne.n	8007b1a <HAL_SPI_Receive_DMA+0x236>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6859      	ldr	r1, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	4b21      	ldr	r3, [pc, #132]	; (8007b98 <HAL_SPI_Receive_DMA+0x2b4>)
 8007b14:	400b      	ands	r3, r1
 8007b16:	6053      	str	r3, [r2, #4]
 8007b18:	e009      	b.n	8007b2e <HAL_SPI_Receive_DMA+0x24a>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	4b1d      	ldr	r3, [pc, #116]	; (8007b98 <HAL_SPI_Receive_DMA+0x2b4>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	88f9      	ldrh	r1, [r7, #6]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	6812      	ldr	r2, [r2, #0]
 8007b2a:	430b      	orrs	r3, r1
 8007b2c:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b3c:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	691a      	ldr	r2, [r3, #16]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 8007b4c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f042 0201 	orr.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007b66:	d107      	bne.n	8007b78 <HAL_SPI_Receive_DMA+0x294>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b76:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3718      	adds	r7, #24
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	080083d1 	.word	0x080083d1
 8007b90:	08008345 	.word	0x08008345
 8007b94:	08008409 	.word	0x08008409
 8007b98:	ffff0000 	.word	0xffff0000

08007b9c <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
 8007ba8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d101      	bne.n	8007bbc <HAL_SPI_TransmitReceive_DMA+0x20>
 8007bb8:	2302      	movs	r3, #2
 8007bba:	e1b4      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init temporary variables */
  tmp_state   = hspi->State;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007bca:	75bb      	strb	r3, [r7, #22]
  tmp_mode    = hspi->Init.Mode;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007bd2:	7dbb      	ldrb	r3, [r7, #22]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d012      	beq.n	8007bfe <HAL_SPI_TransmitReceive_DMA+0x62>
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bde:	d106      	bne.n	8007bee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d102      	bne.n	8007bee <HAL_SPI_TransmitReceive_DMA+0x52>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8007be8:	7dbb      	ldrb	r3, [r7, #22]
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d007      	beq.n	8007bfe <HAL_SPI_TransmitReceive_DMA+0x62>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bfa:	7dfb      	ldrb	r3, [r7, #23]
 8007bfc:	e193      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HAL_SPI_TransmitReceive_DMA+0x74>
 8007c0a:	887b      	ldrh	r3, [r7, #2]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    errorcode = HAL_ERROR;
 8007c10:	2301      	movs	r3, #1
 8007c12:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007c1c:	7dfb      	ldrb	r3, [r7, #23]
 8007c1e:	e182      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d003      	beq.n	8007c34 <HAL_SPI_TransmitReceive_DMA+0x98>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2205      	movs	r2, #5
 8007c30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	887a      	ldrh	r2, [r7, #2]
 8007c46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	887a      	ldrh	r2, [r7, #2]
 8007c4e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	887a      	ldrh	r2, [r7, #2]
 8007c5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	887a      	ldrh	r2, [r7, #2]
 8007c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	675a      	str	r2, [r3, #116]	; 0x74

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007c82:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	2b0f      	cmp	r3, #15
 8007c8a:	d905      	bls.n	8007c98 <HAL_SPI_TransmitReceive_DMA+0xfc>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c96:	d10f      	bne.n	8007cb8 <HAL_SPI_TransmitReceive_DMA+0x11c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8007c9c:	2b07      	cmp	r3, #7
 8007c9e:	d913      	bls.n	8007cc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca4:	699b      	ldr	r3, [r3, #24]
 8007ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007caa:	d00d      	beq.n	8007cc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cb0:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8007cb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cb6:	d007      	beq.n	8007cc8 <HAL_SPI_TransmitReceive_DMA+0x12c>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
 8007cc6:	e12e      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	2b07      	cmp	r3, #7
 8007cce:	d840      	bhi.n	8007d52 <HAL_SPI_TransmitReceive_DMA+0x1b6>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cda:	d109      	bne.n	8007cf0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	105b      	asrs	r3, r3, #1
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007cfa:	d109      	bne.n	8007d10 <HAL_SPI_TransmitReceive_DMA+0x174>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	3303      	adds	r3, #3
 8007d06:	109b      	asrs	r3, r3, #2
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	d109      	bne.n	8007d30 <HAL_SPI_TransmitReceive_DMA+0x194>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	3301      	adds	r3, #1
 8007d26:	105b      	asrs	r3, r3, #1
 8007d28:	b29a      	uxth	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d3a:	d12e      	bne.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3303      	adds	r3, #3
 8007d46:	109b      	asrs	r3, r3, #2
 8007d48:	b29a      	uxth	r2, r3
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8007d50:	e023      	b.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	2b0f      	cmp	r3, #15
 8007d58:	d81f      	bhi.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d64:	d109      	bne.n	8007d7a <HAL_SPI_TransmitReceive_DMA+0x1de>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	3301      	adds	r3, #1
 8007d70:	105b      	asrs	r3, r3, #1
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d84:	d109      	bne.n	8007d9a <HAL_SPI_TransmitReceive_DMA+0x1fe>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3301      	adds	r3, #1
 8007d90:	105b      	asrs	r3, r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007da0:	b2db      	uxtb	r3, r3
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d108      	bne.n	8007db8 <HAL_SPI_TransmitReceive_DMA+0x21c>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007daa:	4a61      	ldr	r2, [pc, #388]	; (8007f30 <HAL_SPI_TransmitReceive_DMA+0x394>)
 8007dac:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007db2:	4a60      	ldr	r2, [pc, #384]	; (8007f34 <HAL_SPI_TransmitReceive_DMA+0x398>)
 8007db4:	63da      	str	r2, [r3, #60]	; 0x3c
 8007db6:	e007      	b.n	8007dc8 <HAL_SPI_TransmitReceive_DMA+0x22c>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dbc:	4a5e      	ldr	r2, [pc, #376]	; (8007f38 <HAL_SPI_TransmitReceive_DMA+0x39c>)
 8007dbe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc4:	4a5d      	ldr	r2, [pc, #372]	; (8007f3c <HAL_SPI_TransmitReceive_DMA+0x3a0>)
 8007dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dcc:	4a5c      	ldr	r2, [pc, #368]	; (8007f40 <HAL_SPI_TransmitReceive_DMA+0x3a4>)
 8007dce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3330      	adds	r3, #48	; 0x30
 8007de2:	4619      	mov	r1, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de8:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007df0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8007df2:	f7fa f891 	bl	8001f18 <HAL_DMA_Start_IT>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d013      	beq.n	8007e24 <HAL_SPI_TransmitReceive_DMA+0x288>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e02:	f043 0210 	orr.w	r2, r3, #16
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2201      	movs	r2, #1
 8007e18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007e20:	7dfb      	ldrb	r3, [r7, #23]
 8007e22:	e080      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e32:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e38:	2200      	movs	r2, #0
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e40:	2200      	movs	r2, #0
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e48:	2200      	movs	r2, #0
 8007e4a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e50:	2200      	movs	r2, #0
 8007e52:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3320      	adds	r3, #32
 8007e64:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e6c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8007e6e:	f7fa f853 	bl	8001f18 <HAL_DMA_Start_IT>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d013      	beq.n	8007ea0 <HAL_SPI_TransmitReceive_DMA+0x304>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e7e:	f043 0210 	orr.w	r2, r3, #16
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	e042      	b.n	8007f26 <HAL_SPI_TransmitReceive_DMA+0x38a>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eaa:	d108      	bne.n	8007ebe <HAL_SPI_TransmitReceive_DMA+0x322>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	6859      	ldr	r1, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	4b23      	ldr	r3, [pc, #140]	; (8007f44 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8007eb8:	400b      	ands	r3, r1
 8007eba:	6053      	str	r3, [r2, #4]
 8007ebc:	e009      	b.n	8007ed2 <HAL_SPI_TransmitReceive_DMA+0x336>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	4b1f      	ldr	r3, [pc, #124]	; (8007f44 <HAL_SPI_TransmitReceive_DMA+0x3a8>)
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	8879      	ldrh	r1, [r7, #2]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	6812      	ldr	r2, [r2, #0]
 8007ece:	430b      	orrs	r3, r1
 8007ed0:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ee0:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	691a      	ldr	r2, [r3, #16]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 8007ef0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0201 	orr.w	r2, r2, #1
 8007f00:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f0a:	d107      	bne.n	8007f1c <HAL_SPI_TransmitReceive_DMA+0x380>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 8007f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	080083d1 	.word	0x080083d1
 8007f34:	08008345 	.word	0x08008345
 8007f38:	080083ed 	.word	0x080083ed
 8007f3c:	0800838b 	.word	0x0800838b
 8007f40:	08008409 	.word	0x08008409
 8007f44:	ffff0000 	.word	0xffff0000

08007f48 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8007f60:	6a3a      	ldr	r2, [r7, #32]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007f7a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	3330      	adds	r3, #48	; 0x30
 8007f82:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d113      	bne.n	8007fb6 <HAL_SPI_IRQHandler+0x6e>
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	f003 0320 	and.w	r3, r3, #32
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10e      	bne.n	8007fb6 <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
    hspi->RxISR(hspi);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
    handled = 1UL;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10f      	bne.n	8007fe0 <HAL_SPI_IRQHandler+0x98>
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d105      	bne.n	8007fe0 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
    handled = 1UL;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f003 0320 	and.w	r3, r3, #32
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d10f      	bne.n	800800a <HAL_SPI_IRQHandler+0xc2>
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	4798      	blx	r3
    handled = 1UL;
 8008006:	2301      	movs	r3, #1
 8008008:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	f040 815a 	bne.w	80082c6 <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 808b 	beq.w	8008134 <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f042 0208 	orr.w	r2, r2, #8
 800802c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	699a      	ldr	r2, [r3, #24]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0210 	orr.w	r2, r2, #16
 800803c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	699a      	ldr	r2, [r3, #24]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0208 	bic.w	r2, r2, #8
 800805c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d13d      	bne.n	80080e8 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800806c:	e036      	b.n	80080dc <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	2b0f      	cmp	r3, #15
 8008074:	d90b      	bls.n	800808e <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800807e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008080:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	665a      	str	r2, [r3, #100]	; 0x64
 800808c:	e01d      	b.n	80080ca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	2b07      	cmp	r3, #7
 8008094:	d90b      	bls.n	80080ae <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	8812      	ldrh	r2, [r2, #0]
 800809e:	b292      	uxth	r2, r2
 80080a0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080a6:	1c9a      	adds	r2, r3, #2
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	665a      	str	r2, [r3, #100]	; 0x64
 80080ac:	e00d      	b.n	80080ca <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080ba:	7812      	ldrb	r2, [r2, #0]
 80080bc:	b2d2      	uxtb	r2, r2
 80080be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1c2      	bne.n	800806e <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 f9cb 	bl	8008484 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f915 	bl	8008330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008106:	e0e3      	b.n	80082d0 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008108:	7cfb      	ldrb	r3, [r7, #19]
 800810a:	2b05      	cmp	r3, #5
 800810c:	d103      	bne.n	8008116 <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8f0 	bl	80082f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8008114:	e0d9      	b.n	80082ca <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8008116:	7cfb      	ldrb	r3, [r7, #19]
 8008118:	2b04      	cmp	r3, #4
 800811a:	d103      	bne.n	8008124 <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7f8 fab1 	bl	8000684 <HAL_SPI_RxCpltCallback>
    return;
 8008122:	e0d2      	b.n	80082ca <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8008124:	7cfb      	ldrb	r3, [r7, #19]
 8008126:	2b03      	cmp	r3, #3
 8008128:	f040 80cf 	bne.w	80082ca <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f8d7 	bl	80082e0 <HAL_SPI_TxCpltCallback>
    return;
 8008132:	e0ca      	b.n	80082ca <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00d      	beq.n	800815a <HAL_SPI_IRQHandler+0x212>
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	f003 0308 	and.w	r3, r3, #8
 8008144:	2b00      	cmp	r3, #0
 8008146:	d008      	beq.n	800815a <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	699a      	ldr	r2, [r3, #24]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008156:	619a      	str	r2, [r3, #24]

    return;
 8008158:	e0ba      	b.n	80082d0 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008160:	2b00      	cmp	r3, #0
 8008162:	f000 80b5 	beq.w	80082d0 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00f      	beq.n	8008190 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008176:	f043 0204 	orr.w	r2, r3, #4
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	699a      	ldr	r2, [r3, #24]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800818e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008190:	69bb      	ldr	r3, [r7, #24]
 8008192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008196:	2b00      	cmp	r3, #0
 8008198:	d00f      	beq.n	80081ba <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a0:	f043 0201 	orr.w	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699a      	ldr	r2, [r3, #24]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081b8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d00f      	beq.n	80081e4 <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ca:	f043 0208 	orr.w	r2, r3, #8
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081e2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00f      	beq.n	800820e <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	699a      	ldr	r2, [r3, #24]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f042 0220 	orr.w	r2, r2, #32
 800820c:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008214:	2b00      	cmp	r3, #0
 8008216:	d05a      	beq.n	80082ce <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f022 0201 	bic.w	r2, r2, #1
 8008226:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6919      	ldr	r1, [r3, #16]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	4b29      	ldr	r3, [pc, #164]	; (80082d8 <HAL_SPI_IRQHandler+0x390>)
 8008234:	400b      	ands	r3, r1
 8008236:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800823e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008242:	d138      	bne.n	80082b6 <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008252:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008258:	2b00      	cmp	r3, #0
 800825a:	d013      	beq.n	8008284 <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008260:	4a1e      	ldr	r2, [pc, #120]	; (80082dc <HAL_SPI_IRQHandler+0x394>)
 8008262:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008268:	4618      	mov	r0, r3
 800826a:	f7fa f8bf 	bl	80023ec <HAL_DMA_Abort_IT>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d007      	beq.n	8008284 <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800827a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008288:	2b00      	cmp	r3, #0
 800828a:	d020      	beq.n	80082ce <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008290:	4a12      	ldr	r2, [pc, #72]	; (80082dc <HAL_SPI_IRQHandler+0x394>)
 8008292:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008298:	4618      	mov	r0, r3
 800829a:	f7fa f8a7 	bl	80023ec <HAL_DMA_Abort_IT>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d014      	beq.n	80082ce <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80082b4:	e00b      	b.n	80082ce <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 f836 	bl	8008330 <HAL_SPI_ErrorCallback>
    return;
 80082c4:	e003      	b.n	80082ce <HAL_SPI_IRQHandler+0x386>
    return;
 80082c6:	bf00      	nop
 80082c8:	e002      	b.n	80082d0 <HAL_SPI_IRQHandler+0x388>
    return;
 80082ca:	bf00      	nop
 80082cc:	e000      	b.n	80082d0 <HAL_SPI_IRQHandler+0x388>
    return;
 80082ce:	bf00      	nop
  }
}
 80082d0:	3728      	adds	r7, #40	; 0x28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	fffffc94 	.word	0xfffffc94
 80082dc:	0800844f 	.word	0x0800844f

080082e0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008350:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008358:	b2db      	uxtb	r3, r3
 800835a:	2b07      	cmp	r3, #7
 800835c:	d011      	beq.n	8008382 <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008362:	69db      	ldr	r3, [r3, #28]
 8008364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008368:	d103      	bne.n	8008372 <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f7f8 f98a 	bl	8000684 <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008370:	e007      	b.n	8008382 <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	691a      	ldr	r2, [r3, #16]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0208 	orr.w	r2, r2, #8
 8008380:	611a      	str	r2, [r3, #16]
}
 8008382:	bf00      	nop
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b084      	sub	sp, #16
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008396:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b07      	cmp	r3, #7
 80083a2:	d011      	beq.n	80083c8 <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ae:	d103      	bne.n	80083b8 <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff ff9f 	bl	80082f4 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 80083b6:	e007      	b.n	80083c8 <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	691a      	ldr	r2, [r3, #16]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0208 	orr.w	r2, r2, #8
 80083c6:	611a      	str	r2, [r3, #16]
}
 80083c8:	bf00      	nop
 80083ca:	3710      	adds	r7, #16
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}

080083d0 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff ff92 	bl	8008308 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083e4:	bf00      	nop
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f7ff ff8e 	bl	800831c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008400:	bf00      	nop
 8008402:	3710      	adds	r7, #16
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008414:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7fb f958 	bl	80036cc <HAL_DMA_GetError>
 800841c:	4603      	mov	r3, r0
 800841e:	2b02      	cmp	r3, #2
 8008420:	d011      	beq.n	8008446 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f82e 	bl	8008484 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800842e:	f043 0210 	orr.w	r2, r3, #16
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008440:	68f8      	ldr	r0, [r7, #12]
 8008442:	f7ff ff75 	bl	8008330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008446:	bf00      	nop
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	2200      	movs	r2, #0
 8008460:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2200      	movs	r2, #0
 8008468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff ff5b 	bl	8008330 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800847a:	bf00      	nop
 800847c:	3710      	adds	r7, #16
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	699a      	ldr	r2, [r3, #24]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0208 	orr.w	r2, r2, #8
 80084a2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f042 0210 	orr.w	r2, r2, #16
 80084b2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f022 0201 	bic.w	r2, r2, #1
 80084c2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	6919      	ldr	r1, [r3, #16]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	4b3c      	ldr	r3, [pc, #240]	; (80085c0 <SPI_CloseTransfer+0x13c>)
 80084d0:	400b      	ands	r3, r1
 80084d2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80084e2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80084ea:	b2db      	uxtb	r3, r3
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d014      	beq.n	800851a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00f      	beq.n	800851a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008500:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	699a      	ldr	r2, [r3, #24]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f042 0220 	orr.w	r2, r2, #32
 8008518:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b03      	cmp	r3, #3
 8008524:	d014      	beq.n	8008550 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00f      	beq.n	8008550 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	f043 0204 	orr.w	r2, r3, #4
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	699a      	ldr	r2, [r3, #24]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800854e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00f      	beq.n	800857a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008560:	f043 0201 	orr.w	r2, r3, #1
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	699a      	ldr	r2, [r3, #24]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008578:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00f      	beq.n	80085a4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800858a:	f043 0208 	orr.w	r2, r3, #8
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80085b4:	bf00      	nop
 80085b6:	3714      	adds	r7, #20
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr
 80085c0:	fffffc90 	.word	0xfffffc90

080085c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d0:	095b      	lsrs	r3, r3, #5
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3307      	adds	r3, #7
 80085e2:	08db      	lsrs	r3, r3, #3
 80085e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3714      	adds	r7, #20
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b082      	sub	sp, #8
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e042      	b.n	8008692 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008612:	2b00      	cmp	r3, #0
 8008614:	d106      	bne.n	8008624 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f7f8 fd04 	bl	800102c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2224      	movs	r2, #36	; 0x24
 8008628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 0201 	bic.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f96b 	bl	8008918 <UART_SetConfig>
 8008642:	4603      	mov	r3, r0
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	e022      	b.n	8008692 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d002      	beq.n	800865a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fec7 	bl	80093e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f042 0201 	orr.w	r2, r2, #1
 8008688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 ff4e 	bl	800952c <UART_CheckIdleState>
 8008690:	4603      	mov	r3, r0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b08a      	sub	sp, #40	; 0x28
 800869e:	af02      	add	r7, sp, #8
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	4613      	mov	r3, r2
 80086a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b0:	2b20      	cmp	r3, #32
 80086b2:	f040 8083 	bne.w	80087bc <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d002      	beq.n	80086c2 <HAL_UART_Transmit+0x28>
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d101      	bne.n	80086c6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e07b      	b.n	80087be <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d101      	bne.n	80086d4 <HAL_UART_Transmit+0x3a>
 80086d0:	2302      	movs	r3, #2
 80086d2:	e074      	b.n	80087be <HAL_UART_Transmit+0x124>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2221      	movs	r2, #33	; 0x21
 80086e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086ec:	f7f8 ff58 	bl	80015a0 <HAL_GetTick>
 80086f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	88fa      	ldrh	r2, [r7, #6]
 80086f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	88fa      	ldrh	r2, [r7, #6]
 80086fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800870a:	d108      	bne.n	800871e <HAL_UART_Transmit+0x84>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d104      	bne.n	800871e <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	61bb      	str	r3, [r7, #24]
 800871c:	e003      	b.n	8008726 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008722:	2300      	movs	r3, #0
 8008724:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800872e:	e02c      	b.n	800878a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2200      	movs	r2, #0
 8008738:	2180      	movs	r1, #128	; 0x80
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 ff41 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e039      	b.n	80087be <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800874a:	69fb      	ldr	r3, [r7, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10b      	bne.n	8008768 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	881b      	ldrh	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800875e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	3302      	adds	r3, #2
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	e007      	b.n	8008778 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	781a      	ldrb	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	3301      	adds	r3, #1
 8008776:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800877e:	b29b      	uxth	r3, r3
 8008780:	3b01      	subs	r3, #1
 8008782:	b29a      	uxth	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1cc      	bne.n	8008730 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	2200      	movs	r2, #0
 800879e:	2140      	movs	r1, #64	; 0x40
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 ff0e 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d001      	beq.n	80087b0 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e006      	b.n	80087be <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	e000      	b.n	80087be <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80087bc:	2302      	movs	r3, #2
  }
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3720      	adds	r7, #32
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b091      	sub	sp, #68	; 0x44
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087dc:	2b20      	cmp	r3, #32
 80087de:	f040 808c 	bne.w	80088fa <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <HAL_UART_Transmit_IT+0x26>
 80087e8:	88fb      	ldrh	r3, [r7, #6]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e084      	b.n	80088fc <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d101      	bne.n	8008800 <HAL_UART_Transmit_IT+0x38>
 80087fc:	2302      	movs	r3, #2
 80087fe:	e07d      	b.n	80088fc <HAL_UART_Transmit_IT+0x134>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	88fa      	ldrh	r2, [r7, #6]
 8008812:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	88fa      	ldrh	r2, [r7, #6]
 800881a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2221      	movs	r2, #33	; 0x21
 8008830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800883c:	d12e      	bne.n	800889c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008846:	d107      	bne.n	8008858 <HAL_UART_Transmit_IT+0x90>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d103      	bne.n	8008858 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a2d      	ldr	r2, [pc, #180]	; (8008908 <HAL_UART_Transmit_IT+0x140>)
 8008854:	675a      	str	r2, [r3, #116]	; 0x74
 8008856:	e002      	b.n	800885e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	4a2c      	ldr	r2, [pc, #176]	; (800890c <HAL_UART_Transmit_IT+0x144>)
 800885c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2200      	movs	r2, #0
 8008862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	3308      	adds	r3, #8
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800887c:	63bb      	str	r3, [r7, #56]	; 0x38
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	3308      	adds	r3, #8
 8008884:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008886:	637a      	str	r2, [r7, #52]	; 0x34
 8008888:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800888c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e5      	bne.n	8008866 <HAL_UART_Transmit_IT+0x9e>
 800889a:	e02c      	b.n	80088f6 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088a4:	d107      	bne.n	80088b6 <HAL_UART_Transmit_IT+0xee>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d103      	bne.n	80088b6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4a17      	ldr	r2, [pc, #92]	; (8008910 <HAL_UART_Transmit_IT+0x148>)
 80088b2:	675a      	str	r2, [r3, #116]	; 0x74
 80088b4:	e002      	b.n	80088bc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	4a16      	ldr	r2, [pc, #88]	; (8008914 <HAL_UART_Transmit_IT+0x14c>)
 80088ba:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	613b      	str	r3, [r7, #16]
   return(result);
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e2:	623b      	str	r3, [r7, #32]
 80088e4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	69f9      	ldr	r1, [r7, #28]
 80088e8:	6a3a      	ldr	r2, [r7, #32]
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80088f6:	2300      	movs	r3, #0
 80088f8:	e000      	b.n	80088fc <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80088fa:	2302      	movs	r3, #2
  }
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3744      	adds	r7, #68	; 0x44
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	080099ad 	.word	0x080099ad
 800890c:	080098cd 	.word	0x080098cd
 8008910:	0800980b 	.word	0x0800980b
 8008914:	08009753 	.word	0x08009753

08008918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800891c:	b092      	sub	sp, #72	; 0x48
 800891e:	af00      	add	r7, sp, #0
 8008920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	431a      	orrs	r2, r3
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	431a      	orrs	r2, r3
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	4313      	orrs	r3, r2
 800893e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4bbe      	ldr	r3, [pc, #760]	; (8008c40 <UART_SetConfig+0x328>)
 8008948:	4013      	ands	r3, r2
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008950:	430b      	orrs	r3, r1
 8008952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4ab3      	ldr	r2, [pc, #716]	; (8008c44 <UART_SetConfig+0x32c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008980:	4313      	orrs	r3, r2
 8008982:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	4baf      	ldr	r3, [pc, #700]	; (8008c48 <UART_SetConfig+0x330>)
 800898c:	4013      	ands	r3, r2
 800898e:	697a      	ldr	r2, [r7, #20]
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008994:	430b      	orrs	r3, r1
 8008996:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	f023 010f 	bic.w	r1, r3, #15
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4aa6      	ldr	r2, [pc, #664]	; (8008c4c <UART_SetConfig+0x334>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d177      	bne.n	8008aa8 <UART_SetConfig+0x190>
 80089b8:	4ba5      	ldr	r3, [pc, #660]	; (8008c50 <UART_SetConfig+0x338>)
 80089ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089c0:	2b28      	cmp	r3, #40	; 0x28
 80089c2:	d86d      	bhi.n	8008aa0 <UART_SetConfig+0x188>
 80089c4:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <UART_SetConfig+0xb4>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	08008a71 	.word	0x08008a71
 80089d0:	08008aa1 	.word	0x08008aa1
 80089d4:	08008aa1 	.word	0x08008aa1
 80089d8:	08008aa1 	.word	0x08008aa1
 80089dc:	08008aa1 	.word	0x08008aa1
 80089e0:	08008aa1 	.word	0x08008aa1
 80089e4:	08008aa1 	.word	0x08008aa1
 80089e8:	08008aa1 	.word	0x08008aa1
 80089ec:	08008a79 	.word	0x08008a79
 80089f0:	08008aa1 	.word	0x08008aa1
 80089f4:	08008aa1 	.word	0x08008aa1
 80089f8:	08008aa1 	.word	0x08008aa1
 80089fc:	08008aa1 	.word	0x08008aa1
 8008a00:	08008aa1 	.word	0x08008aa1
 8008a04:	08008aa1 	.word	0x08008aa1
 8008a08:	08008aa1 	.word	0x08008aa1
 8008a0c:	08008a81 	.word	0x08008a81
 8008a10:	08008aa1 	.word	0x08008aa1
 8008a14:	08008aa1 	.word	0x08008aa1
 8008a18:	08008aa1 	.word	0x08008aa1
 8008a1c:	08008aa1 	.word	0x08008aa1
 8008a20:	08008aa1 	.word	0x08008aa1
 8008a24:	08008aa1 	.word	0x08008aa1
 8008a28:	08008aa1 	.word	0x08008aa1
 8008a2c:	08008a89 	.word	0x08008a89
 8008a30:	08008aa1 	.word	0x08008aa1
 8008a34:	08008aa1 	.word	0x08008aa1
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008aa1 	.word	0x08008aa1
 8008a40:	08008aa1 	.word	0x08008aa1
 8008a44:	08008aa1 	.word	0x08008aa1
 8008a48:	08008aa1 	.word	0x08008aa1
 8008a4c:	08008a91 	.word	0x08008a91
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	08008aa1 	.word	0x08008aa1
 8008a58:	08008aa1 	.word	0x08008aa1
 8008a5c:	08008aa1 	.word	0x08008aa1
 8008a60:	08008aa1 	.word	0x08008aa1
 8008a64:	08008aa1 	.word	0x08008aa1
 8008a68:	08008aa1 	.word	0x08008aa1
 8008a6c:	08008a99 	.word	0x08008a99
 8008a70:	2301      	movs	r3, #1
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a76:	e222      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008a78:	2304      	movs	r3, #4
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e21e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008a80:	2308      	movs	r3, #8
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e21a      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008a88:	2310      	movs	r3, #16
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8e:	e216      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008a90:	2320      	movs	r3, #32
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e212      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008a98:	2340      	movs	r3, #64	; 0x40
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e20e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008aa0:	2380      	movs	r3, #128	; 0x80
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e20a      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a69      	ldr	r2, [pc, #420]	; (8008c54 <UART_SetConfig+0x33c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d130      	bne.n	8008b14 <UART_SetConfig+0x1fc>
 8008ab2:	4b67      	ldr	r3, [pc, #412]	; (8008c50 <UART_SetConfig+0x338>)
 8008ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ab6:	f003 0307 	and.w	r3, r3, #7
 8008aba:	2b05      	cmp	r3, #5
 8008abc:	d826      	bhi.n	8008b0c <UART_SetConfig+0x1f4>
 8008abe:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <UART_SetConfig+0x1ac>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008add 	.word	0x08008add
 8008ac8:	08008ae5 	.word	0x08008ae5
 8008acc:	08008aed 	.word	0x08008aed
 8008ad0:	08008af5 	.word	0x08008af5
 8008ad4:	08008afd 	.word	0x08008afd
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	2300      	movs	r3, #0
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e1ec      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e1e8      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008aec:	2308      	movs	r3, #8
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e1e4      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008af4:	2310      	movs	r3, #16
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e1e0      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008afc:	2320      	movs	r3, #32
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e1dc      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e1d8      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e1d4      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a4f      	ldr	r2, [pc, #316]	; (8008c58 <UART_SetConfig+0x340>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d130      	bne.n	8008b80 <UART_SetConfig+0x268>
 8008b1e:	4b4c      	ldr	r3, [pc, #304]	; (8008c50 <UART_SetConfig+0x338>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d826      	bhi.n	8008b78 <UART_SetConfig+0x260>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <UART_SetConfig+0x218>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b49 	.word	0x08008b49
 8008b34:	08008b51 	.word	0x08008b51
 8008b38:	08008b59 	.word	0x08008b59
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b69 	.word	0x08008b69
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e1b6      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e1b2      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e1ae      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e1aa      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e1a6      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e1a2      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b78:	2380      	movs	r3, #128	; 0x80
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e19e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a35      	ldr	r2, [pc, #212]	; (8008c5c <UART_SetConfig+0x344>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d130      	bne.n	8008bec <UART_SetConfig+0x2d4>
 8008b8a:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <UART_SetConfig+0x338>)
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d826      	bhi.n	8008be4 <UART_SetConfig+0x2cc>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <UART_SetConfig+0x284>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bbd 	.word	0x08008bbd
 8008ba4:	08008bc5 	.word	0x08008bc5
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e180      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e17c      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e178      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e174      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e170      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e16c      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e168      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a1b      	ldr	r2, [pc, #108]	; (8008c60 <UART_SetConfig+0x348>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d142      	bne.n	8008c7c <UART_SetConfig+0x364>
 8008bf6:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <UART_SetConfig+0x338>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d838      	bhi.n	8008c74 <UART_SetConfig+0x35c>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x2f0>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c21 	.word	0x08008c21
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c65 	.word	0x08008c65
 8008c1c:	08008c6d 	.word	0x08008c6d
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e14a      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e146      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c30:	2308      	movs	r3, #8
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e142      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e13e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c40:	cfff69f3 	.word	0xcfff69f3
 8008c44:	58000c00 	.word	0x58000c00
 8008c48:	11fff4ff 	.word	0x11fff4ff
 8008c4c:	40011000 	.word	0x40011000
 8008c50:	58024400 	.word	0x58024400
 8008c54:	40004400 	.word	0x40004400
 8008c58:	40004800 	.word	0x40004800
 8008c5c:	40004c00 	.word	0x40004c00
 8008c60:	40005000 	.word	0x40005000
 8008c64:	2320      	movs	r3, #32
 8008c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6a:	e128      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c6c:	2340      	movs	r3, #64	; 0x40
 8008c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c72:	e124      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c74:	2380      	movs	r3, #128	; 0x80
 8008c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c7a:	e120      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4acb      	ldr	r2, [pc, #812]	; (8008fb0 <UART_SetConfig+0x698>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d176      	bne.n	8008d74 <UART_SetConfig+0x45c>
 8008c86:	4bcb      	ldr	r3, [pc, #812]	; (8008fb4 <UART_SetConfig+0x69c>)
 8008c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c8e:	2b28      	cmp	r3, #40	; 0x28
 8008c90:	d86c      	bhi.n	8008d6c <UART_SetConfig+0x454>
 8008c92:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <UART_SetConfig+0x380>)
 8008c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c98:	08008d3d 	.word	0x08008d3d
 8008c9c:	08008d6d 	.word	0x08008d6d
 8008ca0:	08008d6d 	.word	0x08008d6d
 8008ca4:	08008d6d 	.word	0x08008d6d
 8008ca8:	08008d6d 	.word	0x08008d6d
 8008cac:	08008d6d 	.word	0x08008d6d
 8008cb0:	08008d6d 	.word	0x08008d6d
 8008cb4:	08008d6d 	.word	0x08008d6d
 8008cb8:	08008d45 	.word	0x08008d45
 8008cbc:	08008d6d 	.word	0x08008d6d
 8008cc0:	08008d6d 	.word	0x08008d6d
 8008cc4:	08008d6d 	.word	0x08008d6d
 8008cc8:	08008d6d 	.word	0x08008d6d
 8008ccc:	08008d6d 	.word	0x08008d6d
 8008cd0:	08008d6d 	.word	0x08008d6d
 8008cd4:	08008d6d 	.word	0x08008d6d
 8008cd8:	08008d4d 	.word	0x08008d4d
 8008cdc:	08008d6d 	.word	0x08008d6d
 8008ce0:	08008d6d 	.word	0x08008d6d
 8008ce4:	08008d6d 	.word	0x08008d6d
 8008ce8:	08008d6d 	.word	0x08008d6d
 8008cec:	08008d6d 	.word	0x08008d6d
 8008cf0:	08008d6d 	.word	0x08008d6d
 8008cf4:	08008d6d 	.word	0x08008d6d
 8008cf8:	08008d55 	.word	0x08008d55
 8008cfc:	08008d6d 	.word	0x08008d6d
 8008d00:	08008d6d 	.word	0x08008d6d
 8008d04:	08008d6d 	.word	0x08008d6d
 8008d08:	08008d6d 	.word	0x08008d6d
 8008d0c:	08008d6d 	.word	0x08008d6d
 8008d10:	08008d6d 	.word	0x08008d6d
 8008d14:	08008d6d 	.word	0x08008d6d
 8008d18:	08008d5d 	.word	0x08008d5d
 8008d1c:	08008d6d 	.word	0x08008d6d
 8008d20:	08008d6d 	.word	0x08008d6d
 8008d24:	08008d6d 	.word	0x08008d6d
 8008d28:	08008d6d 	.word	0x08008d6d
 8008d2c:	08008d6d 	.word	0x08008d6d
 8008d30:	08008d6d 	.word	0x08008d6d
 8008d34:	08008d6d 	.word	0x08008d6d
 8008d38:	08008d65 	.word	0x08008d65
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e0bc      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d44:	2304      	movs	r3, #4
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e0b8      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e0b4      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d54:	2310      	movs	r3, #16
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e0b0      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e0ac      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d64:	2340      	movs	r3, #64	; 0x40
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e0a8      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d72:	e0a4      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a8f      	ldr	r2, [pc, #572]	; (8008fb8 <UART_SetConfig+0x6a0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d130      	bne.n	8008de0 <UART_SetConfig+0x4c8>
 8008d7e:	4b8d      	ldr	r3, [pc, #564]	; (8008fb4 <UART_SetConfig+0x69c>)
 8008d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d826      	bhi.n	8008dd8 <UART_SetConfig+0x4c0>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <UART_SetConfig+0x478>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008da9 	.word	0x08008da9
 8008d94:	08008db1 	.word	0x08008db1
 8008d98:	08008db9 	.word	0x08008db9
 8008d9c:	08008dc1 	.word	0x08008dc1
 8008da0:	08008dc9 	.word	0x08008dc9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	2300      	movs	r3, #0
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e086      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008db0:	2304      	movs	r3, #4
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e082      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008db8:	2308      	movs	r3, #8
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e07e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc6:	e07a      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dce:	e076      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd6:	e072      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dde:	e06e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a75      	ldr	r2, [pc, #468]	; (8008fbc <UART_SetConfig+0x6a4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d130      	bne.n	8008e4c <UART_SetConfig+0x534>
 8008dea:	4b72      	ldr	r3, [pc, #456]	; (8008fb4 <UART_SetConfig+0x69c>)
 8008dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d826      	bhi.n	8008e44 <UART_SetConfig+0x52c>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <UART_SetConfig+0x4e4>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e15 	.word	0x08008e15
 8008e00:	08008e1d 	.word	0x08008e1d
 8008e04:	08008e25 	.word	0x08008e25
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e35 	.word	0x08008e35
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e050      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e04c      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e048      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e32:	e044      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e34:	2320      	movs	r3, #32
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3a:	e040      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e3c:	2340      	movs	r3, #64	; 0x40
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e42:	e03c      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4a:	e038      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a5b      	ldr	r2, [pc, #364]	; (8008fc0 <UART_SetConfig+0x6a8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d130      	bne.n	8008eb8 <UART_SetConfig+0x5a0>
 8008e56:	4b57      	ldr	r3, [pc, #348]	; (8008fb4 <UART_SetConfig+0x69c>)
 8008e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d826      	bhi.n	8008eb0 <UART_SetConfig+0x598>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <UART_SetConfig+0x550>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e81 	.word	0x08008e81
 8008e6c:	08008e89 	.word	0x08008e89
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	2302      	movs	r3, #2
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e01a      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e016      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e012      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e00e      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e00a      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008ea8:	2340      	movs	r3, #64	; 0x40
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e006      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008eb0:	2380      	movs	r3, #128	; 0x80
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e002      	b.n	8008ebe <UART_SetConfig+0x5a6>
 8008eb8:	2380      	movs	r3, #128	; 0x80
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a3f      	ldr	r2, [pc, #252]	; (8008fc0 <UART_SetConfig+0x6a8>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	f040 80f8 	bne.w	80090ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008eca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ece:	2b20      	cmp	r3, #32
 8008ed0:	dc46      	bgt.n	8008f60 <UART_SetConfig+0x648>
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	f2c0 8082 	blt.w	8008fdc <UART_SetConfig+0x6c4>
 8008ed8:	3b02      	subs	r3, #2
 8008eda:	2b1e      	cmp	r3, #30
 8008edc:	d87e      	bhi.n	8008fdc <UART_SetConfig+0x6c4>
 8008ede:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <UART_SetConfig+0x5cc>)
 8008ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee4:	08008f67 	.word	0x08008f67
 8008ee8:	08008fdd 	.word	0x08008fdd
 8008eec:	08008f6f 	.word	0x08008f6f
 8008ef0:	08008fdd 	.word	0x08008fdd
 8008ef4:	08008fdd 	.word	0x08008fdd
 8008ef8:	08008fdd 	.word	0x08008fdd
 8008efc:	08008f7f 	.word	0x08008f7f
 8008f00:	08008fdd 	.word	0x08008fdd
 8008f04:	08008fdd 	.word	0x08008fdd
 8008f08:	08008fdd 	.word	0x08008fdd
 8008f0c:	08008fdd 	.word	0x08008fdd
 8008f10:	08008fdd 	.word	0x08008fdd
 8008f14:	08008fdd 	.word	0x08008fdd
 8008f18:	08008fdd 	.word	0x08008fdd
 8008f1c:	08008f8f 	.word	0x08008f8f
 8008f20:	08008fdd 	.word	0x08008fdd
 8008f24:	08008fdd 	.word	0x08008fdd
 8008f28:	08008fdd 	.word	0x08008fdd
 8008f2c:	08008fdd 	.word	0x08008fdd
 8008f30:	08008fdd 	.word	0x08008fdd
 8008f34:	08008fdd 	.word	0x08008fdd
 8008f38:	08008fdd 	.word	0x08008fdd
 8008f3c:	08008fdd 	.word	0x08008fdd
 8008f40:	08008fdd 	.word	0x08008fdd
 8008f44:	08008fdd 	.word	0x08008fdd
 8008f48:	08008fdd 	.word	0x08008fdd
 8008f4c:	08008fdd 	.word	0x08008fdd
 8008f50:	08008fdd 	.word	0x08008fdd
 8008f54:	08008fdd 	.word	0x08008fdd
 8008f58:	08008fdd 	.word	0x08008fdd
 8008f5c:	08008fcf 	.word	0x08008fcf
 8008f60:	2b40      	cmp	r3, #64	; 0x40
 8008f62:	d037      	beq.n	8008fd4 <UART_SetConfig+0x6bc>
 8008f64:	e03a      	b.n	8008fdc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f66:	f7fd ff95 	bl	8006e94 <HAL_RCCEx_GetD3PCLK1Freq>
 8008f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008f6c:	e03c      	b.n	8008fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fd ffa4 	bl	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f7c:	e034      	b.n	8008fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f7e:	f107 0318 	add.w	r3, r7, #24
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fe f8f0 	bl	8007168 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f8c:	e02c      	b.n	8008fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f8e:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <UART_SetConfig+0x69c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d016      	beq.n	8008fc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f9a:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <UART_SetConfig+0x69c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	08db      	lsrs	r3, r3, #3
 8008fa0:	f003 0303 	and.w	r3, r3, #3
 8008fa4:	4a07      	ldr	r2, [pc, #28]	; (8008fc4 <UART_SetConfig+0x6ac>)
 8008fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8008faa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fac:	e01c      	b.n	8008fe8 <UART_SetConfig+0x6d0>
 8008fae:	bf00      	nop
 8008fb0:	40011400 	.word	0x40011400
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	40007800 	.word	0x40007800
 8008fbc:	40007c00 	.word	0x40007c00
 8008fc0:	58000c00 	.word	0x58000c00
 8008fc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008fc8:	4b9d      	ldr	r3, [pc, #628]	; (8009240 <UART_SetConfig+0x928>)
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fcc:	e00c      	b.n	8008fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008fce:	4b9d      	ldr	r3, [pc, #628]	; (8009244 <UART_SetConfig+0x92c>)
 8008fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fd2:	e009      	b.n	8008fe8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fda:	e005      	b.n	8008fe8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008fdc:	2300      	movs	r3, #0
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008fe6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 81de 	beq.w	80093ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	4a94      	ldr	r2, [pc, #592]	; (8009248 <UART_SetConfig+0x930>)
 8008ff6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ffe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009002:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	4613      	mov	r3, r2
 800900a:	005b      	lsls	r3, r3, #1
 800900c:	4413      	add	r3, r2
 800900e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009010:	429a      	cmp	r2, r3
 8009012:	d305      	bcc.n	8009020 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800901a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901c:	429a      	cmp	r2, r3
 800901e:	d903      	bls.n	8009028 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009026:	e1c1      	b.n	80093ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800902a:	2200      	movs	r2, #0
 800902c:	60bb      	str	r3, [r7, #8]
 800902e:	60fa      	str	r2, [r7, #12]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009034:	4a84      	ldr	r2, [pc, #528]	; (8009248 <UART_SetConfig+0x930>)
 8009036:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800903a:	b29b      	uxth	r3, r3
 800903c:	2200      	movs	r2, #0
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	607a      	str	r2, [r7, #4]
 8009042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800904a:	f7f7 f999 	bl	8000380 <__aeabi_uldivmod>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	4610      	mov	r0, r2
 8009054:	4619      	mov	r1, r3
 8009056:	f04f 0200 	mov.w	r2, #0
 800905a:	f04f 0300 	mov.w	r3, #0
 800905e:	020b      	lsls	r3, r1, #8
 8009060:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009064:	0202      	lsls	r2, r0, #8
 8009066:	6979      	ldr	r1, [r7, #20]
 8009068:	6849      	ldr	r1, [r1, #4]
 800906a:	0849      	lsrs	r1, r1, #1
 800906c:	2000      	movs	r0, #0
 800906e:	460c      	mov	r4, r1
 8009070:	4605      	mov	r5, r0
 8009072:	eb12 0804 	adds.w	r8, r2, r4
 8009076:	eb43 0905 	adc.w	r9, r3, r5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	469a      	mov	sl, r3
 8009082:	4693      	mov	fp, r2
 8009084:	4652      	mov	r2, sl
 8009086:	465b      	mov	r3, fp
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 f978 	bl	8000380 <__aeabi_uldivmod>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4613      	mov	r3, r2
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800909e:	d308      	bcc.n	80090b2 <UART_SetConfig+0x79a>
 80090a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090a6:	d204      	bcs.n	80090b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090ae:	60da      	str	r2, [r3, #12]
 80090b0:	e17c      	b.n	80093ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090b8:	e178      	b.n	80093ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090c2:	f040 80c5 	bne.w	8009250 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80090c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090ca:	2b20      	cmp	r3, #32
 80090cc:	dc48      	bgt.n	8009160 <UART_SetConfig+0x848>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	db7b      	blt.n	80091ca <UART_SetConfig+0x8b2>
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	d879      	bhi.n	80091ca <UART_SetConfig+0x8b2>
 80090d6:	a201      	add	r2, pc, #4	; (adr r2, 80090dc <UART_SetConfig+0x7c4>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	08009167 	.word	0x08009167
 80090e0:	0800916f 	.word	0x0800916f
 80090e4:	080091cb 	.word	0x080091cb
 80090e8:	080091cb 	.word	0x080091cb
 80090ec:	08009177 	.word	0x08009177
 80090f0:	080091cb 	.word	0x080091cb
 80090f4:	080091cb 	.word	0x080091cb
 80090f8:	080091cb 	.word	0x080091cb
 80090fc:	08009187 	.word	0x08009187
 8009100:	080091cb 	.word	0x080091cb
 8009104:	080091cb 	.word	0x080091cb
 8009108:	080091cb 	.word	0x080091cb
 800910c:	080091cb 	.word	0x080091cb
 8009110:	080091cb 	.word	0x080091cb
 8009114:	080091cb 	.word	0x080091cb
 8009118:	080091cb 	.word	0x080091cb
 800911c:	08009197 	.word	0x08009197
 8009120:	080091cb 	.word	0x080091cb
 8009124:	080091cb 	.word	0x080091cb
 8009128:	080091cb 	.word	0x080091cb
 800912c:	080091cb 	.word	0x080091cb
 8009130:	080091cb 	.word	0x080091cb
 8009134:	080091cb 	.word	0x080091cb
 8009138:	080091cb 	.word	0x080091cb
 800913c:	080091cb 	.word	0x080091cb
 8009140:	080091cb 	.word	0x080091cb
 8009144:	080091cb 	.word	0x080091cb
 8009148:	080091cb 	.word	0x080091cb
 800914c:	080091cb 	.word	0x080091cb
 8009150:	080091cb 	.word	0x080091cb
 8009154:	080091cb 	.word	0x080091cb
 8009158:	080091cb 	.word	0x080091cb
 800915c:	080091bd 	.word	0x080091bd
 8009160:	2b40      	cmp	r3, #64	; 0x40
 8009162:	d02e      	beq.n	80091c2 <UART_SetConfig+0x8aa>
 8009164:	e031      	b.n	80091ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009166:	f7fc ff23 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 800916a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800916c:	e033      	b.n	80091d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800916e:	f7fc ff35 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 8009172:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009174:	e02f      	b.n	80091d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800917a:	4618      	mov	r0, r3
 800917c:	f7fd fea0 	bl	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009184:	e027      	b.n	80091d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009186:	f107 0318 	add.w	r3, r7, #24
 800918a:	4618      	mov	r0, r3
 800918c:	f7fd ffec 	bl	8007168 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009194:	e01f      	b.n	80091d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009196:	4b2d      	ldr	r3, [pc, #180]	; (800924c <UART_SetConfig+0x934>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0320 	and.w	r3, r3, #32
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d009      	beq.n	80091b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091a2:	4b2a      	ldr	r3, [pc, #168]	; (800924c <UART_SetConfig+0x934>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	08db      	lsrs	r3, r3, #3
 80091a8:	f003 0303 	and.w	r3, r3, #3
 80091ac:	4a24      	ldr	r2, [pc, #144]	; (8009240 <UART_SetConfig+0x928>)
 80091ae:	fa22 f303 	lsr.w	r3, r2, r3
 80091b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091b4:	e00f      	b.n	80091d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091b6:	4b22      	ldr	r3, [pc, #136]	; (8009240 <UART_SetConfig+0x928>)
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ba:	e00c      	b.n	80091d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091bc:	4b21      	ldr	r3, [pc, #132]	; (8009244 <UART_SetConfig+0x92c>)
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c0:	e009      	b.n	80091d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c8:	e005      	b.n	80091d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80091d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80091d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 80e7 	beq.w	80093ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	4a19      	ldr	r2, [pc, #100]	; (8009248 <UART_SetConfig+0x930>)
 80091e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80091f0:	005a      	lsls	r2, r3, #1
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	085b      	lsrs	r3, r3, #1
 80091f8:	441a      	add	r2, r3
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009202:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	2b0f      	cmp	r3, #15
 8009208:	d916      	bls.n	8009238 <UART_SetConfig+0x920>
 800920a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009210:	d212      	bcs.n	8009238 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009214:	b29b      	uxth	r3, r3
 8009216:	f023 030f 	bic.w	r3, r3, #15
 800921a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	085b      	lsrs	r3, r3, #1
 8009220:	b29b      	uxth	r3, r3
 8009222:	f003 0307 	and.w	r3, r3, #7
 8009226:	b29a      	uxth	r2, r3
 8009228:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800922a:	4313      	orrs	r3, r2
 800922c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009234:	60da      	str	r2, [r3, #12]
 8009236:	e0b9      	b.n	80093ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800923e:	e0b5      	b.n	80093ac <UART_SetConfig+0xa94>
 8009240:	03d09000 	.word	0x03d09000
 8009244:	003d0900 	.word	0x003d0900
 8009248:	0800ac38 	.word	0x0800ac38
 800924c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009250:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009254:	2b20      	cmp	r3, #32
 8009256:	dc49      	bgt.n	80092ec <UART_SetConfig+0x9d4>
 8009258:	2b00      	cmp	r3, #0
 800925a:	db7c      	blt.n	8009356 <UART_SetConfig+0xa3e>
 800925c:	2b20      	cmp	r3, #32
 800925e:	d87a      	bhi.n	8009356 <UART_SetConfig+0xa3e>
 8009260:	a201      	add	r2, pc, #4	; (adr r2, 8009268 <UART_SetConfig+0x950>)
 8009262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009266:	bf00      	nop
 8009268:	080092f3 	.word	0x080092f3
 800926c:	080092fb 	.word	0x080092fb
 8009270:	08009357 	.word	0x08009357
 8009274:	08009357 	.word	0x08009357
 8009278:	08009303 	.word	0x08009303
 800927c:	08009357 	.word	0x08009357
 8009280:	08009357 	.word	0x08009357
 8009284:	08009357 	.word	0x08009357
 8009288:	08009313 	.word	0x08009313
 800928c:	08009357 	.word	0x08009357
 8009290:	08009357 	.word	0x08009357
 8009294:	08009357 	.word	0x08009357
 8009298:	08009357 	.word	0x08009357
 800929c:	08009357 	.word	0x08009357
 80092a0:	08009357 	.word	0x08009357
 80092a4:	08009357 	.word	0x08009357
 80092a8:	08009323 	.word	0x08009323
 80092ac:	08009357 	.word	0x08009357
 80092b0:	08009357 	.word	0x08009357
 80092b4:	08009357 	.word	0x08009357
 80092b8:	08009357 	.word	0x08009357
 80092bc:	08009357 	.word	0x08009357
 80092c0:	08009357 	.word	0x08009357
 80092c4:	08009357 	.word	0x08009357
 80092c8:	08009357 	.word	0x08009357
 80092cc:	08009357 	.word	0x08009357
 80092d0:	08009357 	.word	0x08009357
 80092d4:	08009357 	.word	0x08009357
 80092d8:	08009357 	.word	0x08009357
 80092dc:	08009357 	.word	0x08009357
 80092e0:	08009357 	.word	0x08009357
 80092e4:	08009357 	.word	0x08009357
 80092e8:	08009349 	.word	0x08009349
 80092ec:	2b40      	cmp	r3, #64	; 0x40
 80092ee:	d02e      	beq.n	800934e <UART_SetConfig+0xa36>
 80092f0:	e031      	b.n	8009356 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092f2:	f7fc fe5d 	bl	8005fb0 <HAL_RCC_GetPCLK1Freq>
 80092f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80092f8:	e033      	b.n	8009362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092fa:	f7fc fe6f 	bl	8005fdc <HAL_RCC_GetPCLK2Freq>
 80092fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009300:	e02f      	b.n	8009362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009306:	4618      	mov	r0, r3
 8009308:	f7fd fdda 	bl	8006ec0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009310:	e027      	b.n	8009362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009312:	f107 0318 	add.w	r3, r7, #24
 8009316:	4618      	mov	r0, r3
 8009318:	f7fd ff26 	bl	8007168 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009320:	e01f      	b.n	8009362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009322:	4b2d      	ldr	r3, [pc, #180]	; (80093d8 <UART_SetConfig+0xac0>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0320 	and.w	r3, r3, #32
 800932a:	2b00      	cmp	r3, #0
 800932c:	d009      	beq.n	8009342 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800932e:	4b2a      	ldr	r3, [pc, #168]	; (80093d8 <UART_SetConfig+0xac0>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	08db      	lsrs	r3, r3, #3
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	4a28      	ldr	r2, [pc, #160]	; (80093dc <UART_SetConfig+0xac4>)
 800933a:	fa22 f303 	lsr.w	r3, r2, r3
 800933e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009340:	e00f      	b.n	8009362 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009342:	4b26      	ldr	r3, [pc, #152]	; (80093dc <UART_SetConfig+0xac4>)
 8009344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009346:	e00c      	b.n	8009362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009348:	4b25      	ldr	r3, [pc, #148]	; (80093e0 <UART_SetConfig+0xac8>)
 800934a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800934c:	e009      	b.n	8009362 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800934e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009354:	e005      	b.n	8009362 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009356:	2300      	movs	r3, #0
 8009358:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009360:	bf00      	nop
    }

    if (pclk != 0U)
 8009362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d021      	beq.n	80093ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <UART_SetConfig+0xacc>)
 800936e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009372:	461a      	mov	r2, r3
 8009374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009376:	fbb3 f2f2 	udiv	r2, r3, r2
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	085b      	lsrs	r3, r3, #1
 8009380:	441a      	add	r2, r3
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	fbb2 f3f3 	udiv	r3, r2, r3
 800938a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800938c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938e:	2b0f      	cmp	r3, #15
 8009390:	d909      	bls.n	80093a6 <UART_SetConfig+0xa8e>
 8009392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009398:	d205      	bcs.n	80093a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800939a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939c:	b29a      	uxth	r2, r3
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	60da      	str	r2, [r3, #12]
 80093a4:	e002      	b.n	80093ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2200      	movs	r2, #0
 80093c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2200      	movs	r2, #0
 80093c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80093c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3748      	adds	r7, #72	; 0x48
 80093d0:	46bd      	mov	sp, r7
 80093d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80093d6:	bf00      	nop
 80093d8:	58024400 	.word	0x58024400
 80093dc:	03d09000 	.word	0x03d09000
 80093e0:	003d0900 	.word	0x003d0900
 80093e4:	0800ac38 	.word	0x0800ac38

080093e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d00a      	beq.n	8009412 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00a      	beq.n	8009434 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	430a      	orrs	r2, r1
 8009432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00a      	beq.n	8009456 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	430a      	orrs	r2, r1
 8009454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945a:	f003 0308 	and.w	r3, r3, #8
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00a      	beq.n	8009478 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	430a      	orrs	r2, r1
 8009476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	f003 0310 	and.w	r3, r3, #16
 8009480:	2b00      	cmp	r3, #0
 8009482:	d00a      	beq.n	800949a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	430a      	orrs	r2, r1
 8009498:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	f003 0320 	and.w	r3, r3, #32
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	430a      	orrs	r2, r1
 80094ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d01a      	beq.n	80094fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	430a      	orrs	r2, r1
 80094dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094e6:	d10a      	bne.n	80094fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	605a      	str	r2, [r3, #4]
  }
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af02      	add	r7, sp, #8
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800953c:	f7f8 f830 	bl	80015a0 <HAL_GetTick>
 8009540:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b08      	cmp	r3, #8
 800954e:	d10e      	bne.n	800956e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009550:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009554:	9300      	str	r3, [sp, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f000 f82f 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e025      	b.n	80095ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0304 	and.w	r3, r3, #4
 8009578:	2b04      	cmp	r3, #4
 800957a:	d10e      	bne.n	800959a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800957c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f000 f819 	bl	80095c2 <UART_WaitOnFlagUntilTimeout>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009596:	2303      	movs	r3, #3
 8009598:	e00f      	b.n	80095ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2220      	movs	r2, #32
 800959e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b09c      	sub	sp, #112	; 0x70
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	603b      	str	r3, [r7, #0]
 80095ce:	4613      	mov	r3, r2
 80095d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095d2:	e0a9      	b.n	8009728 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095da:	f000 80a5 	beq.w	8009728 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095de:	f7f7 ffdf 	bl	80015a0 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d302      	bcc.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80095ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d140      	bne.n	8009676 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009604:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009608:	667b      	str	r3, [r7, #100]	; 0x64
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	461a      	mov	r2, r3
 8009610:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009614:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009616:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800961a:	e841 2300 	strex	r3, r2, [r1]
 800961e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009622:	2b00      	cmp	r3, #0
 8009624:	d1e6      	bne.n	80095f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3308      	adds	r3, #8
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009630:	e853 3f00 	ldrex	r3, [r3]
 8009634:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009638:	f023 0301 	bic.w	r3, r3, #1
 800963c:	663b      	str	r3, [r7, #96]	; 0x60
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009646:	64ba      	str	r2, [r7, #72]	; 0x48
 8009648:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800964c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964e:	e841 2300 	strex	r3, r2, [r1]
 8009652:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1e5      	bne.n	8009626 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2220      	movs	r2, #32
 800965e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2220      	movs	r2, #32
 8009666:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e069      	b.n	800974a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d051      	beq.n	8009728 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800968e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009692:	d149      	bne.n	8009728 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800969c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	461a      	mov	r2, r3
 80096ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096bc:	637b      	str	r3, [r7, #52]	; 0x34
 80096be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096c4:	e841 2300 	strex	r3, r2, [r1]
 80096c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80096ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1e6      	bne.n	800969e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	3308      	adds	r3, #8
 80096d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	613b      	str	r3, [r7, #16]
   return(result);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f023 0301 	bic.w	r3, r3, #1
 80096e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3308      	adds	r3, #8
 80096ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096f0:	623a      	str	r2, [r7, #32]
 80096f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	69f9      	ldr	r1, [r7, #28]
 80096f6:	6a3a      	ldr	r2, [r7, #32]
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e5      	bne.n	80096d0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2220      	movs	r2, #32
 8009710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2220      	movs	r2, #32
 8009718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e010      	b.n	800974a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	69da      	ldr	r2, [r3, #28]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4013      	ands	r3, r2
 8009732:	68ba      	ldr	r2, [r7, #8]
 8009734:	429a      	cmp	r2, r3
 8009736:	bf0c      	ite	eq
 8009738:	2301      	moveq	r3, #1
 800973a:	2300      	movne	r3, #0
 800973c:	b2db      	uxtb	r3, r3
 800973e:	461a      	mov	r2, r3
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	429a      	cmp	r2, r3
 8009744:	f43f af46 	beq.w	80095d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	3770      	adds	r7, #112	; 0x70
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009752:	b480      	push	{r7}
 8009754:	b08f      	sub	sp, #60	; 0x3c
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009760:	2b21      	cmp	r3, #33	; 0x21
 8009762:	d14c      	bne.n	80097fe <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800976a:	b29b      	uxth	r3, r3
 800976c:	2b00      	cmp	r3, #0
 800976e:	d132      	bne.n	80097d6 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	e853 3f00 	ldrex	r3, [r3]
 800977c:	61fb      	str	r3, [r7, #28]
   return(result);
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009790:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d1e6      	bne.n	8009770 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	e853 3f00 	ldrex	r3, [r3]
 80097ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097b6:	633b      	str	r3, [r7, #48]	; 0x30
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	61bb      	str	r3, [r7, #24]
 80097c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c4:	6979      	ldr	r1, [r7, #20]
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	e841 2300 	strex	r3, r2, [r1]
 80097cc:	613b      	str	r3, [r7, #16]
   return(result);
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1e6      	bne.n	80097a2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80097d4:	e013      	b.n	80097fe <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097da:	781a      	ldrb	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097e6:	1c5a      	adds	r2, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b01      	subs	r3, #1
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80097fe:	bf00      	nop
 8009800:	373c      	adds	r7, #60	; 0x3c
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr

0800980a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800980a:	b480      	push	{r7}
 800980c:	b091      	sub	sp, #68	; 0x44
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009818:	2b21      	cmp	r3, #33	; 0x21
 800981a:	d151      	bne.n	80098c0 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009822:	b29b      	uxth	r3, r3
 8009824:	2b00      	cmp	r3, #0
 8009826:	d132      	bne.n	800988e <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	623b      	str	r3, [r7, #32]
   return(result);
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800983c:	63bb      	str	r3, [r7, #56]	; 0x38
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009846:	633b      	str	r3, [r7, #48]	; 0x30
 8009848:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800984c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800984e:	e841 2300 	strex	r3, r2, [r1]
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009856:	2b00      	cmp	r3, #0
 8009858:	d1e6      	bne.n	8009828 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	e853 3f00 	ldrex	r3, [r3]
 8009866:	60fb      	str	r3, [r7, #12]
   return(result);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800986e:	637b      	str	r3, [r7, #52]	; 0x34
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	461a      	mov	r2, r3
 8009876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009878:	61fb      	str	r3, [r7, #28]
 800987a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987c:	69b9      	ldr	r1, [r7, #24]
 800987e:	69fa      	ldr	r2, [r7, #28]
 8009880:	e841 2300 	strex	r3, r2, [r1]
 8009884:	617b      	str	r3, [r7, #20]
   return(result);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1e6      	bne.n	800985a <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800988c:	e018      	b.n	80098c0 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009892:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	461a      	mov	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098a2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098a8:	1c9a      	adds	r2, r3, #2
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	3b01      	subs	r3, #1
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80098c0:	bf00      	nop
 80098c2:	3744      	adds	r7, #68	; 0x44
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b091      	sub	sp, #68	; 0x44
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098da:	2b21      	cmp	r3, #33	; 0x21
 80098dc:	d160      	bne.n	80099a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80098e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80098e6:	e057      	b.n	8009998 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d133      	bne.n	800995c <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	3308      	adds	r3, #8
 80098fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	e853 3f00 	ldrex	r3, [r3]
 8009902:	623b      	str	r3, [r7, #32]
   return(result);
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800990a:	63bb      	str	r3, [r7, #56]	; 0x38
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3308      	adds	r3, #8
 8009912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009914:	633a      	str	r2, [r7, #48]	; 0x30
 8009916:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800991a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991c:	e841 2300 	strex	r3, r2, [r1]
 8009920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	2b00      	cmp	r3, #0
 8009926:	d1e5      	bne.n	80098f4 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	e853 3f00 	ldrex	r3, [r3]
 8009934:	60fb      	str	r3, [r7, #12]
   return(result);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800993c:	637b      	str	r3, [r7, #52]	; 0x34
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009946:	61fb      	str	r3, [r7, #28]
 8009948:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	69b9      	ldr	r1, [r7, #24]
 800994c:	69fa      	ldr	r2, [r7, #28]
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	617b      	str	r3, [r7, #20]
   return(result);
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e6      	bne.n	8009928 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800995a:	e021      	b.n	80099a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009966:	2b00      	cmp	r3, #0
 8009968:	d013      	beq.n	8009992 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996e:	781a      	ldrb	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009986:	b29b      	uxth	r3, r3
 8009988:	3b01      	subs	r3, #1
 800998a:	b29a      	uxth	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009992:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009994:	3b01      	subs	r3, #1
 8009996:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1a4      	bne.n	80098e8 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800999e:	e7ff      	b.n	80099a0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 80099a0:	bf00      	nop
 80099a2:	3744      	adds	r7, #68	; 0x44
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b091      	sub	sp, #68	; 0x44
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ba:	2b21      	cmp	r3, #33	; 0x21
 80099bc:	d165      	bne.n	8009a8a <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80099c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80099c6:	e05c      	b.n	8009a82 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d133      	bne.n	8009a3c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	3308      	adds	r3, #8
 80099da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	e853 3f00 	ldrex	r3, [r3]
 80099e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80099ea:	637b      	str	r3, [r7, #52]	; 0x34
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3308      	adds	r3, #8
 80099f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80099f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80099fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099fc:	e841 2300 	strex	r3, r2, [r1]
 8009a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d1e5      	bne.n	80099d4 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	e853 3f00 	ldrex	r3, [r3]
 8009a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	461a      	mov	r2, r3
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	61bb      	str	r3, [r7, #24]
 8009a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a2a:	6979      	ldr	r1, [r7, #20]
 8009a2c:	69ba      	ldr	r2, [r7, #24]
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	613b      	str	r3, [r7, #16]
   return(result);
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1e6      	bne.n	8009a08 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8009a3a:	e026      	b.n	8009a8a <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d018      	beq.n	8009a7c <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a4e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	881b      	ldrh	r3, [r3, #0]
 8009a54:	461a      	mov	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a5e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a64:	1c9a      	adds	r2, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8009a7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a7e:	3b01      	subs	r3, #1
 8009a80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009a82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d19f      	bne.n	80099c8 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8009a88:	e7ff      	b.n	8009a8a <UART_TxISR_16BIT_FIFOEN+0xde>
 8009a8a:	bf00      	nop
 8009a8c:	3744      	adds	r7, #68	; 0x44
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b085      	sub	sp, #20
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d101      	bne.n	8009aac <HAL_UARTEx_DisableFifoMode+0x16>
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e027      	b.n	8009afc <HAL_UARTEx_DisableFifoMode+0x66>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2224      	movs	r2, #36	; 0x24
 8009ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f022 0201 	bic.w	r2, r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ada:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009afa:	2300      	movs	r3, #0
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d101      	bne.n	8009b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e02d      	b.n	8009b7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2224      	movs	r2, #36	; 0x24
 8009b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0201 	bic.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f84f 	bl	8009c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3710      	adds	r7, #16
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d101      	bne.n	8009b9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009b98:	2302      	movs	r3, #2
 8009b9a:	e02d      	b.n	8009bf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2224      	movs	r2, #36	; 0x24
 8009ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f022 0201 	bic.w	r2, r2, #1
 8009bc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	683a      	ldr	r2, [r7, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f811 	bl	8009c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d108      	bne.n	8009c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2201      	movs	r2, #1
 8009c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009c20:	e031      	b.n	8009c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009c22:	2310      	movs	r3, #16
 8009c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009c26:	2310      	movs	r3, #16
 8009c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	0e5b      	lsrs	r3, r3, #25
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	f003 0307 	and.w	r3, r3, #7
 8009c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	0f5b      	lsrs	r3, r3, #29
 8009c42:	b2db      	uxtb	r3, r3
 8009c44:	f003 0307 	and.w	r3, r3, #7
 8009c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c4a:	7bbb      	ldrb	r3, [r7, #14]
 8009c4c:	7b3a      	ldrb	r2, [r7, #12]
 8009c4e:	4911      	ldr	r1, [pc, #68]	; (8009c94 <UARTEx_SetNbDataToProcess+0x94>)
 8009c50:	5c8a      	ldrb	r2, [r1, r2]
 8009c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009c56:	7b3a      	ldrb	r2, [r7, #12]
 8009c58:	490f      	ldr	r1, [pc, #60]	; (8009c98 <UARTEx_SetNbDataToProcess+0x98>)
 8009c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c68:	7bfb      	ldrb	r3, [r7, #15]
 8009c6a:	7b7a      	ldrb	r2, [r7, #13]
 8009c6c:	4909      	ldr	r1, [pc, #36]	; (8009c94 <UARTEx_SetNbDataToProcess+0x94>)
 8009c6e:	5c8a      	ldrb	r2, [r1, r2]
 8009c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009c74:	7b7a      	ldrb	r2, [r7, #13]
 8009c76:	4908      	ldr	r1, [pc, #32]	; (8009c98 <UARTEx_SetNbDataToProcess+0x98>)
 8009c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009c86:	bf00      	nop
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	0800ac50 	.word	0x0800ac50
 8009c98:	0800ac58 	.word	0x0800ac58

08009c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b084      	sub	sp, #16
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	f107 001c 	add.w	r0, r7, #28
 8009caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d120      	bne.n	8009cf6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	4b2a      	ldr	r3, [pc, #168]	; (8009d70 <USB_CoreInit+0xd4>)
 8009cc6:	4013      	ands	r3, r2
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d105      	bne.n	8009cea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 faac 	bl	800a248 <USB_CoreReset>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	73fb      	strb	r3, [r7, #15]
 8009cf4:	e01a      	b.n	8009d2c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	68db      	ldr	r3, [r3, #12]
 8009cfa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 faa0 	bl	800a248 <USB_CoreReset>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38
 8009d1e:	e005      	b.n	8009d2c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d116      	bne.n	8009d60 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d40:	4b0c      	ldr	r3, [pc, #48]	; (8009d74 <USB_CoreInit+0xd8>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f043 0206 	orr.w	r2, r3, #6
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689b      	ldr	r3, [r3, #8]
 8009d58:	f043 0220 	orr.w	r2, r3, #32
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d6c:	b004      	add	sp, #16
 8009d6e:	4770      	bx	lr
 8009d70:	ffbdffbf 	.word	0xffbdffbf
 8009d74:	03ee0000 	.word	0x03ee0000

08009d78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	f023 0201 	bic.w	r2, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	370c      	adds	r7, #12
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b084      	sub	sp, #16
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009db6:	78fb      	ldrb	r3, [r7, #3]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d115      	bne.n	8009de8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	68db      	ldr	r3, [r3, #12]
 8009dc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009dc8:	2001      	movs	r0, #1
 8009dca:	f7f7 fbf5 	bl	80015b8 <HAL_Delay>
      ms++;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fa29 	bl	800a22c <USB_GetMode>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d01e      	beq.n	8009e1e <USB_SetCurrentMode+0x84>
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2b31      	cmp	r3, #49	; 0x31
 8009de4:	d9f0      	bls.n	8009dc8 <USB_SetCurrentMode+0x2e>
 8009de6:	e01a      	b.n	8009e1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d115      	bne.n	8009e1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009dfa:	2001      	movs	r0, #1
 8009dfc:	f7f7 fbdc 	bl	80015b8 <HAL_Delay>
      ms++;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	3301      	adds	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fa10 	bl	800a22c <USB_GetMode>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d005      	beq.n	8009e1e <USB_SetCurrentMode+0x84>
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2b31      	cmp	r3, #49	; 0x31
 8009e16:	d9f0      	bls.n	8009dfa <USB_SetCurrentMode+0x60>
 8009e18:	e001      	b.n	8009e1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e005      	b.n	8009e2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b32      	cmp	r3, #50	; 0x32
 8009e22:	d101      	bne.n	8009e28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e000      	b.n	8009e2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
	...

08009e34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009e34:	b084      	sub	sp, #16
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b086      	sub	sp, #24
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
 8009e3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009e42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	e009      	b.n	8009e68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	3340      	adds	r3, #64	; 0x40
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3301      	adds	r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	2b0e      	cmp	r3, #14
 8009e6c:	d9f2      	bls.n	8009e54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d11c      	bne.n	8009eae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e82:	f043 0302 	orr.w	r3, r3, #2
 8009e86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e005      	b.n	8009eba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ecc:	4619      	mov	r1, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	680b      	ldr	r3, [r1, #0]
 8009ed8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d10c      	bne.n	8009efa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d104      	bne.n	8009ef0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f000 f965 	bl	800a1b8 <USB_SetDevSpeed>
 8009eee:	e008      	b.n	8009f02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f960 	bl	800a1b8 <USB_SetDevSpeed>
 8009ef8:	e003      	b.n	8009f02 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009efa:	2103      	movs	r1, #3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 f95b 	bl	800a1b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009f02:	2110      	movs	r1, #16
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f000 f8f3 	bl	800a0f0 <USB_FlushTxFifo>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d001      	beq.n	8009f14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f91f 	bl	800a158 <USB_FlushRxFifo>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f36:	461a      	mov	r2, r3
 8009f38:	2300      	movs	r3, #0
 8009f3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	461a      	mov	r2, r3
 8009f44:	2300      	movs	r3, #0
 8009f46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	613b      	str	r3, [r7, #16]
 8009f4c:	e043      	b.n	8009fd6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	015a      	lsls	r2, r3, #5
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	4413      	add	r3, r2
 8009f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f64:	d118      	bne.n	8009f98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d10a      	bne.n	8009f82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	015a      	lsls	r2, r3, #5
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	4413      	add	r3, r2
 8009f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f78:	461a      	mov	r2, r3
 8009f7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e013      	b.n	8009faa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8e:	461a      	mov	r2, r3
 8009f90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	e008      	b.n	8009faa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	015a      	lsls	r2, r3, #5
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	015a      	lsls	r2, r3, #5
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	2300      	movs	r3, #0
 8009fba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	015a      	lsls	r2, r3, #5
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fc8:	461a      	mov	r2, r3
 8009fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009fce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	613b      	str	r3, [r7, #16]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	693a      	ldr	r2, [r7, #16]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d3b7      	bcc.n	8009f4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009fde:	2300      	movs	r3, #0
 8009fe0:	613b      	str	r3, [r7, #16]
 8009fe2:	e043      	b.n	800a06c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	015a      	lsls	r2, r3, #5
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	4413      	add	r3, r2
 8009fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ffa:	d118      	bne.n	800a02e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10a      	bne.n	800a018 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00e:	461a      	mov	r2, r3
 800a010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a014:	6013      	str	r3, [r2, #0]
 800a016:	e013      	b.n	800a040 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	015a      	lsls	r2, r3, #5
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a024:	461a      	mov	r2, r3
 800a026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a02a:	6013      	str	r3, [r2, #0]
 800a02c:	e008      	b.n	800a040 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a03a:	461a      	mov	r2, r3
 800a03c:	2300      	movs	r3, #0
 800a03e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a04c:	461a      	mov	r2, r3
 800a04e:	2300      	movs	r3, #0
 800a050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	015a      	lsls	r2, r3, #5
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	4413      	add	r3, r2
 800a05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05e:	461a      	mov	r2, r3
 800a060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	3301      	adds	r3, #1
 800a06a:	613b      	str	r3, [r7, #16]
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	693a      	ldr	r2, [r7, #16]
 800a070:	429a      	cmp	r2, r3
 800a072:	d3b7      	bcc.n	8009fe4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a086:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a094:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d105      	bne.n	800a0a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	f043 0210 	orr.w	r2, r3, #16
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	699a      	ldr	r2, [r3, #24]
 800a0ac:	4b0e      	ldr	r3, [pc, #56]	; (800a0e8 <USB_DevInit+0x2b4>)
 800a0ae:	4313      	orrs	r3, r2
 800a0b0:	687a      	ldr	r2, [r7, #4]
 800a0b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a0b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d005      	beq.n	800a0c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f043 0208 	orr.w	r2, r3, #8
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a0c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d105      	bne.n	800a0d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	4b06      	ldr	r3, [pc, #24]	; (800a0ec <USB_DevInit+0x2b8>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0e4:	b004      	add	sp, #16
 800a0e6:	4770      	bx	lr
 800a0e8:	803c3800 	.word	0x803c3800
 800a0ec:	40000004 	.word	0x40000004

0800a0f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	3301      	adds	r3, #1
 800a102:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	4a13      	ldr	r2, [pc, #76]	; (800a154 <USB_FlushTxFifo+0x64>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d901      	bls.n	800a110 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a10c:	2303      	movs	r3, #3
 800a10e:	e01b      	b.n	800a148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b00      	cmp	r3, #0
 800a116:	daf2      	bge.n	800a0fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	019b      	lsls	r3, r3, #6
 800a120:	f043 0220 	orr.w	r2, r3, #32
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3301      	adds	r3, #1
 800a12c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4a08      	ldr	r2, [pc, #32]	; (800a154 <USB_FlushTxFifo+0x64>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d901      	bls.n	800a13a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e006      	b.n	800a148 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	f003 0320 	and.w	r3, r3, #32
 800a142:	2b20      	cmp	r3, #32
 800a144:	d0f0      	beq.n	800a128 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	00030d40 	.word	0x00030d40

0800a158 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a160:	2300      	movs	r3, #0
 800a162:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3301      	adds	r3, #1
 800a168:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4a11      	ldr	r2, [pc, #68]	; (800a1b4 <USB_FlushRxFifo+0x5c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d901      	bls.n	800a176 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e018      	b.n	800a1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	691b      	ldr	r3, [r3, #16]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	daf2      	bge.n	800a164 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2210      	movs	r2, #16
 800a186:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
 800a18c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	4a08      	ldr	r2, [pc, #32]	; (800a1b4 <USB_FlushRxFifo+0x5c>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d901      	bls.n	800a19a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a196:	2303      	movs	r3, #3
 800a198:	e006      	b.n	800a1a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f003 0310 	and.w	r3, r3, #16
 800a1a2:	2b10      	cmp	r3, #16
 800a1a4:	d0f0      	beq.n	800a188 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	00030d40 	.word	0x00030d40

0800a1b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b085      	sub	sp, #20
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	78fb      	ldrb	r3, [r7, #3]
 800a1d2:	68f9      	ldr	r1, [r7, #12]
 800a1d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a1dc:	2300      	movs	r3, #0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3714      	adds	r7, #20
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e8:	4770      	bx	lr

0800a1ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b085      	sub	sp, #20
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a204:	f023 0303 	bic.w	r3, r3, #3
 800a208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a218:	f043 0302 	orr.w	r3, r3, #2
 800a21c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a21e:	2300      	movs	r3, #0
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	f003 0301 	and.w	r3, r3, #1
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3301      	adds	r3, #1
 800a258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	4a13      	ldr	r2, [pc, #76]	; (800a2ac <USB_CoreReset+0x64>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d901      	bls.n	800a266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a262:	2303      	movs	r3, #3
 800a264:	e01b      	b.n	800a29e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	daf2      	bge.n	800a254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	f043 0201 	orr.w	r2, r3, #1
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4a09      	ldr	r2, [pc, #36]	; (800a2ac <USB_CoreReset+0x64>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d901      	bls.n	800a290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a28c:	2303      	movs	r3, #3
 800a28e:	e006      	b.n	800a29e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f003 0301 	and.w	r3, r3, #1
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d0f0      	beq.n	800a27e <USB_CoreReset+0x36>

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3714      	adds	r7, #20
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr
 800a2aa:	bf00      	nop
 800a2ac:	00030d40 	.word	0x00030d40

0800a2b0 <__errno>:
 800a2b0:	4b01      	ldr	r3, [pc, #4]	; (800a2b8 <__errno+0x8>)
 800a2b2:	6818      	ldr	r0, [r3, #0]
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	24000010 	.word	0x24000010

0800a2bc <__libc_init_array>:
 800a2bc:	b570      	push	{r4, r5, r6, lr}
 800a2be:	4d0d      	ldr	r5, [pc, #52]	; (800a2f4 <__libc_init_array+0x38>)
 800a2c0:	4c0d      	ldr	r4, [pc, #52]	; (800a2f8 <__libc_init_array+0x3c>)
 800a2c2:	1b64      	subs	r4, r4, r5
 800a2c4:	10a4      	asrs	r4, r4, #2
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	42a6      	cmp	r6, r4
 800a2ca:	d109      	bne.n	800a2e0 <__libc_init_array+0x24>
 800a2cc:	4d0b      	ldr	r5, [pc, #44]	; (800a2fc <__libc_init_array+0x40>)
 800a2ce:	4c0c      	ldr	r4, [pc, #48]	; (800a300 <__libc_init_array+0x44>)
 800a2d0:	f000 fc8e 	bl	800abf0 <_init>
 800a2d4:	1b64      	subs	r4, r4, r5
 800a2d6:	10a4      	asrs	r4, r4, #2
 800a2d8:	2600      	movs	r6, #0
 800a2da:	42a6      	cmp	r6, r4
 800a2dc:	d105      	bne.n	800a2ea <__libc_init_array+0x2e>
 800a2de:	bd70      	pop	{r4, r5, r6, pc}
 800a2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2e4:	4798      	blx	r3
 800a2e6:	3601      	adds	r6, #1
 800a2e8:	e7ee      	b.n	800a2c8 <__libc_init_array+0xc>
 800a2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a2ee:	4798      	blx	r3
 800a2f0:	3601      	adds	r6, #1
 800a2f2:	e7f2      	b.n	800a2da <__libc_init_array+0x1e>
 800a2f4:	0800ac9c 	.word	0x0800ac9c
 800a2f8:	0800ac9c 	.word	0x0800ac9c
 800a2fc:	0800ac9c 	.word	0x0800ac9c
 800a300:	0800aca0 	.word	0x0800aca0

0800a304 <memset>:
 800a304:	4402      	add	r2, r0
 800a306:	4603      	mov	r3, r0
 800a308:	4293      	cmp	r3, r2
 800a30a:	d100      	bne.n	800a30e <memset+0xa>
 800a30c:	4770      	bx	lr
 800a30e:	f803 1b01 	strb.w	r1, [r3], #1
 800a312:	e7f9      	b.n	800a308 <memset+0x4>

0800a314 <siprintf>:
 800a314:	b40e      	push	{r1, r2, r3}
 800a316:	b500      	push	{lr}
 800a318:	b09c      	sub	sp, #112	; 0x70
 800a31a:	ab1d      	add	r3, sp, #116	; 0x74
 800a31c:	9002      	str	r0, [sp, #8]
 800a31e:	9006      	str	r0, [sp, #24]
 800a320:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a324:	4809      	ldr	r0, [pc, #36]	; (800a34c <siprintf+0x38>)
 800a326:	9107      	str	r1, [sp, #28]
 800a328:	9104      	str	r1, [sp, #16]
 800a32a:	4909      	ldr	r1, [pc, #36]	; (800a350 <siprintf+0x3c>)
 800a32c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a330:	9105      	str	r1, [sp, #20]
 800a332:	6800      	ldr	r0, [r0, #0]
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	a902      	add	r1, sp, #8
 800a338:	f000 f868 	bl	800a40c <_svfiprintf_r>
 800a33c:	9b02      	ldr	r3, [sp, #8]
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	b01c      	add	sp, #112	; 0x70
 800a344:	f85d eb04 	ldr.w	lr, [sp], #4
 800a348:	b003      	add	sp, #12
 800a34a:	4770      	bx	lr
 800a34c:	24000010 	.word	0x24000010
 800a350:	ffff0208 	.word	0xffff0208

0800a354 <__ssputs_r>:
 800a354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a358:	688e      	ldr	r6, [r1, #8]
 800a35a:	429e      	cmp	r6, r3
 800a35c:	4682      	mov	sl, r0
 800a35e:	460c      	mov	r4, r1
 800a360:	4690      	mov	r8, r2
 800a362:	461f      	mov	r7, r3
 800a364:	d838      	bhi.n	800a3d8 <__ssputs_r+0x84>
 800a366:	898a      	ldrh	r2, [r1, #12]
 800a368:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a36c:	d032      	beq.n	800a3d4 <__ssputs_r+0x80>
 800a36e:	6825      	ldr	r5, [r4, #0]
 800a370:	6909      	ldr	r1, [r1, #16]
 800a372:	eba5 0901 	sub.w	r9, r5, r1
 800a376:	6965      	ldr	r5, [r4, #20]
 800a378:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a37c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a380:	3301      	adds	r3, #1
 800a382:	444b      	add	r3, r9
 800a384:	106d      	asrs	r5, r5, #1
 800a386:	429d      	cmp	r5, r3
 800a388:	bf38      	it	cc
 800a38a:	461d      	movcc	r5, r3
 800a38c:	0553      	lsls	r3, r2, #21
 800a38e:	d531      	bpl.n	800a3f4 <__ssputs_r+0xa0>
 800a390:	4629      	mov	r1, r5
 800a392:	f000 fb63 	bl	800aa5c <_malloc_r>
 800a396:	4606      	mov	r6, r0
 800a398:	b950      	cbnz	r0, 800a3b0 <__ssputs_r+0x5c>
 800a39a:	230c      	movs	r3, #12
 800a39c:	f8ca 3000 	str.w	r3, [sl]
 800a3a0:	89a3      	ldrh	r3, [r4, #12]
 800a3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3a6:	81a3      	strh	r3, [r4, #12]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	6921      	ldr	r1, [r4, #16]
 800a3b2:	464a      	mov	r2, r9
 800a3b4:	f000 fabe 	bl	800a934 <memcpy>
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	6126      	str	r6, [r4, #16]
 800a3c6:	6165      	str	r5, [r4, #20]
 800a3c8:	444e      	add	r6, r9
 800a3ca:	eba5 0509 	sub.w	r5, r5, r9
 800a3ce:	6026      	str	r6, [r4, #0]
 800a3d0:	60a5      	str	r5, [r4, #8]
 800a3d2:	463e      	mov	r6, r7
 800a3d4:	42be      	cmp	r6, r7
 800a3d6:	d900      	bls.n	800a3da <__ssputs_r+0x86>
 800a3d8:	463e      	mov	r6, r7
 800a3da:	6820      	ldr	r0, [r4, #0]
 800a3dc:	4632      	mov	r2, r6
 800a3de:	4641      	mov	r1, r8
 800a3e0:	f000 fab6 	bl	800a950 <memmove>
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	1b9b      	subs	r3, r3, r6
 800a3e8:	60a3      	str	r3, [r4, #8]
 800a3ea:	6823      	ldr	r3, [r4, #0]
 800a3ec:	4433      	add	r3, r6
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e7db      	b.n	800a3ac <__ssputs_r+0x58>
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	f000 fba5 	bl	800ab44 <_realloc_r>
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1e1      	bne.n	800a3c4 <__ssputs_r+0x70>
 800a400:	6921      	ldr	r1, [r4, #16]
 800a402:	4650      	mov	r0, sl
 800a404:	f000 fabe 	bl	800a984 <_free_r>
 800a408:	e7c7      	b.n	800a39a <__ssputs_r+0x46>
	...

0800a40c <_svfiprintf_r>:
 800a40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	4698      	mov	r8, r3
 800a412:	898b      	ldrh	r3, [r1, #12]
 800a414:	061b      	lsls	r3, r3, #24
 800a416:	b09d      	sub	sp, #116	; 0x74
 800a418:	4607      	mov	r7, r0
 800a41a:	460d      	mov	r5, r1
 800a41c:	4614      	mov	r4, r2
 800a41e:	d50e      	bpl.n	800a43e <_svfiprintf_r+0x32>
 800a420:	690b      	ldr	r3, [r1, #16]
 800a422:	b963      	cbnz	r3, 800a43e <_svfiprintf_r+0x32>
 800a424:	2140      	movs	r1, #64	; 0x40
 800a426:	f000 fb19 	bl	800aa5c <_malloc_r>
 800a42a:	6028      	str	r0, [r5, #0]
 800a42c:	6128      	str	r0, [r5, #16]
 800a42e:	b920      	cbnz	r0, 800a43a <_svfiprintf_r+0x2e>
 800a430:	230c      	movs	r3, #12
 800a432:	603b      	str	r3, [r7, #0]
 800a434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a438:	e0d1      	b.n	800a5de <_svfiprintf_r+0x1d2>
 800a43a:	2340      	movs	r3, #64	; 0x40
 800a43c:	616b      	str	r3, [r5, #20]
 800a43e:	2300      	movs	r3, #0
 800a440:	9309      	str	r3, [sp, #36]	; 0x24
 800a442:	2320      	movs	r3, #32
 800a444:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a448:	f8cd 800c 	str.w	r8, [sp, #12]
 800a44c:	2330      	movs	r3, #48	; 0x30
 800a44e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5f8 <_svfiprintf_r+0x1ec>
 800a452:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a456:	f04f 0901 	mov.w	r9, #1
 800a45a:	4623      	mov	r3, r4
 800a45c:	469a      	mov	sl, r3
 800a45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a462:	b10a      	cbz	r2, 800a468 <_svfiprintf_r+0x5c>
 800a464:	2a25      	cmp	r2, #37	; 0x25
 800a466:	d1f9      	bne.n	800a45c <_svfiprintf_r+0x50>
 800a468:	ebba 0b04 	subs.w	fp, sl, r4
 800a46c:	d00b      	beq.n	800a486 <_svfiprintf_r+0x7a>
 800a46e:	465b      	mov	r3, fp
 800a470:	4622      	mov	r2, r4
 800a472:	4629      	mov	r1, r5
 800a474:	4638      	mov	r0, r7
 800a476:	f7ff ff6d 	bl	800a354 <__ssputs_r>
 800a47a:	3001      	adds	r0, #1
 800a47c:	f000 80aa 	beq.w	800a5d4 <_svfiprintf_r+0x1c8>
 800a480:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a482:	445a      	add	r2, fp
 800a484:	9209      	str	r2, [sp, #36]	; 0x24
 800a486:	f89a 3000 	ldrb.w	r3, [sl]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f000 80a2 	beq.w	800a5d4 <_svfiprintf_r+0x1c8>
 800a490:	2300      	movs	r3, #0
 800a492:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49a:	f10a 0a01 	add.w	sl, sl, #1
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	9307      	str	r3, [sp, #28]
 800a4a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4a6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4a8:	4654      	mov	r4, sl
 800a4aa:	2205      	movs	r2, #5
 800a4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b0:	4851      	ldr	r0, [pc, #324]	; (800a5f8 <_svfiprintf_r+0x1ec>)
 800a4b2:	f7f5 ff15 	bl	80002e0 <memchr>
 800a4b6:	9a04      	ldr	r2, [sp, #16]
 800a4b8:	b9d8      	cbnz	r0, 800a4f2 <_svfiprintf_r+0xe6>
 800a4ba:	06d0      	lsls	r0, r2, #27
 800a4bc:	bf44      	itt	mi
 800a4be:	2320      	movmi	r3, #32
 800a4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4c4:	0711      	lsls	r1, r2, #28
 800a4c6:	bf44      	itt	mi
 800a4c8:	232b      	movmi	r3, #43	; 0x2b
 800a4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d4:	d015      	beq.n	800a502 <_svfiprintf_r+0xf6>
 800a4d6:	9a07      	ldr	r2, [sp, #28]
 800a4d8:	4654      	mov	r4, sl
 800a4da:	2000      	movs	r0, #0
 800a4dc:	f04f 0c0a 	mov.w	ip, #10
 800a4e0:	4621      	mov	r1, r4
 800a4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e6:	3b30      	subs	r3, #48	; 0x30
 800a4e8:	2b09      	cmp	r3, #9
 800a4ea:	d94e      	bls.n	800a58a <_svfiprintf_r+0x17e>
 800a4ec:	b1b0      	cbz	r0, 800a51c <_svfiprintf_r+0x110>
 800a4ee:	9207      	str	r2, [sp, #28]
 800a4f0:	e014      	b.n	800a51c <_svfiprintf_r+0x110>
 800a4f2:	eba0 0308 	sub.w	r3, r0, r8
 800a4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	9304      	str	r3, [sp, #16]
 800a4fe:	46a2      	mov	sl, r4
 800a500:	e7d2      	b.n	800a4a8 <_svfiprintf_r+0x9c>
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	1d19      	adds	r1, r3, #4
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	9103      	str	r1, [sp, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	bfbb      	ittet	lt
 800a50e:	425b      	neglt	r3, r3
 800a510:	f042 0202 	orrlt.w	r2, r2, #2
 800a514:	9307      	strge	r3, [sp, #28]
 800a516:	9307      	strlt	r3, [sp, #28]
 800a518:	bfb8      	it	lt
 800a51a:	9204      	strlt	r2, [sp, #16]
 800a51c:	7823      	ldrb	r3, [r4, #0]
 800a51e:	2b2e      	cmp	r3, #46	; 0x2e
 800a520:	d10c      	bne.n	800a53c <_svfiprintf_r+0x130>
 800a522:	7863      	ldrb	r3, [r4, #1]
 800a524:	2b2a      	cmp	r3, #42	; 0x2a
 800a526:	d135      	bne.n	800a594 <_svfiprintf_r+0x188>
 800a528:	9b03      	ldr	r3, [sp, #12]
 800a52a:	1d1a      	adds	r2, r3, #4
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	9203      	str	r2, [sp, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	bfb8      	it	lt
 800a534:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a538:	3402      	adds	r4, #2
 800a53a:	9305      	str	r3, [sp, #20]
 800a53c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a608 <_svfiprintf_r+0x1fc>
 800a540:	7821      	ldrb	r1, [r4, #0]
 800a542:	2203      	movs	r2, #3
 800a544:	4650      	mov	r0, sl
 800a546:	f7f5 fecb 	bl	80002e0 <memchr>
 800a54a:	b140      	cbz	r0, 800a55e <_svfiprintf_r+0x152>
 800a54c:	2340      	movs	r3, #64	; 0x40
 800a54e:	eba0 000a 	sub.w	r0, r0, sl
 800a552:	fa03 f000 	lsl.w	r0, r3, r0
 800a556:	9b04      	ldr	r3, [sp, #16]
 800a558:	4303      	orrs	r3, r0
 800a55a:	3401      	adds	r4, #1
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a562:	4826      	ldr	r0, [pc, #152]	; (800a5fc <_svfiprintf_r+0x1f0>)
 800a564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a568:	2206      	movs	r2, #6
 800a56a:	f7f5 feb9 	bl	80002e0 <memchr>
 800a56e:	2800      	cmp	r0, #0
 800a570:	d038      	beq.n	800a5e4 <_svfiprintf_r+0x1d8>
 800a572:	4b23      	ldr	r3, [pc, #140]	; (800a600 <_svfiprintf_r+0x1f4>)
 800a574:	bb1b      	cbnz	r3, 800a5be <_svfiprintf_r+0x1b2>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	3307      	adds	r3, #7
 800a57a:	f023 0307 	bic.w	r3, r3, #7
 800a57e:	3308      	adds	r3, #8
 800a580:	9303      	str	r3, [sp, #12]
 800a582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a584:	4433      	add	r3, r6
 800a586:	9309      	str	r3, [sp, #36]	; 0x24
 800a588:	e767      	b.n	800a45a <_svfiprintf_r+0x4e>
 800a58a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a58e:	460c      	mov	r4, r1
 800a590:	2001      	movs	r0, #1
 800a592:	e7a5      	b.n	800a4e0 <_svfiprintf_r+0xd4>
 800a594:	2300      	movs	r3, #0
 800a596:	3401      	adds	r4, #1
 800a598:	9305      	str	r3, [sp, #20]
 800a59a:	4619      	mov	r1, r3
 800a59c:	f04f 0c0a 	mov.w	ip, #10
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a6:	3a30      	subs	r2, #48	; 0x30
 800a5a8:	2a09      	cmp	r2, #9
 800a5aa:	d903      	bls.n	800a5b4 <_svfiprintf_r+0x1a8>
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d0c5      	beq.n	800a53c <_svfiprintf_r+0x130>
 800a5b0:	9105      	str	r1, [sp, #20]
 800a5b2:	e7c3      	b.n	800a53c <_svfiprintf_r+0x130>
 800a5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b8:	4604      	mov	r4, r0
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e7f0      	b.n	800a5a0 <_svfiprintf_r+0x194>
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	9300      	str	r3, [sp, #0]
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4b0f      	ldr	r3, [pc, #60]	; (800a604 <_svfiprintf_r+0x1f8>)
 800a5c6:	a904      	add	r1, sp, #16
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f3af 8000 	nop.w
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	4606      	mov	r6, r0
 800a5d2:	d1d6      	bne.n	800a582 <_svfiprintf_r+0x176>
 800a5d4:	89ab      	ldrh	r3, [r5, #12]
 800a5d6:	065b      	lsls	r3, r3, #25
 800a5d8:	f53f af2c 	bmi.w	800a434 <_svfiprintf_r+0x28>
 800a5dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5de:	b01d      	add	sp, #116	; 0x74
 800a5e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e4:	ab03      	add	r3, sp, #12
 800a5e6:	9300      	str	r3, [sp, #0]
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4b06      	ldr	r3, [pc, #24]	; (800a604 <_svfiprintf_r+0x1f8>)
 800a5ec:	a904      	add	r1, sp, #16
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f000 f87a 	bl	800a6e8 <_printf_i>
 800a5f4:	e7eb      	b.n	800a5ce <_svfiprintf_r+0x1c2>
 800a5f6:	bf00      	nop
 800a5f8:	0800ac60 	.word	0x0800ac60
 800a5fc:	0800ac6a 	.word	0x0800ac6a
 800a600:	00000000 	.word	0x00000000
 800a604:	0800a355 	.word	0x0800a355
 800a608:	0800ac66 	.word	0x0800ac66

0800a60c <_printf_common>:
 800a60c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a610:	4616      	mov	r6, r2
 800a612:	4699      	mov	r9, r3
 800a614:	688a      	ldr	r2, [r1, #8]
 800a616:	690b      	ldr	r3, [r1, #16]
 800a618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a61c:	4293      	cmp	r3, r2
 800a61e:	bfb8      	it	lt
 800a620:	4613      	movlt	r3, r2
 800a622:	6033      	str	r3, [r6, #0]
 800a624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a628:	4607      	mov	r7, r0
 800a62a:	460c      	mov	r4, r1
 800a62c:	b10a      	cbz	r2, 800a632 <_printf_common+0x26>
 800a62e:	3301      	adds	r3, #1
 800a630:	6033      	str	r3, [r6, #0]
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	0699      	lsls	r1, r3, #26
 800a636:	bf42      	ittt	mi
 800a638:	6833      	ldrmi	r3, [r6, #0]
 800a63a:	3302      	addmi	r3, #2
 800a63c:	6033      	strmi	r3, [r6, #0]
 800a63e:	6825      	ldr	r5, [r4, #0]
 800a640:	f015 0506 	ands.w	r5, r5, #6
 800a644:	d106      	bne.n	800a654 <_printf_common+0x48>
 800a646:	f104 0a19 	add.w	sl, r4, #25
 800a64a:	68e3      	ldr	r3, [r4, #12]
 800a64c:	6832      	ldr	r2, [r6, #0]
 800a64e:	1a9b      	subs	r3, r3, r2
 800a650:	42ab      	cmp	r3, r5
 800a652:	dc26      	bgt.n	800a6a2 <_printf_common+0x96>
 800a654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a658:	1e13      	subs	r3, r2, #0
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	bf18      	it	ne
 800a65e:	2301      	movne	r3, #1
 800a660:	0692      	lsls	r2, r2, #26
 800a662:	d42b      	bmi.n	800a6bc <_printf_common+0xb0>
 800a664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a668:	4649      	mov	r1, r9
 800a66a:	4638      	mov	r0, r7
 800a66c:	47c0      	blx	r8
 800a66e:	3001      	adds	r0, #1
 800a670:	d01e      	beq.n	800a6b0 <_printf_common+0xa4>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	68e5      	ldr	r5, [r4, #12]
 800a676:	6832      	ldr	r2, [r6, #0]
 800a678:	f003 0306 	and.w	r3, r3, #6
 800a67c:	2b04      	cmp	r3, #4
 800a67e:	bf08      	it	eq
 800a680:	1aad      	subeq	r5, r5, r2
 800a682:	68a3      	ldr	r3, [r4, #8]
 800a684:	6922      	ldr	r2, [r4, #16]
 800a686:	bf0c      	ite	eq
 800a688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a68c:	2500      	movne	r5, #0
 800a68e:	4293      	cmp	r3, r2
 800a690:	bfc4      	itt	gt
 800a692:	1a9b      	subgt	r3, r3, r2
 800a694:	18ed      	addgt	r5, r5, r3
 800a696:	2600      	movs	r6, #0
 800a698:	341a      	adds	r4, #26
 800a69a:	42b5      	cmp	r5, r6
 800a69c:	d11a      	bne.n	800a6d4 <_printf_common+0xc8>
 800a69e:	2000      	movs	r0, #0
 800a6a0:	e008      	b.n	800a6b4 <_printf_common+0xa8>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	4652      	mov	r2, sl
 800a6a6:	4649      	mov	r1, r9
 800a6a8:	4638      	mov	r0, r7
 800a6aa:	47c0      	blx	r8
 800a6ac:	3001      	adds	r0, #1
 800a6ae:	d103      	bne.n	800a6b8 <_printf_common+0xac>
 800a6b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b8:	3501      	adds	r5, #1
 800a6ba:	e7c6      	b.n	800a64a <_printf_common+0x3e>
 800a6bc:	18e1      	adds	r1, r4, r3
 800a6be:	1c5a      	adds	r2, r3, #1
 800a6c0:	2030      	movs	r0, #48	; 0x30
 800a6c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a6c6:	4422      	add	r2, r4
 800a6c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a6cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6d0:	3302      	adds	r3, #2
 800a6d2:	e7c7      	b.n	800a664 <_printf_common+0x58>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	4622      	mov	r2, r4
 800a6d8:	4649      	mov	r1, r9
 800a6da:	4638      	mov	r0, r7
 800a6dc:	47c0      	blx	r8
 800a6de:	3001      	adds	r0, #1
 800a6e0:	d0e6      	beq.n	800a6b0 <_printf_common+0xa4>
 800a6e2:	3601      	adds	r6, #1
 800a6e4:	e7d9      	b.n	800a69a <_printf_common+0x8e>
	...

0800a6e8 <_printf_i>:
 800a6e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6ec:	7e0f      	ldrb	r7, [r1, #24]
 800a6ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6f0:	2f78      	cmp	r7, #120	; 0x78
 800a6f2:	4691      	mov	r9, r2
 800a6f4:	4680      	mov	r8, r0
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	469a      	mov	sl, r3
 800a6fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6fe:	d807      	bhi.n	800a710 <_printf_i+0x28>
 800a700:	2f62      	cmp	r7, #98	; 0x62
 800a702:	d80a      	bhi.n	800a71a <_printf_i+0x32>
 800a704:	2f00      	cmp	r7, #0
 800a706:	f000 80d8 	beq.w	800a8ba <_printf_i+0x1d2>
 800a70a:	2f58      	cmp	r7, #88	; 0x58
 800a70c:	f000 80a3 	beq.w	800a856 <_printf_i+0x16e>
 800a710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a718:	e03a      	b.n	800a790 <_printf_i+0xa8>
 800a71a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a71e:	2b15      	cmp	r3, #21
 800a720:	d8f6      	bhi.n	800a710 <_printf_i+0x28>
 800a722:	a101      	add	r1, pc, #4	; (adr r1, 800a728 <_printf_i+0x40>)
 800a724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a728:	0800a781 	.word	0x0800a781
 800a72c:	0800a795 	.word	0x0800a795
 800a730:	0800a711 	.word	0x0800a711
 800a734:	0800a711 	.word	0x0800a711
 800a738:	0800a711 	.word	0x0800a711
 800a73c:	0800a711 	.word	0x0800a711
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a711 	.word	0x0800a711
 800a748:	0800a711 	.word	0x0800a711
 800a74c:	0800a711 	.word	0x0800a711
 800a750:	0800a711 	.word	0x0800a711
 800a754:	0800a8a1 	.word	0x0800a8a1
 800a758:	0800a7c5 	.word	0x0800a7c5
 800a75c:	0800a883 	.word	0x0800a883
 800a760:	0800a711 	.word	0x0800a711
 800a764:	0800a711 	.word	0x0800a711
 800a768:	0800a8c3 	.word	0x0800a8c3
 800a76c:	0800a711 	.word	0x0800a711
 800a770:	0800a7c5 	.word	0x0800a7c5
 800a774:	0800a711 	.word	0x0800a711
 800a778:	0800a711 	.word	0x0800a711
 800a77c:	0800a88b 	.word	0x0800a88b
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	1d1a      	adds	r2, r3, #4
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	602a      	str	r2, [r5, #0]
 800a788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a78c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a790:	2301      	movs	r3, #1
 800a792:	e0a3      	b.n	800a8dc <_printf_i+0x1f4>
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	6829      	ldr	r1, [r5, #0]
 800a798:	0606      	lsls	r6, r0, #24
 800a79a:	f101 0304 	add.w	r3, r1, #4
 800a79e:	d50a      	bpl.n	800a7b6 <_printf_i+0xce>
 800a7a0:	680e      	ldr	r6, [r1, #0]
 800a7a2:	602b      	str	r3, [r5, #0]
 800a7a4:	2e00      	cmp	r6, #0
 800a7a6:	da03      	bge.n	800a7b0 <_printf_i+0xc8>
 800a7a8:	232d      	movs	r3, #45	; 0x2d
 800a7aa:	4276      	negs	r6, r6
 800a7ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b0:	485e      	ldr	r0, [pc, #376]	; (800a92c <_printf_i+0x244>)
 800a7b2:	230a      	movs	r3, #10
 800a7b4:	e019      	b.n	800a7ea <_printf_i+0x102>
 800a7b6:	680e      	ldr	r6, [r1, #0]
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a7be:	bf18      	it	ne
 800a7c0:	b236      	sxthne	r6, r6
 800a7c2:	e7ef      	b.n	800a7a4 <_printf_i+0xbc>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	1d19      	adds	r1, r3, #4
 800a7ca:	6029      	str	r1, [r5, #0]
 800a7cc:	0601      	lsls	r1, r0, #24
 800a7ce:	d501      	bpl.n	800a7d4 <_printf_i+0xec>
 800a7d0:	681e      	ldr	r6, [r3, #0]
 800a7d2:	e002      	b.n	800a7da <_printf_i+0xf2>
 800a7d4:	0646      	lsls	r6, r0, #25
 800a7d6:	d5fb      	bpl.n	800a7d0 <_printf_i+0xe8>
 800a7d8:	881e      	ldrh	r6, [r3, #0]
 800a7da:	4854      	ldr	r0, [pc, #336]	; (800a92c <_printf_i+0x244>)
 800a7dc:	2f6f      	cmp	r7, #111	; 0x6f
 800a7de:	bf0c      	ite	eq
 800a7e0:	2308      	moveq	r3, #8
 800a7e2:	230a      	movne	r3, #10
 800a7e4:	2100      	movs	r1, #0
 800a7e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7ea:	6865      	ldr	r5, [r4, #4]
 800a7ec:	60a5      	str	r5, [r4, #8]
 800a7ee:	2d00      	cmp	r5, #0
 800a7f0:	bfa2      	ittt	ge
 800a7f2:	6821      	ldrge	r1, [r4, #0]
 800a7f4:	f021 0104 	bicge.w	r1, r1, #4
 800a7f8:	6021      	strge	r1, [r4, #0]
 800a7fa:	b90e      	cbnz	r6, 800a800 <_printf_i+0x118>
 800a7fc:	2d00      	cmp	r5, #0
 800a7fe:	d04d      	beq.n	800a89c <_printf_i+0x1b4>
 800a800:	4615      	mov	r5, r2
 800a802:	fbb6 f1f3 	udiv	r1, r6, r3
 800a806:	fb03 6711 	mls	r7, r3, r1, r6
 800a80a:	5dc7      	ldrb	r7, [r0, r7]
 800a80c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a810:	4637      	mov	r7, r6
 800a812:	42bb      	cmp	r3, r7
 800a814:	460e      	mov	r6, r1
 800a816:	d9f4      	bls.n	800a802 <_printf_i+0x11a>
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d10b      	bne.n	800a834 <_printf_i+0x14c>
 800a81c:	6823      	ldr	r3, [r4, #0]
 800a81e:	07de      	lsls	r6, r3, #31
 800a820:	d508      	bpl.n	800a834 <_printf_i+0x14c>
 800a822:	6923      	ldr	r3, [r4, #16]
 800a824:	6861      	ldr	r1, [r4, #4]
 800a826:	4299      	cmp	r1, r3
 800a828:	bfde      	ittt	le
 800a82a:	2330      	movle	r3, #48	; 0x30
 800a82c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a834:	1b52      	subs	r2, r2, r5
 800a836:	6122      	str	r2, [r4, #16]
 800a838:	f8cd a000 	str.w	sl, [sp]
 800a83c:	464b      	mov	r3, r9
 800a83e:	aa03      	add	r2, sp, #12
 800a840:	4621      	mov	r1, r4
 800a842:	4640      	mov	r0, r8
 800a844:	f7ff fee2 	bl	800a60c <_printf_common>
 800a848:	3001      	adds	r0, #1
 800a84a:	d14c      	bne.n	800a8e6 <_printf_i+0x1fe>
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a850:	b004      	add	sp, #16
 800a852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a856:	4835      	ldr	r0, [pc, #212]	; (800a92c <_printf_i+0x244>)
 800a858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a85c:	6829      	ldr	r1, [r5, #0]
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	f851 6b04 	ldr.w	r6, [r1], #4
 800a864:	6029      	str	r1, [r5, #0]
 800a866:	061d      	lsls	r5, r3, #24
 800a868:	d514      	bpl.n	800a894 <_printf_i+0x1ac>
 800a86a:	07df      	lsls	r7, r3, #31
 800a86c:	bf44      	itt	mi
 800a86e:	f043 0320 	orrmi.w	r3, r3, #32
 800a872:	6023      	strmi	r3, [r4, #0]
 800a874:	b91e      	cbnz	r6, 800a87e <_printf_i+0x196>
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	f023 0320 	bic.w	r3, r3, #32
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	2310      	movs	r3, #16
 800a880:	e7b0      	b.n	800a7e4 <_printf_i+0xfc>
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	f043 0320 	orr.w	r3, r3, #32
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	2378      	movs	r3, #120	; 0x78
 800a88c:	4828      	ldr	r0, [pc, #160]	; (800a930 <_printf_i+0x248>)
 800a88e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a892:	e7e3      	b.n	800a85c <_printf_i+0x174>
 800a894:	0659      	lsls	r1, r3, #25
 800a896:	bf48      	it	mi
 800a898:	b2b6      	uxthmi	r6, r6
 800a89a:	e7e6      	b.n	800a86a <_printf_i+0x182>
 800a89c:	4615      	mov	r5, r2
 800a89e:	e7bb      	b.n	800a818 <_printf_i+0x130>
 800a8a0:	682b      	ldr	r3, [r5, #0]
 800a8a2:	6826      	ldr	r6, [r4, #0]
 800a8a4:	6961      	ldr	r1, [r4, #20]
 800a8a6:	1d18      	adds	r0, r3, #4
 800a8a8:	6028      	str	r0, [r5, #0]
 800a8aa:	0635      	lsls	r5, r6, #24
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	d501      	bpl.n	800a8b4 <_printf_i+0x1cc>
 800a8b0:	6019      	str	r1, [r3, #0]
 800a8b2:	e002      	b.n	800a8ba <_printf_i+0x1d2>
 800a8b4:	0670      	lsls	r0, r6, #25
 800a8b6:	d5fb      	bpl.n	800a8b0 <_printf_i+0x1c8>
 800a8b8:	8019      	strh	r1, [r3, #0]
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	6123      	str	r3, [r4, #16]
 800a8be:	4615      	mov	r5, r2
 800a8c0:	e7ba      	b.n	800a838 <_printf_i+0x150>
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	1d1a      	adds	r2, r3, #4
 800a8c6:	602a      	str	r2, [r5, #0]
 800a8c8:	681d      	ldr	r5, [r3, #0]
 800a8ca:	6862      	ldr	r2, [r4, #4]
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f7f5 fd06 	bl	80002e0 <memchr>
 800a8d4:	b108      	cbz	r0, 800a8da <_printf_i+0x1f2>
 800a8d6:	1b40      	subs	r0, r0, r5
 800a8d8:	6060      	str	r0, [r4, #4]
 800a8da:	6863      	ldr	r3, [r4, #4]
 800a8dc:	6123      	str	r3, [r4, #16]
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8e4:	e7a8      	b.n	800a838 <_printf_i+0x150>
 800a8e6:	6923      	ldr	r3, [r4, #16]
 800a8e8:	462a      	mov	r2, r5
 800a8ea:	4649      	mov	r1, r9
 800a8ec:	4640      	mov	r0, r8
 800a8ee:	47d0      	blx	sl
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	d0ab      	beq.n	800a84c <_printf_i+0x164>
 800a8f4:	6823      	ldr	r3, [r4, #0]
 800a8f6:	079b      	lsls	r3, r3, #30
 800a8f8:	d413      	bmi.n	800a922 <_printf_i+0x23a>
 800a8fa:	68e0      	ldr	r0, [r4, #12]
 800a8fc:	9b03      	ldr	r3, [sp, #12]
 800a8fe:	4298      	cmp	r0, r3
 800a900:	bfb8      	it	lt
 800a902:	4618      	movlt	r0, r3
 800a904:	e7a4      	b.n	800a850 <_printf_i+0x168>
 800a906:	2301      	movs	r3, #1
 800a908:	4632      	mov	r2, r6
 800a90a:	4649      	mov	r1, r9
 800a90c:	4640      	mov	r0, r8
 800a90e:	47d0      	blx	sl
 800a910:	3001      	adds	r0, #1
 800a912:	d09b      	beq.n	800a84c <_printf_i+0x164>
 800a914:	3501      	adds	r5, #1
 800a916:	68e3      	ldr	r3, [r4, #12]
 800a918:	9903      	ldr	r1, [sp, #12]
 800a91a:	1a5b      	subs	r3, r3, r1
 800a91c:	42ab      	cmp	r3, r5
 800a91e:	dcf2      	bgt.n	800a906 <_printf_i+0x21e>
 800a920:	e7eb      	b.n	800a8fa <_printf_i+0x212>
 800a922:	2500      	movs	r5, #0
 800a924:	f104 0619 	add.w	r6, r4, #25
 800a928:	e7f5      	b.n	800a916 <_printf_i+0x22e>
 800a92a:	bf00      	nop
 800a92c:	0800ac71 	.word	0x0800ac71
 800a930:	0800ac82 	.word	0x0800ac82

0800a934 <memcpy>:
 800a934:	440a      	add	r2, r1
 800a936:	4291      	cmp	r1, r2
 800a938:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a93c:	d100      	bne.n	800a940 <memcpy+0xc>
 800a93e:	4770      	bx	lr
 800a940:	b510      	push	{r4, lr}
 800a942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94a:	4291      	cmp	r1, r2
 800a94c:	d1f9      	bne.n	800a942 <memcpy+0xe>
 800a94e:	bd10      	pop	{r4, pc}

0800a950 <memmove>:
 800a950:	4288      	cmp	r0, r1
 800a952:	b510      	push	{r4, lr}
 800a954:	eb01 0402 	add.w	r4, r1, r2
 800a958:	d902      	bls.n	800a960 <memmove+0x10>
 800a95a:	4284      	cmp	r4, r0
 800a95c:	4623      	mov	r3, r4
 800a95e:	d807      	bhi.n	800a970 <memmove+0x20>
 800a960:	1e43      	subs	r3, r0, #1
 800a962:	42a1      	cmp	r1, r4
 800a964:	d008      	beq.n	800a978 <memmove+0x28>
 800a966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a96a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a96e:	e7f8      	b.n	800a962 <memmove+0x12>
 800a970:	4402      	add	r2, r0
 800a972:	4601      	mov	r1, r0
 800a974:	428a      	cmp	r2, r1
 800a976:	d100      	bne.n	800a97a <memmove+0x2a>
 800a978:	bd10      	pop	{r4, pc}
 800a97a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a97e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a982:	e7f7      	b.n	800a974 <memmove+0x24>

0800a984 <_free_r>:
 800a984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a986:	2900      	cmp	r1, #0
 800a988:	d044      	beq.n	800aa14 <_free_r+0x90>
 800a98a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a98e:	9001      	str	r0, [sp, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	f1a1 0404 	sub.w	r4, r1, #4
 800a996:	bfb8      	it	lt
 800a998:	18e4      	addlt	r4, r4, r3
 800a99a:	f000 f913 	bl	800abc4 <__malloc_lock>
 800a99e:	4a1e      	ldr	r2, [pc, #120]	; (800aa18 <_free_r+0x94>)
 800a9a0:	9801      	ldr	r0, [sp, #4]
 800a9a2:	6813      	ldr	r3, [r2, #0]
 800a9a4:	b933      	cbnz	r3, 800a9b4 <_free_r+0x30>
 800a9a6:	6063      	str	r3, [r4, #4]
 800a9a8:	6014      	str	r4, [r2, #0]
 800a9aa:	b003      	add	sp, #12
 800a9ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9b0:	f000 b90e 	b.w	800abd0 <__malloc_unlock>
 800a9b4:	42a3      	cmp	r3, r4
 800a9b6:	d908      	bls.n	800a9ca <_free_r+0x46>
 800a9b8:	6825      	ldr	r5, [r4, #0]
 800a9ba:	1961      	adds	r1, r4, r5
 800a9bc:	428b      	cmp	r3, r1
 800a9be:	bf01      	itttt	eq
 800a9c0:	6819      	ldreq	r1, [r3, #0]
 800a9c2:	685b      	ldreq	r3, [r3, #4]
 800a9c4:	1949      	addeq	r1, r1, r5
 800a9c6:	6021      	streq	r1, [r4, #0]
 800a9c8:	e7ed      	b.n	800a9a6 <_free_r+0x22>
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	b10b      	cbz	r3, 800a9d4 <_free_r+0x50>
 800a9d0:	42a3      	cmp	r3, r4
 800a9d2:	d9fa      	bls.n	800a9ca <_free_r+0x46>
 800a9d4:	6811      	ldr	r1, [r2, #0]
 800a9d6:	1855      	adds	r5, r2, r1
 800a9d8:	42a5      	cmp	r5, r4
 800a9da:	d10b      	bne.n	800a9f4 <_free_r+0x70>
 800a9dc:	6824      	ldr	r4, [r4, #0]
 800a9de:	4421      	add	r1, r4
 800a9e0:	1854      	adds	r4, r2, r1
 800a9e2:	42a3      	cmp	r3, r4
 800a9e4:	6011      	str	r1, [r2, #0]
 800a9e6:	d1e0      	bne.n	800a9aa <_free_r+0x26>
 800a9e8:	681c      	ldr	r4, [r3, #0]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	6053      	str	r3, [r2, #4]
 800a9ee:	4421      	add	r1, r4
 800a9f0:	6011      	str	r1, [r2, #0]
 800a9f2:	e7da      	b.n	800a9aa <_free_r+0x26>
 800a9f4:	d902      	bls.n	800a9fc <_free_r+0x78>
 800a9f6:	230c      	movs	r3, #12
 800a9f8:	6003      	str	r3, [r0, #0]
 800a9fa:	e7d6      	b.n	800a9aa <_free_r+0x26>
 800a9fc:	6825      	ldr	r5, [r4, #0]
 800a9fe:	1961      	adds	r1, r4, r5
 800aa00:	428b      	cmp	r3, r1
 800aa02:	bf04      	itt	eq
 800aa04:	6819      	ldreq	r1, [r3, #0]
 800aa06:	685b      	ldreq	r3, [r3, #4]
 800aa08:	6063      	str	r3, [r4, #4]
 800aa0a:	bf04      	itt	eq
 800aa0c:	1949      	addeq	r1, r1, r5
 800aa0e:	6021      	streq	r1, [r4, #0]
 800aa10:	6054      	str	r4, [r2, #4]
 800aa12:	e7ca      	b.n	800a9aa <_free_r+0x26>
 800aa14:	b003      	add	sp, #12
 800aa16:	bd30      	pop	{r4, r5, pc}
 800aa18:	24000928 	.word	0x24000928

0800aa1c <sbrk_aligned>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	4e0e      	ldr	r6, [pc, #56]	; (800aa58 <sbrk_aligned+0x3c>)
 800aa20:	460c      	mov	r4, r1
 800aa22:	6831      	ldr	r1, [r6, #0]
 800aa24:	4605      	mov	r5, r0
 800aa26:	b911      	cbnz	r1, 800aa2e <sbrk_aligned+0x12>
 800aa28:	f000 f8bc 	bl	800aba4 <_sbrk_r>
 800aa2c:	6030      	str	r0, [r6, #0]
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f000 f8b7 	bl	800aba4 <_sbrk_r>
 800aa36:	1c43      	adds	r3, r0, #1
 800aa38:	d00a      	beq.n	800aa50 <sbrk_aligned+0x34>
 800aa3a:	1cc4      	adds	r4, r0, #3
 800aa3c:	f024 0403 	bic.w	r4, r4, #3
 800aa40:	42a0      	cmp	r0, r4
 800aa42:	d007      	beq.n	800aa54 <sbrk_aligned+0x38>
 800aa44:	1a21      	subs	r1, r4, r0
 800aa46:	4628      	mov	r0, r5
 800aa48:	f000 f8ac 	bl	800aba4 <_sbrk_r>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d101      	bne.n	800aa54 <sbrk_aligned+0x38>
 800aa50:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aa54:	4620      	mov	r0, r4
 800aa56:	bd70      	pop	{r4, r5, r6, pc}
 800aa58:	2400092c 	.word	0x2400092c

0800aa5c <_malloc_r>:
 800aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa60:	1ccd      	adds	r5, r1, #3
 800aa62:	f025 0503 	bic.w	r5, r5, #3
 800aa66:	3508      	adds	r5, #8
 800aa68:	2d0c      	cmp	r5, #12
 800aa6a:	bf38      	it	cc
 800aa6c:	250c      	movcc	r5, #12
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	4607      	mov	r7, r0
 800aa72:	db01      	blt.n	800aa78 <_malloc_r+0x1c>
 800aa74:	42a9      	cmp	r1, r5
 800aa76:	d905      	bls.n	800aa84 <_malloc_r+0x28>
 800aa78:	230c      	movs	r3, #12
 800aa7a:	603b      	str	r3, [r7, #0]
 800aa7c:	2600      	movs	r6, #0
 800aa7e:	4630      	mov	r0, r6
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa84:	4e2e      	ldr	r6, [pc, #184]	; (800ab40 <_malloc_r+0xe4>)
 800aa86:	f000 f89d 	bl	800abc4 <__malloc_lock>
 800aa8a:	6833      	ldr	r3, [r6, #0]
 800aa8c:	461c      	mov	r4, r3
 800aa8e:	bb34      	cbnz	r4, 800aade <_malloc_r+0x82>
 800aa90:	4629      	mov	r1, r5
 800aa92:	4638      	mov	r0, r7
 800aa94:	f7ff ffc2 	bl	800aa1c <sbrk_aligned>
 800aa98:	1c43      	adds	r3, r0, #1
 800aa9a:	4604      	mov	r4, r0
 800aa9c:	d14d      	bne.n	800ab3a <_malloc_r+0xde>
 800aa9e:	6834      	ldr	r4, [r6, #0]
 800aaa0:	4626      	mov	r6, r4
 800aaa2:	2e00      	cmp	r6, #0
 800aaa4:	d140      	bne.n	800ab28 <_malloc_r+0xcc>
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	4631      	mov	r1, r6
 800aaaa:	4638      	mov	r0, r7
 800aaac:	eb04 0803 	add.w	r8, r4, r3
 800aab0:	f000 f878 	bl	800aba4 <_sbrk_r>
 800aab4:	4580      	cmp	r8, r0
 800aab6:	d13a      	bne.n	800ab2e <_malloc_r+0xd2>
 800aab8:	6821      	ldr	r1, [r4, #0]
 800aaba:	3503      	adds	r5, #3
 800aabc:	1a6d      	subs	r5, r5, r1
 800aabe:	f025 0503 	bic.w	r5, r5, #3
 800aac2:	3508      	adds	r5, #8
 800aac4:	2d0c      	cmp	r5, #12
 800aac6:	bf38      	it	cc
 800aac8:	250c      	movcc	r5, #12
 800aaca:	4629      	mov	r1, r5
 800aacc:	4638      	mov	r0, r7
 800aace:	f7ff ffa5 	bl	800aa1c <sbrk_aligned>
 800aad2:	3001      	adds	r0, #1
 800aad4:	d02b      	beq.n	800ab2e <_malloc_r+0xd2>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	442b      	add	r3, r5
 800aada:	6023      	str	r3, [r4, #0]
 800aadc:	e00e      	b.n	800aafc <_malloc_r+0xa0>
 800aade:	6822      	ldr	r2, [r4, #0]
 800aae0:	1b52      	subs	r2, r2, r5
 800aae2:	d41e      	bmi.n	800ab22 <_malloc_r+0xc6>
 800aae4:	2a0b      	cmp	r2, #11
 800aae6:	d916      	bls.n	800ab16 <_malloc_r+0xba>
 800aae8:	1961      	adds	r1, r4, r5
 800aaea:	42a3      	cmp	r3, r4
 800aaec:	6025      	str	r5, [r4, #0]
 800aaee:	bf18      	it	ne
 800aaf0:	6059      	strne	r1, [r3, #4]
 800aaf2:	6863      	ldr	r3, [r4, #4]
 800aaf4:	bf08      	it	eq
 800aaf6:	6031      	streq	r1, [r6, #0]
 800aaf8:	5162      	str	r2, [r4, r5]
 800aafa:	604b      	str	r3, [r1, #4]
 800aafc:	4638      	mov	r0, r7
 800aafe:	f104 060b 	add.w	r6, r4, #11
 800ab02:	f000 f865 	bl	800abd0 <__malloc_unlock>
 800ab06:	f026 0607 	bic.w	r6, r6, #7
 800ab0a:	1d23      	adds	r3, r4, #4
 800ab0c:	1af2      	subs	r2, r6, r3
 800ab0e:	d0b6      	beq.n	800aa7e <_malloc_r+0x22>
 800ab10:	1b9b      	subs	r3, r3, r6
 800ab12:	50a3      	str	r3, [r4, r2]
 800ab14:	e7b3      	b.n	800aa7e <_malloc_r+0x22>
 800ab16:	6862      	ldr	r2, [r4, #4]
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	bf0c      	ite	eq
 800ab1c:	6032      	streq	r2, [r6, #0]
 800ab1e:	605a      	strne	r2, [r3, #4]
 800ab20:	e7ec      	b.n	800aafc <_malloc_r+0xa0>
 800ab22:	4623      	mov	r3, r4
 800ab24:	6864      	ldr	r4, [r4, #4]
 800ab26:	e7b2      	b.n	800aa8e <_malloc_r+0x32>
 800ab28:	4634      	mov	r4, r6
 800ab2a:	6876      	ldr	r6, [r6, #4]
 800ab2c:	e7b9      	b.n	800aaa2 <_malloc_r+0x46>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	603b      	str	r3, [r7, #0]
 800ab32:	4638      	mov	r0, r7
 800ab34:	f000 f84c 	bl	800abd0 <__malloc_unlock>
 800ab38:	e7a1      	b.n	800aa7e <_malloc_r+0x22>
 800ab3a:	6025      	str	r5, [r4, #0]
 800ab3c:	e7de      	b.n	800aafc <_malloc_r+0xa0>
 800ab3e:	bf00      	nop
 800ab40:	24000928 	.word	0x24000928

0800ab44 <_realloc_r>:
 800ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab48:	4680      	mov	r8, r0
 800ab4a:	4614      	mov	r4, r2
 800ab4c:	460e      	mov	r6, r1
 800ab4e:	b921      	cbnz	r1, 800ab5a <_realloc_r+0x16>
 800ab50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab54:	4611      	mov	r1, r2
 800ab56:	f7ff bf81 	b.w	800aa5c <_malloc_r>
 800ab5a:	b92a      	cbnz	r2, 800ab68 <_realloc_r+0x24>
 800ab5c:	f7ff ff12 	bl	800a984 <_free_r>
 800ab60:	4625      	mov	r5, r4
 800ab62:	4628      	mov	r0, r5
 800ab64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab68:	f000 f838 	bl	800abdc <_malloc_usable_size_r>
 800ab6c:	4284      	cmp	r4, r0
 800ab6e:	4607      	mov	r7, r0
 800ab70:	d802      	bhi.n	800ab78 <_realloc_r+0x34>
 800ab72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab76:	d812      	bhi.n	800ab9e <_realloc_r+0x5a>
 800ab78:	4621      	mov	r1, r4
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	f7ff ff6e 	bl	800aa5c <_malloc_r>
 800ab80:	4605      	mov	r5, r0
 800ab82:	2800      	cmp	r0, #0
 800ab84:	d0ed      	beq.n	800ab62 <_realloc_r+0x1e>
 800ab86:	42bc      	cmp	r4, r7
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4631      	mov	r1, r6
 800ab8c:	bf28      	it	cs
 800ab8e:	463a      	movcs	r2, r7
 800ab90:	f7ff fed0 	bl	800a934 <memcpy>
 800ab94:	4631      	mov	r1, r6
 800ab96:	4640      	mov	r0, r8
 800ab98:	f7ff fef4 	bl	800a984 <_free_r>
 800ab9c:	e7e1      	b.n	800ab62 <_realloc_r+0x1e>
 800ab9e:	4635      	mov	r5, r6
 800aba0:	e7df      	b.n	800ab62 <_realloc_r+0x1e>
	...

0800aba4 <_sbrk_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d06      	ldr	r5, [pc, #24]	; (800abc0 <_sbrk_r+0x1c>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	602b      	str	r3, [r5, #0]
 800abb0:	f7f6 fb88 	bl	80012c4 <_sbrk>
 800abb4:	1c43      	adds	r3, r0, #1
 800abb6:	d102      	bne.n	800abbe <_sbrk_r+0x1a>
 800abb8:	682b      	ldr	r3, [r5, #0]
 800abba:	b103      	cbz	r3, 800abbe <_sbrk_r+0x1a>
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	bd38      	pop	{r3, r4, r5, pc}
 800abc0:	24000930 	.word	0x24000930

0800abc4 <__malloc_lock>:
 800abc4:	4801      	ldr	r0, [pc, #4]	; (800abcc <__malloc_lock+0x8>)
 800abc6:	f000 b811 	b.w	800abec <__retarget_lock_acquire_recursive>
 800abca:	bf00      	nop
 800abcc:	24000934 	.word	0x24000934

0800abd0 <__malloc_unlock>:
 800abd0:	4801      	ldr	r0, [pc, #4]	; (800abd8 <__malloc_unlock+0x8>)
 800abd2:	f000 b80c 	b.w	800abee <__retarget_lock_release_recursive>
 800abd6:	bf00      	nop
 800abd8:	24000934 	.word	0x24000934

0800abdc <_malloc_usable_size_r>:
 800abdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abe0:	1f18      	subs	r0, r3, #4
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	bfbc      	itt	lt
 800abe6:	580b      	ldrlt	r3, [r1, r0]
 800abe8:	18c0      	addlt	r0, r0, r3
 800abea:	4770      	bx	lr

0800abec <__retarget_lock_acquire_recursive>:
 800abec:	4770      	bx	lr

0800abee <__retarget_lock_release_recursive>:
 800abee:	4770      	bx	lr

0800abf0 <_init>:
 800abf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf2:	bf00      	nop
 800abf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abf6:	bc08      	pop	{r3}
 800abf8:	469e      	mov	lr, r3
 800abfa:	4770      	bx	lr

0800abfc <_fini>:
 800abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abfe:	bf00      	nop
 800ac00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac02:	bc08      	pop	{r3}
 800ac04:	469e      	mov	lr, r3
 800ac06:	4770      	bx	lr
